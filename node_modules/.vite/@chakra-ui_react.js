import {
  AbsoluteCenter,
  AspectRatio,
  Badge,
  Box,
  Center,
  Circle,
  Code,
  Container,
  Divider,
  Flex,
  Grid,
  GridItem,
  HStack,
  Heading,
  Kbd,
  Link,
  LinkBox,
  LinkOverlay,
  List,
  ListIcon,
  ListItem,
  OrderedList,
  SimpleGrid,
  Spacer,
  Square,
  Stack,
  StackDivider,
  StackItem,
  Text,
  UnorderedList,
  VStack,
  Wrap,
  WrapItem
} from "./chunk-CDPRQJLC.js";
import {
  Icon,
  createIcon,
  icon_default
} from "./chunk-TWB7ELUU.js";
import {
  Button,
  ButtonGroup,
  IconButton,
  Spinner,
  VisuallyHidden,
  VisuallyHiddenInput,
  useButtonGroup,
  visuallyHiddenStyle
} from "./chunk-WPNLIRBE.js";
import {
  ColorModeContext,
  ColorModeProvider,
  ColorModeScript,
  DarkMode,
  Global,
  GlobalStyle,
  LightMode,
  PanSession,
  StylesProvider,
  ThemeProvider,
  __DEV__,
  addItem,
  addPrefix,
  ariaAttr,
  arrayToObjectNotation,
  background,
  border,
  breakpoints,
  calc,
  callAll,
  callAllHandlers,
  cancelSync,
  chakra,
  clampValue,
  color,
  contains,
  cookieStorageManager,
  countDecimalPlaces,
  createContext,
  css,
  cssVar,
  cx,
  dataAttr,
  detectBrowser,
  determineLazyBehavior,
  es_default,
  filterUndefined,
  flexbox,
  flushSync,
  focus,
  forwardRef,
  fromEntries,
  getActiveElement,
  getAllFocusable,
  getBox,
  getCSSVar,
  getCss,
  getFrameData,
  getNextItemFromSearch,
  getOwnerDocument,
  getPointerEventName,
  getRelatedTarget,
  getValidChildren,
  grid,
  hasFocusWithin,
  import_lodash,
  isActiveElement,
  isArray,
  isBrowser,
  isEmpty,
  isEmptyObject,
  isFunction,
  isInputEvent,
  isNull,
  isNumber,
  isObject,
  isRefObject,
  isRightClick,
  isString,
  isStyleProp,
  isTabbable,
  isUndefined,
  keyframes,
  layout,
  layoutPropNames,
  list,
  localStorageManager,
  maxSafeInteger,
  memoizedGet,
  mergeRefs,
  minSafeInteger,
  noop,
  normalizeEventKey,
  objectKeys,
  omit,
  omitThemingProps,
  others,
  outline,
  percentToValue,
  pick,
  pipe,
  position,
  propNames,
  px,
  removeItem,
  roundValueToStep,
  runIfFn,
  scheduleMicrotask,
  shadow,
  shouldForwardProp,
  space,
  split,
  storageKey,
  styled,
  systemProps,
  toCSSObject,
  toCSSVar,
  toPrecision,
  toVarDefinition,
  toVarReference,
  tokenToCSSVar,
  transform,
  transition,
  typography,
  useChakra,
  useColorMode,
  useColorModeValue,
  useMultiStyleConfig,
  useProps,
  useStyleConfig,
  useStyles,
  useTheme,
  useToken,
  valueToPercent,
  warn,
  wrapPointerEventHandler
} from "./chunk-DD4YUUCY.js";
import {
  require_react_dom
} from "./chunk-4OXDECC5.js";
import {
  _extends
} from "./chunk-A6GXDZ4Y.js";
import "./chunk-VZ5GYEWF.js";
import {
  require_prop_types
} from "./chunk-4YCCOLG3.js";
import "./chunk-XE5KJBFZ.js";
import {
  require_react
} from "./chunk-EW5TIKWB.js";
import "./chunk-BH3UXIAV.js";
import {
  __commonJS,
  __esm,
  __export,
  __toModule
} from "./chunk-VAWVVJMZ.js";

// node_modules/toggle-selection/index.js
var require_toggle_selection = __commonJS({
  "node_modules/toggle-selection/index.js"(exports, module) {
    module.exports = function() {
      var selection = document.getSelection();
      if (!selection.rangeCount) {
        return function() {
        };
      }
      var active = document.activeElement;
      var ranges = [];
      for (var i = 0; i < selection.rangeCount; i++) {
        ranges.push(selection.getRangeAt(i));
      }
      switch (active.tagName.toUpperCase()) {
        case "INPUT":
        case "TEXTAREA":
          active.blur();
          break;
        default:
          active = null;
          break;
      }
      selection.removeAllRanges();
      return function() {
        selection.type === "Caret" && selection.removeAllRanges();
        if (!selection.rangeCount) {
          ranges.forEach(function(range2) {
            selection.addRange(range2);
          });
        }
        active && active.focus();
      };
    };
  }
});

// node_modules/copy-to-clipboard/index.js
var require_copy_to_clipboard = __commonJS({
  "node_modules/copy-to-clipboard/index.js"(exports, module) {
    "use strict";
    var deselectCurrent = require_toggle_selection();
    var clipboardToIE11Formatting = {
      "text/plain": "Text",
      "text/html": "Url",
      "default": "Text"
    };
    var defaultMessage = "Copy to clipboard: #{key}, Enter";
    function format2(message) {
      var copyKey = (/mac os x/i.test(navigator.userAgent) ? "\u2318" : "Ctrl") + "+C";
      return message.replace(/#{\s*key\s*}/g, copyKey);
    }
    function copy2(text, options) {
      var debug, message, reselectPrevious, range2, selection, mark, success = false;
      if (!options) {
        options = {};
      }
      debug = options.debug || false;
      try {
        reselectPrevious = deselectCurrent();
        range2 = document.createRange();
        selection = document.getSelection();
        mark = document.createElement("span");
        mark.textContent = text;
        mark.style.all = "unset";
        mark.style.position = "fixed";
        mark.style.top = 0;
        mark.style.clip = "rect(0, 0, 0, 0)";
        mark.style.whiteSpace = "pre";
        mark.style.webkitUserSelect = "text";
        mark.style.MozUserSelect = "text";
        mark.style.msUserSelect = "text";
        mark.style.userSelect = "text";
        mark.addEventListener("copy", function(e) {
          e.stopPropagation();
          if (options.format) {
            e.preventDefault();
            if (typeof e.clipboardData === "undefined") {
              debug && console.warn("unable to use e.clipboardData");
              debug && console.warn("trying IE specific stuff");
              window.clipboardData.clearData();
              var format3 = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"];
              window.clipboardData.setData(format3, text);
            } else {
              e.clipboardData.clearData();
              e.clipboardData.setData(options.format, text);
            }
          }
          if (options.onCopy) {
            e.preventDefault();
            options.onCopy(e.clipboardData);
          }
        });
        document.body.appendChild(mark);
        range2.selectNodeContents(mark);
        selection.addRange(range2);
        var successful = document.execCommand("copy");
        if (!successful) {
          throw new Error("copy command was unsuccessful");
        }
        success = true;
      } catch (err) {
        debug && console.error("unable to copy using execCommand: ", err);
        debug && console.warn("trying IE specific stuff");
        try {
          window.clipboardData.setData(options.format || "text", text);
          options.onCopy && options.onCopy(window.clipboardData);
          success = true;
        } catch (err2) {
          debug && console.error("unable to copy using clipboardData: ", err2);
          debug && console.error("falling back to prompt");
          message = format2("message" in options ? options.message : defaultMessage);
          window.prompt(message, text);
        }
      } finally {
        if (selection) {
          if (typeof selection.removeRange == "function") {
            selection.removeRange(range2);
          } else {
            selection.removeAllRanges();
          }
        }
        if (mark) {
          document.body.removeChild(mark);
        }
        reselectPrevious();
      }
      return success;
    }
    module.exports = copy2;
  }
});

// node_modules/tinycolor2/tinycolor.js
var require_tinycolor = __commonJS({
  "node_modules/tinycolor2/tinycolor.js"(exports, module) {
    (function(Math2) {
      var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound = Math2.round, mathMin = Math2.min, mathMax = Math2.max, mathRandom = Math2.random;
      function tinycolor(color3, opts) {
        color3 = color3 ? color3 : "";
        opts = opts || {};
        if (color3 instanceof tinycolor) {
          return color3;
        }
        if (!(this instanceof tinycolor)) {
          return new tinycolor(color3, opts);
        }
        var rgb = inputToRGB(color3);
        this._originalInput = color3, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType;
        if (this._r < 1) {
          this._r = mathRound(this._r);
        }
        if (this._g < 1) {
          this._g = mathRound(this._g);
        }
        if (this._b < 1) {
          this._b = mathRound(this._b);
        }
        this._ok = rgb.ok;
        this._tc_id = tinyCounter++;
      }
      tinycolor.prototype = {
        isDark: function() {
          return this.getBrightness() < 128;
        },
        isLight: function() {
          return !this.isDark();
        },
        isValid: function() {
          return this._ok;
        },
        getOriginalInput: function() {
          return this._originalInput;
        },
        getFormat: function() {
          return this._format;
        },
        getAlpha: function() {
          return this._a;
        },
        getBrightness: function() {
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
        },
        getLuminance: function() {
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r / 255;
          GsRGB = rgb.g / 255;
          BsRGB = rgb.b / 255;
          if (RsRGB <= 0.03928) {
            R = RsRGB / 12.92;
          } else {
            R = Math2.pow((RsRGB + 0.055) / 1.055, 2.4);
          }
          if (GsRGB <= 0.03928) {
            G = GsRGB / 12.92;
          } else {
            G = Math2.pow((GsRGB + 0.055) / 1.055, 2.4);
          }
          if (BsRGB <= 0.03928) {
            B = BsRGB / 12.92;
          } else {
            B = Math2.pow((BsRGB + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        },
        setAlpha: function(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100 * this._a) / 100;
          return this;
        },
        toHsv: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return {h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a};
        },
        toHsvString: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
          return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return {h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a};
        },
        toHslString: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
          return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function(allow3Char) {
          return "#" + this.toHex(allow3Char);
        },
        toHex8: function(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function(allow4Char) {
          return "#" + this.toHex8(allow4Char);
        },
        toRgb: function() {
          return {r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a};
        },
        toRgbString: function() {
          return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function() {
          return {r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a};
        },
        toPercentageRgbString: function() {
          return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function() {
          if (this._a === 0) {
            return "transparent";
          }
          if (this._a < 1) {
            return false;
          }
          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function(secondColor) {
          var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";
          if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }
          return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function(format2) {
          var formatSet = !!format2;
          format2 = format2 || this._format;
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format2 === "hex" || format2 === "hex6" || format2 === "hex3" || format2 === "hex4" || format2 === "hex8" || format2 === "name");
          if (needsAlphaFormat) {
            if (format2 === "name" && this._a === 0) {
              return this.toName();
            }
            return this.toRgbString();
          }
          if (format2 === "rgb") {
            formattedString = this.toRgbString();
          }
          if (format2 === "prgb") {
            formattedString = this.toPercentageRgbString();
          }
          if (format2 === "hex" || format2 === "hex6") {
            formattedString = this.toHexString();
          }
          if (format2 === "hex3") {
            formattedString = this.toHexString(true);
          }
          if (format2 === "hex4") {
            formattedString = this.toHex8String(true);
          }
          if (format2 === "hex8") {
            formattedString = this.toHex8String();
          }
          if (format2 === "name") {
            formattedString = this.toName();
          }
          if (format2 === "hsl") {
            formattedString = this.toHslString();
          }
          if (format2 === "hsv") {
            formattedString = this.toHsvString();
          }
          return formattedString || this.toHexString();
        },
        clone: function() {
          return tinycolor(this.toString());
        },
        _applyModification: function(fn2, args) {
          var color3 = fn2.apply(null, [this].concat([].slice.call(args)));
          this._r = color3._r;
          this._g = color3._g;
          this._b = color3._b;
          this.setAlpha(color3._a);
          return this;
        },
        lighten: function() {
          return this._applyModification(lighten, arguments);
        },
        brighten: function() {
          return this._applyModification(brighten, arguments);
        },
        darken: function() {
          return this._applyModification(darken, arguments);
        },
        desaturate: function() {
          return this._applyModification(desaturate, arguments);
        },
        saturate: function() {
          return this._applyModification(saturate, arguments);
        },
        greyscale: function() {
          return this._applyModification(greyscale, arguments);
        },
        spin: function() {
          return this._applyModification(spin2, arguments);
        },
        _applyCombination: function(fn2, args) {
          return fn2.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function() {
          return this._applyCombination(analogous, arguments);
        },
        complement: function() {
          return this._applyCombination(complement, arguments);
        },
        monochromatic: function() {
          return this._applyCombination(monochromatic, arguments);
        },
        splitcomplement: function() {
          return this._applyCombination(splitcomplement, arguments);
        },
        triad: function() {
          return this._applyCombination(triad, arguments);
        },
        tetrad: function() {
          return this._applyCombination(tetrad, arguments);
        }
      };
      tinycolor.fromRatio = function(color3, opts) {
        if (typeof color3 == "object") {
          var newColor = {};
          for (var i in color3) {
            if (color3.hasOwnProperty(i)) {
              if (i === "a") {
                newColor[i] = color3[i];
              } else {
                newColor[i] = convertToPercentage(color3[i]);
              }
            }
          }
          color3 = newColor;
        }
        return tinycolor(color3, opts);
      };
      function inputToRGB(color3) {
        var rgb = {r: 0, g: 0, b: 0};
        var a2 = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format2 = false;
        if (typeof color3 == "string") {
          color3 = stringInputToObject(color3);
        }
        if (typeof color3 == "object") {
          if (isValidCSSUnit(color3.r) && isValidCSSUnit(color3.g) && isValidCSSUnit(color3.b)) {
            rgb = rgbToRgb(color3.r, color3.g, color3.b);
            ok = true;
            format2 = String(color3.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.v)) {
            s = convertToPercentage(color3.s);
            v = convertToPercentage(color3.v);
            rgb = hsvToRgb(color3.h, s, v);
            ok = true;
            format2 = "hsv";
          } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.l)) {
            s = convertToPercentage(color3.s);
            l = convertToPercentage(color3.l);
            rgb = hslToRgb(color3.h, s, l);
            ok = true;
            format2 = "hsl";
          }
          if (color3.hasOwnProperty("a")) {
            a2 = color3.a;
          }
        }
        a2 = boundAlpha(a2);
        return {
          ok,
          format: color3.format || format2,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a2
        };
      }
      function rgbToRgb(r, g, b2) {
        return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b2, 255) * 255
        };
      }
      function rgbToHsl(r, g, b2) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b2 = bound01(b2, 255);
        var max = mathMax(r, g, b2), min = mathMin(r, g, b2);
        var h, s, l = (max + min) / 2;
        if (max == min) {
          h = s = 0;
        } else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch (max) {
            case r:
              h = (g - b2) / d + (g < b2 ? 6 : 0);
              break;
            case g:
              h = (b2 - r) / d + 2;
              break;
            case b2:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return {h, s, l};
      }
      function hslToRgb(h, s, l) {
        var r, g, b2;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);
        function hue2rgb(p2, q2, t) {
          if (t < 0)
            t += 1;
          if (t > 1)
            t -= 1;
          if (t < 1 / 6)
            return p2 + (q2 - p2) * 6 * t;
          if (t < 1 / 2)
            return q2;
          if (t < 2 / 3)
            return p2 + (q2 - p2) * (2 / 3 - t) * 6;
          return p2;
        }
        if (s === 0) {
          r = g = b2 = l;
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b2 = hue2rgb(p, q, h - 1 / 3);
        }
        return {r: r * 255, g: g * 255, b: b2 * 255};
      }
      function rgbToHsv(r, g, b2) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b2 = bound01(b2, 255);
        var max = mathMax(r, g, b2), min = mathMin(r, g, b2);
        var h, s, v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max == min) {
          h = 0;
        } else {
          switch (max) {
            case r:
              h = (g - b2) / d + (g < b2 ? 6 : 0);
              break;
            case g:
              h = (b2 - r) / d + 2;
              break;
            case b2:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return {h, s, v};
      }
      function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math2.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [v, q, p, p, t, v][mod], g = [t, v, v, q, p, p][mod], b2 = [p, p, t, v, v, q][mod];
        return {r: r * 255, g: g * 255, b: b2 * 255};
      }
      function rgbToHex(r, g, b2, allow3Char) {
        var hex2 = [
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b2).toString(16))
        ];
        if (allow3Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1)) {
          return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
        }
        return hex2.join("");
      }
      function rgbaToHex(r, g, b2, a2, allow4Char) {
        var hex2 = [
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b2).toString(16)),
          pad2(convertDecimalToHex(a2))
        ];
        if (allow4Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1) && hex2[3].charAt(0) == hex2[3].charAt(1)) {
          return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
        }
        return hex2.join("");
      }
      function rgbaToArgbHex(r, g, b2, a2) {
        var hex2 = [
          pad2(convertDecimalToHex(a2)),
          pad2(mathRound(r).toString(16)),
          pad2(mathRound(g).toString(16)),
          pad2(mathRound(b2).toString(16))
        ];
        return hex2.join("");
      }
      tinycolor.equals = function(color1, color22) {
        if (!color1 || !color22) {
          return false;
        }
        return tinycolor(color1).toRgbString() == tinycolor(color22).toRgbString();
      };
      tinycolor.random = function() {
        return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
        });
      };
      function desaturate(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color3).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }
      function saturate(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color3).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }
      function greyscale(color3) {
        return tinycolor(color3).desaturate(100);
      }
      function lighten(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color3).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }
      function brighten(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color3).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
      }
      function darken(color3, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color3).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }
      function spin2(color3, amount) {
        var hsl = tinycolor(color3).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
      }
      function complement(color3) {
        var hsl = tinycolor(color3).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
      }
      function triad(color3) {
        var hsl = tinycolor(color3).toHsl();
        var h = hsl.h;
        return [
          tinycolor(color3),
          tinycolor({h: (h + 120) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({h: (h + 240) % 360, s: hsl.s, l: hsl.l})
        ];
      }
      function tetrad(color3) {
        var hsl = tinycolor(color3).toHsl();
        var h = hsl.h;
        return [
          tinycolor(color3),
          tinycolor({h: (h + 90) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({h: (h + 180) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({h: (h + 270) % 360, s: hsl.s, l: hsl.l})
        ];
      }
      function splitcomplement(color3) {
        var hsl = tinycolor(color3).toHsl();
        var h = hsl.h;
        return [
          tinycolor(color3),
          tinycolor({h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({h: (h + 216) % 360, s: hsl.s, l: hsl.l})
        ];
      }
      function analogous(color3, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color3).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color3)];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
        }
        return ret;
      }
      function monochromatic(color3, results) {
        results = results || 6;
        var hsv = tinycolor(color3).toHsv();
        var h = hsv.h, s = hsv.s, v = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while (results--) {
          ret.push(tinycolor({h, s, v}));
          v = (v + modification) % 1;
        }
        return ret;
      }
      tinycolor.mix = function(color1, color22, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color22).toRgb();
        var p = amount / 100;
        var rgba2 = {
          r: (rgb2.r - rgb1.r) * p + rgb1.r,
          g: (rgb2.g - rgb1.g) * p + rgb1.g,
          b: (rgb2.b - rgb1.b) * p + rgb1.b,
          a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba2);
      };
      tinycolor.readability = function(color1, color22) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color22);
        return (Math2.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math2.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      };
      tinycolor.isReadable = function(color1, color22, wcag2) {
        var readability = tinycolor.readability(color1, color22);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);
        switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
            out = readability >= 4.5;
            break;
          case "AAlarge":
            out = readability >= 3;
            break;
          case "AAAsmall":
            out = readability >= 7;
            break;
        }
        return out;
      };
      tinycolor.mostReadable = function(baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size2;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size2 = args.size;
        for (var i = 0; i < colorList.length; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);
          if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
          }
        }
        if (tinycolor.isReadable(baseColor, bestColor, {"level": level, "size": size2}) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;
          return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      };
      var names2 = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      };
      var hexNames = tinycolor.hexNames = flip2(names2);
      function flip2(o) {
        var flipped = {};
        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
          }
        }
        return flipped;
      }
      function boundAlpha(a2) {
        a2 = parseFloat(a2);
        if (isNaN(a2) || a2 < 0 || a2 > 1) {
          a2 = 1;
        }
        return a2;
      }
      function bound01(n, max) {
        if (isOnePointZero(n)) {
          n = "100%";
        }
        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n)));
        if (processPercent) {
          n = parseInt(n * max, 10) / 100;
        }
        if (Math2.abs(n - max) < 1e-6) {
          return 1;
        }
        return n % max / parseFloat(max);
      }
      function clamp01(val) {
        return mathMin(1, mathMax(0, val));
      }
      function parseIntFromHex(val) {
        return parseInt(val, 16);
      }
      function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
      }
      function isPercentage(n) {
        return typeof n === "string" && n.indexOf("%") != -1;
      }
      function pad2(c2) {
        return c2.length == 1 ? "0" + c2 : "" + c2;
      }
      function convertToPercentage(n) {
        if (n <= 1) {
          n = n * 100 + "%";
        }
        return n;
      }
      function convertDecimalToHex(d) {
        return Math2.round(parseFloat(d) * 255).toString(16);
      }
      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }
      var matchers = function() {
        var CSS_INTEGER = "[-\\+]?\\d+%?";
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
      }();
      function isValidCSSUnit(color3) {
        return !!matchers.CSS_UNIT.exec(color3);
      }
      function stringInputToObject(color3) {
        color3 = color3.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
        var named = false;
        if (names2[color3]) {
          color3 = names2[color3];
          named = true;
        } else if (color3 == "transparent") {
          return {r: 0, g: 0, b: 0, a: 0, format: "name"};
        }
        var match;
        if (match = matchers.rgb.exec(color3)) {
          return {r: match[1], g: match[2], b: match[3]};
        }
        if (match = matchers.rgba.exec(color3)) {
          return {r: match[1], g: match[2], b: match[3], a: match[4]};
        }
        if (match = matchers.hsl.exec(color3)) {
          return {h: match[1], s: match[2], l: match[3]};
        }
        if (match = matchers.hsla.exec(color3)) {
          return {h: match[1], s: match[2], l: match[3], a: match[4]};
        }
        if (match = matchers.hsv.exec(color3)) {
          return {h: match[1], s: match[2], v: match[3]};
        }
        if (match = matchers.hsva.exec(color3)) {
          return {h: match[1], s: match[2], v: match[3], a: match[4]};
        }
        if (match = matchers.hex8.exec(color3)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
          };
        }
        if (match = matchers.hex6.exec(color3)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
          };
        }
        if (match = matchers.hex4.exec(color3)) {
          return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            a: convertHexToDecimal(match[4] + "" + match[4]),
            format: named ? "name" : "hex8"
          };
        }
        if (match = matchers.hex3.exec(color3)) {
          return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            format: named ? "name" : "hex"
          };
        }
        return false;
      }
      function validateWCAG2Parms(parms) {
        var level, size2;
        parms = parms || {"level": "AA", "size": "small"};
        level = (parms.level || "AA").toUpperCase();
        size2 = (parms.size || "small").toLowerCase();
        if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }
        if (size2 !== "small" && size2 !== "large") {
          size2 = "small";
        }
        return {"level": level, "size": size2};
      }
      if (typeof module !== "undefined" && module.exports) {
        module.exports = tinycolor;
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return tinycolor;
        });
      } else {
        window.tinycolor = tinycolor;
      }
    })(Math);
  }
});

// node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.esm.js
function memoize(fn2) {
  var cache2 = {};
  return function(arg) {
    if (cache2[arg] === void 0)
      cache2[arg] = fn2(arg);
    return cache2[arg];
  };
}
var memoize_browser_esm_default;
var init_memoize_browser_esm = __esm({
  "node_modules/framer-motion/node_modules/@emotion/memoize/dist/memoize.browser.esm.js"() {
    memoize_browser_esm_default = memoize;
  }
});

// node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
var is_prop_valid_browser_esm_exports = {};
__export(is_prop_valid_browser_esm_exports, {
  default: () => is_prop_valid_browser_esm_default
});
var reactPropsRegex, index, is_prop_valid_browser_esm_default;
var init_is_prop_valid_browser_esm = __esm({
  "node_modules/framer-motion/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js"() {
    init_memoize_browser_esm();
    reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    index = memoize_browser_esm_default(function(prop) {
      return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
    });
    is_prop_valid_browser_esm_default = index;
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__2 = true;
    var warning2 = function() {
    };
    if (__DEV__2) {
      printWarning = function printWarning2(format2, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format2.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning2 = function(condition, format2, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format2 === void 0) {
          throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        }
        if (!condition) {
          printWarning.apply(null, [format2].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning2;
  }
});

// node_modules/@chakra-ui/css-reset/dist/esm/css-reset.js
var React = __toModule(require_react());
var CSSReset = () => React.createElement(Global, {
  styles: `
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;      
        -moz-osx-font-smoothing: grayscale; 
        touch-action: manipulation; 
      }

      body {
        position: relative;
        min-height: 100%;
        font-feature-settings: 'kern';
      }

      *,
      *::before,
      *::after {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
      }

      main {
        display: block;
      }

      hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      pre,
      code,
      kbd,
      samp {
        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      b,
      strong {
        font-weight: bold;
      }

      small {
        font-size: 80%;
      }

      sub,
      sup {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      sub {
        bottom: -0.25em;
      }

      sup {
        top: -0.5em;
      }

      img {
        border-style: none;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      button,
      input {
        overflow: visible;
      }

      button,
      select {
        text-transform: none;
      }

      button::-moz-focus-inner,
      [type="button"]::-moz-focus-inner,
      [type="reset"]::-moz-focus-inner,
      [type="submit"]::-moz-focus-inner {
        border-style: none;
        padding: 0;
      }

      fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      progress {
        vertical-align: baseline;
      }

      textarea {
        overflow: auto;
      }

      [type="checkbox"],
      [type="radio"] {
        box-sizing: border-box;
        padding: 0;
      }

      [type="number"]::-webkit-inner-spin-button,
      [type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      input[type="number"] {
        -moz-appearance: textfield;
      }

      [type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      [type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      details {
        display: block;
      }

      summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      body,
      blockquote,
      dl,
      dd,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      hr,
      figure,
      p,
      pre {
        margin: 0;
      }

      button {
        background: transparent;
        padding: 0;
      }

      fieldset {
        margin: 0;
        padding: 0;
      }

      ol,
      ul {
        margin: 0;
        padding: 0;
      }

      textarea {
        resize: vertical;
      }

      button,
      [role="button"] {
        cursor: pointer;
      }

      button::-moz-focus-inner {
        border: 0 !important;
      }

      table {
        border-collapse: collapse;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-size: inherit;
        font-weight: inherit;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      img,
      svg,
      video,
      canvas,
      audio,
      iframe,
      embed,
      object {
        display: block;
        vertical-align: middle;
      }

      img,
      video {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible] :focus:not([data-focus-visible-added]) {
        outline: none;
        box-shadow: none;
      }

      select::-ms-expand {
        display: none;
      }
    `
});
var css_reset_default = CSSReset;

// node_modules/@chakra-ui/portal/dist/esm/portal-manager.js
var React2 = __toModule(require_react());
var [PortalManagerContextProvider, usePortalManager] = createContext({
  strict: false,
  name: "PortalManagerContext"
});
function PortalManager(props) {
  var {
    children,
    zIndex
  } = props;
  return React2.createElement(PortalManagerContextProvider, {
    value: {
      zIndex
    }
  }, children);
}
if (__DEV__) {
  PortalManager.displayName = "PortalManager";
}

// node_modules/@chakra-ui/hooks/dist/esm/use-boolean.js
var import_react2 = __toModule(require_react());
function useBoolean(initialState) {
  if (initialState === void 0) {
    initialState = false;
  }
  var [value, setValue] = (0, import_react2.useState)(initialState);
  var on = (0, import_react2.useCallback)(() => {
    setValue(true);
  }, []);
  var off = (0, import_react2.useCallback)(() => {
    setValue(false);
  }, []);
  var toggle = (0, import_react2.useCallback)(() => {
    setValue((prev) => !prev);
  }, []);
  return [value, {
    on,
    off,
    toggle
  }];
}

// node_modules/@chakra-ui/hooks/dist/esm/use-callback-ref.js
var React4 = __toModule(require_react());

// node_modules/@chakra-ui/hooks/dist/esm/use-safe-layout-effect.js
var React3 = __toModule(require_react());
var useSafeLayoutEffect = isBrowser ? React3.useLayoutEffect : React3.useEffect;

// node_modules/@chakra-ui/hooks/dist/esm/use-callback-ref.js
function useCallbackRef(fn2, deps) {
  if (deps === void 0) {
    deps = [];
  }
  var ref = React4.useRef(fn2);
  useSafeLayoutEffect(() => {
    ref.current = fn2;
  });
  return React4.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args);
  }, deps);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-clipboard.js
var import_react3 = __toModule(require_react());
var import_copy_to_clipboard = __toModule(require_copy_to_clipboard());
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useClipboard(text, optionsOrTimeout) {
  if (optionsOrTimeout === void 0) {
    optionsOrTimeout = {};
  }
  var [hasCopied, setHasCopied] = (0, import_react3.useState)(false);
  var _ref2 = typeof optionsOrTimeout === "number" ? {
    timeout: optionsOrTimeout
  } : optionsOrTimeout, {
    timeout = 1500
  } = _ref2, copyOptions = _objectWithoutPropertiesLoose(_ref2, ["timeout"]);
  var onCopy = (0, import_react3.useCallback)(() => {
    var didCopy = (0, import_copy_to_clipboard.default)(text, copyOptions);
    setHasCopied(didCopy);
  }, [text, copyOptions]);
  (0, import_react3.useEffect)(() => {
    var timeoutId = null;
    if (hasCopied) {
      timeoutId = window.setTimeout(() => {
        setHasCopied(false);
      }, timeout);
    }
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [timeout, hasCopied]);
  return {
    value: text,
    onCopy,
    hasCopied
  };
}

// node_modules/@chakra-ui/hooks/dist/esm/use-const.js
var import_react4 = __toModule(require_react());
function useConst(init) {
  var ref = (0, import_react4.useRef)(null);
  if (ref.current === null) {
    ref.current = typeof init === "function" ? init() : init;
  }
  return ref.current;
}

// node_modules/@chakra-ui/hooks/dist/esm/use-controllable.js
var React5 = __toModule(require_react());
function useControllableProp(prop, state) {
  var isControlled = prop !== void 0;
  var value = isControlled && typeof prop !== "undefined" ? prop : state;
  return [isControlled, value];
}
function useControllableState(props) {
  var {
    value: valueProp,
    defaultValue,
    onChange,
    shouldUpdate = (prev, next) => prev !== next
  } = props;
  var onChangeProp = useCallbackRef(onChange);
  var shouldUpdateProp = useCallbackRef(shouldUpdate);
  var [valueState, setValue] = React5.useState(defaultValue);
  var isControlled = valueProp !== void 0;
  var value = isControlled ? valueProp : valueState;
  var updateValue = React5.useCallback((next) => {
    var nextValue = runIfFn(next, value);
    if (!shouldUpdateProp(value, nextValue)) {
      return;
    }
    if (!isControlled) {
      setValue(nextValue);
    }
    onChangeProp(nextValue);
  }, [isControlled, onChangeProp, value, shouldUpdateProp]);
  return [value, updateValue];
}

// node_modules/@chakra-ui/hooks/dist/esm/use-dimensions.js
var React6 = __toModule(require_react());
function useDimensions(ref, observe) {
  var [dimensions, setDimensions] = React6.useState(null);
  var rafId = React6.useRef();
  useSafeLayoutEffect(() => {
    if (!ref.current)
      return void 0;
    var node2 = ref.current;
    function measure() {
      rafId.current = requestAnimationFrame(() => {
        var boxModel = getBox(node2);
        setDimensions(boxModel);
      });
    }
    measure();
    if (observe) {
      window.addEventListener("resize", measure);
      window.addEventListener("scroll", measure);
    }
    return () => {
      if (observe) {
        window.removeEventListener("resize", measure);
        window.removeEventListener("scroll", measure);
      }
      if (rafId.current) {
        cancelAnimationFrame(rafId.current);
      }
    };
  }, [observe]);
  return dimensions;
}

// node_modules/@chakra-ui/hooks/dist/esm/use-disclosure.js
var React8 = __toModule(require_react());

// node_modules/@chakra-ui/hooks/dist/esm/use-id.js
var React7 = __toModule(require_react());
var handoffComplete = false;
var id = 0;
var genId = () => ++id;
function useId(idProp, prefix) {
  var initialId = idProp || (handoffComplete ? genId() : null);
  var [uid, setUid] = React7.useState(initialId);
  useSafeLayoutEffect(() => {
    if (uid === null)
      setUid(genId());
  }, []);
  React7.useEffect(() => {
    if (handoffComplete === false) {
      handoffComplete = true;
    }
  }, []);
  var id2 = uid != null ? uid.toString() : void 0;
  return prefix ? prefix + "-" + id2 : id2;
}
function useIds(idProp) {
  var id2 = useId(idProp);
  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    prefixes[_key - 1] = arguments[_key];
  }
  return prefixes.map((prefix) => prefix + "-" + id2);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-disclosure.js
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function useDisclosure(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    onClose: onCloseProp,
    onOpen: onOpenProp,
    isOpen: isOpenProp,
    id: idProp
  } = props;
  var [isOpenState, setIsOpen] = React8.useState(props.defaultIsOpen || false);
  var [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);
  var id2 = useId(idProp, "disclosure");
  var onClose = React8.useCallback(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    onCloseProp == null ? void 0 : onCloseProp();
  }, [isControlled, onCloseProp]);
  var onOpen = React8.useCallback(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    onOpenProp == null ? void 0 : onOpenProp();
  }, [isControlled, onOpenProp]);
  var onToggle = React8.useCallback(() => {
    var action = isOpen ? onClose : onOpen;
    action();
  }, [isOpen, onOpen, onClose]);
  return {
    isOpen: !!isOpen,
    onOpen,
    onClose,
    onToggle,
    isControlled,
    getButtonProps: function getButtonProps(props2) {
      if (props2 === void 0) {
        props2 = {};
      }
      return _extends2({}, props2, {
        "aria-expanded": "true",
        "aria-controls": id2,
        onClick: callAllHandlers(props2.onClick, onToggle)
      });
    },
    getDisclosureProps: function getDisclosureProps(props2) {
      if (props2 === void 0) {
        props2 = {};
      }
      return _extends2({}, props2, {
        hidden: !isOpen,
        id: id2
      });
    }
  };
}

// node_modules/@chakra-ui/hooks/dist/esm/use-event-callback.js
var React9 = __toModule(require_react());
function useEventCallback(callback) {
  var ref = React9.useRef(callback);
  useSafeLayoutEffect(() => {
    ref.current = callback;
  });
  return React9.useCallback(function(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return ref.current(event, ...args);
  }, []);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-event-listener.js
var React10 = __toModule(require_react());
function useEventListener(event, handler, env2, options) {
  var listener = useCallbackRef(handler);
  React10.useEffect(() => {
    var _runIfFn;
    var node2 = (_runIfFn = runIfFn(env2)) != null ? _runIfFn : document;
    node2.addEventListener(event, listener, options);
    return () => {
      node2.removeEventListener(event, listener, options);
    };
  }, [event, env2, options, listener]);
  return () => {
    var _runIfFn2;
    var node2 = (_runIfFn2 = runIfFn(env2)) != null ? _runIfFn2 : document;
    node2.removeEventListener(event, listener, options);
  };
}

// node_modules/@chakra-ui/hooks/dist/esm/use-event-listener-map.js
var React11 = __toModule(require_react());
function useEventListenerMap() {
  var listeners = React11.useRef(new Map());
  var currentListeners = listeners.current;
  var add = React11.useCallback((el, type, listener, options) => {
    var pointerEventListener = wrapPointerEventHandler(listener, type === "pointerdown");
    listeners.current.set(listener, {
      __listener: pointerEventListener,
      type: getPointerEventName(type),
      el,
      options
    });
    el.addEventListener(type, pointerEventListener, options);
  }, []);
  var remove = React11.useCallback((el, type, listener, options) => {
    var {
      __listener: pointerEventListener
    } = listeners.current.get(listener);
    el.removeEventListener(type, pointerEventListener, options);
    listeners.current.delete(pointerEventListener);
  }, []);
  React11.useEffect(() => () => {
    currentListeners.forEach((value, key) => {
      remove(value.el, value.type, key, value.options);
    });
  }, [remove, currentListeners]);
  return {
    add,
    remove
  };
}

// node_modules/@chakra-ui/hooks/dist/esm/use-update-effect.js
var React12 = __toModule(require_react());
var useUpdateEffect = (effect4, deps) => {
  var mounted = React12.useRef(false);
  React12.useEffect(() => {
    if (mounted.current) {
      return effect4();
    }
    mounted.current = true;
    return void 0;
  }, deps);
  return mounted.current;
};

// node_modules/@chakra-ui/hooks/dist/esm/use-focus-effect.js
function useFocusEffect(ref, options) {
  var {
    shouldFocus,
    preventScroll
  } = options;
  useUpdateEffect(() => {
    var node2 = ref.current;
    if (!node2 || !shouldFocus)
      return;
    if (!hasFocusWithin(node2)) {
      focus(node2, {
        preventScroll,
        nextTick: true
      });
    }
  }, [shouldFocus, ref, preventScroll]);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-focus-on-hide.js
function preventReturnFocus(containerRef) {
  var el = containerRef.current;
  if (!el)
    return false;
  var activeElement = getActiveElement(el);
  if (!activeElement)
    return false;
  if (contains(el, activeElement))
    return false;
  if (isTabbable(activeElement))
    return true;
  return false;
}
function useFocusOnHide(containerRef, options) {
  var {
    shouldFocus: shouldFocusProp,
    visible,
    focusRef
  } = options;
  var shouldFocus = shouldFocusProp && !visible;
  useUpdateEffect(() => {
    if (!shouldFocus)
      return;
    if (preventReturnFocus(containerRef)) {
      return;
    }
    var el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;
    if (el) {
      focus(el, {
        nextTick: true
      });
    }
  }, [shouldFocus, containerRef, focusRef]);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-pointer-event.js
function usePointerEvent(env2, eventName, handler, options) {
  return useEventListener(getPointerEventName(eventName), wrapPointerEventHandler(handler, eventName === "pointerdown"), env2, options);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-focus-on-pointerdown.js
function useFocusOnPointerDown(props) {
  var {
    ref,
    elements: elements2,
    enabled
  } = props;
  var isSafari = detectBrowser("Safari");
  var doc2 = () => getOwnerDocument(ref.current);
  usePointerEvent(doc2, "pointerdown", (event) => {
    if (!isSafari || !enabled)
      return;
    var target = event.target;
    var els = elements2 != null ? elements2 : [ref];
    var isValidTarget = els.some((elementOrRef) => {
      var el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;
      return contains(el, target);
    });
    if (!isActiveElement(target) && isValidTarget) {
      event.preventDefault();
      focus(target);
    }
  });
}

// node_modules/@chakra-ui/hooks/dist/esm/use-focus-on-show.js
var import_react5 = __toModule(require_react());
var defaultOptions = {
  preventScroll: true,
  shouldFocus: false
};
function useFocusOnShow(target, options) {
  if (options === void 0) {
    options = defaultOptions;
  }
  var {
    focusRef,
    preventScroll,
    shouldFocus,
    visible
  } = options;
  var element = isRefObject(target) ? target.current : target;
  var autoFocus = shouldFocus && visible;
  var onFocus3 = (0, import_react5.useCallback)(() => {
    if (!element || !autoFocus)
      return;
    if (contains(element, document.activeElement))
      return;
    if (focusRef != null && focusRef.current) {
      focus(focusRef.current, {
        preventScroll,
        nextTick: true
      });
    } else {
      var tabbableEls = getAllFocusable(element);
      if (tabbableEls.length > 0) {
        focus(tabbableEls[0], {
          preventScroll,
          nextTick: true
        });
      }
    }
  }, [autoFocus, preventScroll, element, focusRef]);
  useUpdateEffect(() => {
    onFocus3();
  }, [onFocus3]);
  useEventListener("transitionend", onFocus3, element);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-force-update.js
var React14 = __toModule(require_react());

// node_modules/@chakra-ui/hooks/dist/esm/use-unmount-effect.js
var React13 = __toModule(require_react());
function useUnmountEffect(fn2, deps) {
  if (deps === void 0) {
    deps = [];
  }
  return React13.useEffect(() => () => fn2(), deps);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-force-update.js
function useForceUpdate() {
  var unloadingRef = React14.useRef(false);
  var [count, setCount] = React14.useState(0);
  useUnmountEffect(() => {
    unloadingRef.current = true;
  });
  return React14.useCallback(() => {
    if (!unloadingRef.current) {
      setCount(count + 1);
    }
  }, [count]);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-interval.js
var React15 = __toModule(require_react());
function useInterval(callback, delay) {
  var fn2 = useCallbackRef(callback);
  React15.useEffect(() => {
    var intervalId = null;
    var tick = () => fn2();
    if (delay !== null) {
      intervalId = window.setInterval(tick, delay);
    }
    return () => {
      if (intervalId) {
        window.clearInterval(intervalId);
      }
    };
  }, [delay, fn2]);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-latest-ref.js
var React16 = __toModule(require_react());
function useLatestRef(value) {
  var ref = React16.useRef(null);
  ref.current = value;
  return ref;
}

// node_modules/@chakra-ui/hooks/dist/esm/use-merge-refs.js
var React17 = __toModule(require_react());
function assignRef(ref, value) {
  if (ref == null)
    return;
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  try {
    ref.current = value;
  } catch (error) {
    throw new Error("Cannot assign value '" + value + "' to ref '" + ref + "'");
  }
}
function useMergeRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return React17.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (node2) => {
      refs.forEach((ref) => {
        if (ref)
          assignRef(ref, node2);
      });
    };
  }, refs);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-mouse-down-ref.js
var import_react6 = __toModule(require_react());
function useMouseDownRef(shouldListen) {
  if (shouldListen === void 0) {
    shouldListen = true;
  }
  var mouseDownRef = import_react6.default.useRef();
  useEventListener("mousedown", (event) => {
    if (shouldListen) {
      mouseDownRef.current = event.target;
    }
  });
  return mouseDownRef;
}

// node_modules/@chakra-ui/hooks/dist/esm/use-outside-click.js
var import_react7 = __toModule(require_react());
function useOutsideClick(props) {
  var {
    ref,
    handler
  } = props;
  var savedHandler = useCallbackRef(handler);
  var stateRef = (0, import_react7.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false
  });
  var state = stateRef.current;
  (0, import_react7.useEffect)(() => {
    var onPointerDown = (e) => {
      if (isValidEvent(e, ref)) {
        state.isPointerDown = true;
      }
    };
    var onMouseUp = (event) => {
      if (state.ignoreEmulatedMouseEvents) {
        state.ignoreEmulatedMouseEvents = false;
        return;
      }
      if (state.isPointerDown && handler && isValidEvent(event, ref)) {
        state.isPointerDown = false;
        savedHandler(event);
      }
    };
    var onTouchEnd = (event) => {
      state.ignoreEmulatedMouseEvents = true;
      if (handler && state.isPointerDown && isValidEvent(event, ref)) {
        state.isPointerDown = false;
        savedHandler(event);
      }
    };
    var doc2 = getOwnerDocument(ref.current);
    doc2.addEventListener("mousedown", onPointerDown, true);
    doc2.addEventListener("mouseup", onMouseUp, true);
    doc2.addEventListener("touchstart", onPointerDown, true);
    doc2.addEventListener("touchend", onTouchEnd, true);
    return () => {
      doc2.removeEventListener("mousedown", onPointerDown, true);
      doc2.removeEventListener("mouseup", onMouseUp, true);
      doc2.removeEventListener("touchstart", onPointerDown, true);
      doc2.removeEventListener("touchend", onTouchEnd, true);
    };
  }, [handler, ref, savedHandler, state]);
}
function isValidEvent(event, ref) {
  var _ref$current;
  var target = event.target;
  if (event.button > 0)
    return false;
  if (target) {
    var doc2 = getOwnerDocument(target);
    if (!doc2.body.contains(target))
      return false;
  }
  return !((_ref$current = ref.current) != null && _ref$current.contains(target));
}

// node_modules/@chakra-ui/hooks/dist/esm/use-pan-gesture.js
var import_react8 = __toModule(require_react());
function usePanGesture(ref, props) {
  var {
    onPan,
    onPanStart,
    onPanEnd,
    onPanSessionStart,
    onPanSessionEnd
  } = props;
  var hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);
  var panSession = (0, import_react8.useRef)(null);
  var handlers = {
    onSessionStart: onPanSessionStart,
    onSessionEnd: onPanSessionEnd,
    onStart: onPanStart,
    onMove: onPan,
    onEnd(event, info) {
      panSession.current = null;
      onPanEnd == null ? void 0 : onPanEnd(event, info);
    }
  };
  (0, import_react8.useEffect)(() => {
    var _panSession$current;
    (_panSession$current = panSession.current) == null ? void 0 : _panSession$current.updateHandlers(handlers);
  });
  function onPointerDown(event) {
    panSession.current = new PanSession(event, handlers);
  }
  usePointerEvent(() => ref.current, "pointerdown", hasPanEvents ? onPointerDown : noop);
  useUnmountEffect(() => {
    var _panSession$current2;
    (_panSession$current2 = panSession.current) == null ? void 0 : _panSession$current2.end();
    panSession.current = null;
  });
}

// node_modules/@chakra-ui/hooks/dist/esm/use-previous.js
var import_react9 = __toModule(require_react());
function usePrevious(value) {
  var ref = (0, import_react9.useRef)();
  (0, import_react9.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// node_modules/@chakra-ui/hooks/dist/esm/use-shortcut.js
var React19 = __toModule(require_react());
function isPrintableCharacter(event) {
  var {
    key
  } = event;
  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);
}
function useShortcut(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    timeout = 300,
    preventDefault = () => true
  } = props;
  var [keys2, setKeys] = React19.useState([]);
  var timeoutRef = React19.useRef();
  var flush = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };
  var clearKeysAfterDelay = () => {
    flush();
    timeoutRef.current = setTimeout(() => {
      setKeys([]);
      timeoutRef.current = null;
    }, timeout);
  };
  React19.useEffect(() => flush, []);
  function onKeyDown(fn2) {
    return (event) => {
      if (event.key === "Backspace") {
        var keysCopy = [...keys2];
        keysCopy.pop();
        setKeys(keysCopy);
        return;
      }
      if (isPrintableCharacter(event)) {
        var _keysCopy = keys2.concat(event.key);
        if (preventDefault(event)) {
          event.preventDefault();
          event.stopPropagation();
        }
        setKeys(_keysCopy);
        fn2(_keysCopy.join(""));
        clearKeysAfterDelay();
      }
    };
  }
  return onKeyDown;
}

// node_modules/@chakra-ui/hooks/dist/esm/use-timeout.js
var React20 = __toModule(require_react());
function useTimeout(callback, delay) {
  var fn2 = useCallbackRef(callback);
  React20.useEffect(() => {
    if (delay == null)
      return void 0;
    var timeoutId = null;
    timeoutId = window.setTimeout(() => {
      fn2();
    }, delay);
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [delay, fn2]);
}

// node_modules/@chakra-ui/hooks/dist/esm/use-why-update.js
var React21 = __toModule(require_react());
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function useWhyDidYouUpdate(name, props) {
  var previousProps = React21.useRef();
  React21.useEffect(() => {
    if (previousProps.current) {
      var allKeys = Object.keys(_extends3({}, previousProps.current, props));
      var changesObj = {};
      allKeys.forEach((key) => {
        if (previousProps.current[key] !== props[key]) {
          changesObj[key] = {
            from: previousProps.current[key],
            to: props[key]
          };
        }
      });
      if (Object.keys(changesObj).length) {
        console.log("[why-did-you-update]", name, changesObj);
      }
    }
    previousProps.current = props;
  });
}

// node_modules/@chakra-ui/portal/dist/esm/portal.js
var React22 = __toModule(require_react());
var import_react_dom = __toModule(require_react_dom());
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [PortalContextProvider, usePortalContext] = createContext({
  strict: false,
  name: "PortalContext"
});
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = ".chakra-portal";
var Container2 = (props) => React22.createElement("div", {
  className: "chakra-portal-zIndex",
  style: {
    position: "absolute",
    zIndex: props.zIndex,
    top: 0,
    left: 0,
    right: 0
  }
}, props.children);
var DefaultPortal = (props) => {
  var {
    appendToParentPortal,
    children
  } = props;
  var tempNode = React22.useRef(null);
  var portal = React22.useRef(null);
  var forceUpdate = useForceUpdate();
  var parentPortal = usePortalContext();
  var manager2 = usePortalManager();
  useSafeLayoutEffect(() => {
    if (!tempNode.current)
      return;
    var doc2 = tempNode.current.ownerDocument;
    var host = appendToParentPortal ? parentPortal != null ? parentPortal : doc2.body : doc2.body;
    if (!host)
      return;
    portal.current = doc2.createElement("div");
    portal.current.className = PORTAL_CLASSNAME;
    host.appendChild(portal.current);
    forceUpdate();
    var portalNode = portal.current;
    return () => {
      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, []);
  var _children = manager2 != null && manager2.zIndex ? React22.createElement(Container2, {
    zIndex: manager2 == null ? void 0 : manager2.zIndex
  }, children) : children;
  return portal.current ? (0, import_react_dom.createPortal)(React22.createElement(PortalContextProvider, {
    value: portal.current
  }, _children), portal.current) : React22.createElement("span", {
    ref: tempNode
  });
};
var ContainerPortal = (props) => {
  var {
    children,
    containerRef,
    appendToParentPortal
  } = props;
  var containerEl = containerRef.current;
  var host = containerEl != null ? containerEl : isBrowser ? document.body : void 0;
  var portal = React22.useMemo(() => {
    var node2 = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
    if (node2)
      node2.className = PORTAL_CLASSNAME;
    return node2;
  }, [containerEl]);
  var forceUpdate = useForceUpdate();
  useSafeLayoutEffect(() => {
    forceUpdate();
  }, []);
  useSafeLayoutEffect(() => {
    if (!portal || !host)
      return;
    host.appendChild(portal);
    return () => {
      host.removeChild(portal);
    };
  }, [portal, host]);
  if (host && portal) {
    return (0, import_react_dom.createPortal)(React22.createElement(PortalContextProvider, {
      value: appendToParentPortal ? portal : null
    }, children), portal);
  }
  return null;
};
function Portal(props) {
  var {
    containerRef
  } = props, rest = _objectWithoutPropertiesLoose2(props, ["containerRef"]);
  return containerRef ? React22.createElement(ContainerPortal, _extends4({
    containerRef
  }, rest)) : React22.createElement(DefaultPortal, rest);
}
Portal.defaultProps = {
  appendToParentPortal: true
};
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
if (__DEV__) {
  Portal.displayName = "Portal";
}

// node_modules/@chakra-ui/theme/dist/esm/components/accordion.js
var parts = ["container", "button", "panel", "icon"];
var baseStyleContainer = {
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
};
var baseStyleButton = {
  fontSize: "1rem",
  _focus: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: 4,
  py: 2
};
var baseStylePanel = {
  pt: 2,
  px: 4,
  pb: 5
};
var baseStyleIcon = {
  fontSize: "1.25em"
};
var baseStyle = {
  container: baseStyleContainer,
  button: baseStyleButton,
  panel: baseStylePanel,
  icon: baseStyleIcon
};
var accordion_default = {
  parts,
  baseStyle
};

// node_modules/@chakra-ui/theme-tools/dist/esm/color.js
var import_tinycolor2 = __toModule(require_tinycolor());
var getColor = (theme2, color3, fallback) => {
  var hex2 = memoizedGet(theme2, "colors." + color3, color3);
  var isValid = (0, import_tinycolor2.default)(hex2).isValid();
  return isValid ? hex2 : fallback;
};
var tone = (color3) => (theme2) => {
  var hex2 = getColor(theme2, color3);
  var isDark2 = (0, import_tinycolor2.default)(hex2).isDark();
  return isDark2 ? "dark" : "light";
};
var isDark = (color3) => (theme2) => tone(color3)(theme2) === "dark";
var transparentize = (color3, opacity) => (theme2) => {
  var raw = getColor(theme2, color3);
  return (0, import_tinycolor2.default)(raw).setAlpha(opacity).toRgbString();
};
function generateStripe(size2, color3) {
  if (size2 === void 0) {
    size2 = "1rem";
  }
  if (color3 === void 0) {
    color3 = "rgba(255, 255, 255, 0.15)";
  }
  return {
    backgroundImage: "linear-gradient(\n    45deg,\n    " + color3 + " 25%,\n    transparent 25%,\n    transparent 50%,\n    " + color3 + " 50%,\n    " + color3 + " 75%,\n    transparent 75%,\n    transparent\n  )",
    backgroundSize: size2 + " " + size2
  };
}
function randomColor(opts) {
  var fallback = import_tinycolor2.default.random().toHexString();
  if (!opts || isEmptyObject(opts)) {
    return fallback;
  }
  if (opts.string && opts.colors) {
    return randomColorFromList(opts.string, opts.colors);
  }
  if (opts.string && !opts.colors) {
    return randomColorFromString(opts.string);
  }
  if (opts.colors && !opts.string) {
    return randomFromList(opts.colors);
  }
  return fallback;
}
function randomColorFromString(str) {
  var hash3 = 0;
  if (str.length === 0)
    return hash3.toString();
  for (var i = 0; i < str.length; i += 1) {
    hash3 = str.charCodeAt(i) + ((hash3 << 5) - hash3);
    hash3 = hash3 & hash3;
  }
  var color3 = "#";
  for (var j = 0; j < 3; j += 1) {
    var value = hash3 >> j * 8 & 255;
    color3 += ("00" + value.toString(16)).substr(-2);
  }
  return color3;
}
function randomColorFromList(str, list2) {
  var index2 = 0;
  if (str.length === 0)
    return list2[0];
  for (var i = 0; i < str.length; i += 1) {
    index2 = str.charCodeAt(i) + ((index2 << 5) - index2);
    index2 = index2 & index2;
  }
  index2 = (index2 % list2.length + list2.length) % list2.length;
  return list2[index2];
}
function randomFromList(list2) {
  return list2[Math.floor(Math.random() * list2.length)];
}

// node_modules/@chakra-ui/theme-tools/dist/esm/component.js
function mode(light, dark) {
  return (props) => props.colorMode === "dark" ? dark : light;
}
function orient(options) {
  var {
    orientation,
    vertical,
    horizontal
  } = options;
  if (!orientation)
    return {};
  return orientation === "vertical" ? vertical : horizontal;
}

// node_modules/@chakra-ui/theme-tools/dist/esm/create-breakpoints.js
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
var createBreakpoints = (config2) => {
  warn({
    condition: true,
    message: ["[chakra-ui]: createBreakpoints(...) will be deprecated pretty soon", "simply pass the breakpoints as an object. Remove the createBreakpoint(..) call"].join("")
  });
  return _extends5({
    base: "0em"
  }, config2);
};

// node_modules/@chakra-ui/theme/dist/esm/components/alert.js
var parts2 = ["container", "title", "description", "icon"];
var baseStyle2 = {
  container: {
    px: 4,
    py: 3
  },
  title: {
    fontWeight: "bold",
    lineHeight: 6,
    marginEnd: 2
  },
  description: {
    lineHeight: 6
  },
  icon: {
    flexShrink: 0,
    marginEnd: 3,
    w: 5,
    h: 6
  }
};
function getBg(props) {
  var {
    theme: theme2,
    colorScheme: c2
  } = props;
  var lightBg = getColor(theme2, c2 + ".100", c2);
  var darkBg = transparentize(c2 + ".200", 0.16)(theme2);
  return mode(lightBg, darkBg)(props);
}
function variantSubtle(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    container: {
      bg: getBg(props)
    },
    icon: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    }
  };
}
function variantLeftAccent(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    container: {
      paddingStart: 3,
      borderStartWidth: "4px",
      borderStartColor: mode(c2 + ".500", c2 + ".200")(props),
      bg: getBg(props)
    },
    icon: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    }
  };
}
function variantTopAccent(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    container: {
      pt: 2,
      borderTopWidth: "4px",
      borderTopColor: mode(c2 + ".500", c2 + ".200")(props),
      bg: getBg(props)
    },
    icon: {
      color: mode(c2 + ".500", c2 + ".200")(props)
    }
  };
}
function variantSolid(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    container: {
      bg: mode(c2 + ".500", c2 + ".200")(props),
      color: mode("white", "gray.900")(props)
    }
  };
}
var variants = {
  subtle: variantSubtle,
  "left-accent": variantLeftAccent,
  "top-accent": variantTopAccent,
  solid: variantSolid
};
var defaultProps = {
  variant: "subtle",
  colorScheme: "blue"
};
var alert_default = {
  parts: parts2,
  baseStyle: baseStyle2,
  variants,
  defaultProps
};

// node_modules/@chakra-ui/theme/dist/esm/foundations/spacing.js
var spacing = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// node_modules/@chakra-ui/theme/dist/esm/foundations/sizes.js
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
var largeSizes = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem"
};
var container = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes = _extends6({}, spacing, largeSizes, {
  container
});
var sizes_default = sizes;

// node_modules/@chakra-ui/theme/dist/esm/components/avatar.js
var parts3 = ["container", "excessLabel", "badge", "label"];
function baseStyleBadge(props) {
  return {
    transform: "translate(25%, 25%)",
    borderRadius: "full",
    border: "0.2em solid",
    borderColor: mode("white", "gray.800")(props)
  };
}
function baseStyleExcessLabel(props) {
  return {
    bg: mode("gray.200", "whiteAlpha.400")(props)
  };
}
function baseStyleContainer2(props) {
  var {
    name,
    theme: theme2
  } = props;
  var bg = name ? randomColor({
    string: name
  }) : "gray.400";
  var isBgDark = isDark(bg)(theme2);
  var color3 = "white";
  if (!isBgDark)
    color3 = "gray.800";
  var borderColor = mode("white", "gray.800")(props);
  return {
    bg,
    color: color3,
    borderColor,
    verticalAlign: "top"
  };
}
var baseStyle3 = (props) => ({
  badge: baseStyleBadge(props),
  excessLabel: baseStyleExcessLabel(props),
  container: baseStyleContainer2(props)
});
function getSize(size2) {
  var themeSize = sizes_default[size2];
  return {
    container: {
      width: size2,
      height: size2,
      fontSize: "calc(" + (themeSize != null ? themeSize : size2) + " / 2.5)"
    },
    excessLabel: {
      width: size2,
      height: size2
    },
    label: {
      fontSize: "calc(" + (themeSize != null ? themeSize : size2) + " / 2.5)",
      lineHeight: size2 !== "100%" ? themeSize != null ? themeSize : size2 : void 0
    }
  };
}
var sizes2 = {
  "2xs": getSize("4"),
  xs: getSize("6"),
  sm: getSize("8"),
  md: getSize("12"),
  lg: getSize("16"),
  xl: getSize("24"),
  "2xl": getSize("32"),
  full: getSize("100%")
};
var defaultProps2 = {
  size: "md"
};
var avatar_default = {
  parts: parts3,
  baseStyle: baseStyle3,
  sizes: sizes2,
  defaultProps: defaultProps2
};

// node_modules/@chakra-ui/theme/dist/esm/components/badge.js
var baseStyle4 = {
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold"
};
function variantSolid2(props) {
  var {
    colorScheme: c2,
    theme: theme2
  } = props;
  var dark = transparentize(c2 + ".500", 0.6)(theme2);
  return {
    bg: mode(c2 + ".500", dark)(props),
    color: mode("white", "whiteAlpha.800")(props)
  };
}
function variantSubtle2(props) {
  var {
    colorScheme: c2,
    theme: theme2
  } = props;
  var darkBg = transparentize(c2 + ".200", 0.16)(theme2);
  return {
    bg: mode(c2 + ".100", darkBg)(props),
    color: mode(c2 + ".800", c2 + ".200")(props)
  };
}
function variantOutline(props) {
  var {
    colorScheme: c2,
    theme: theme2
  } = props;
  var darkColor = transparentize(c2 + ".200", 0.8)(theme2);
  var lightColor = getColor(theme2, c2 + ".500");
  var color3 = mode(lightColor, darkColor)(props);
  return {
    color: color3,
    boxShadow: "inset 0 0 0px 1px " + color3
  };
}
var variants2 = {
  solid: variantSolid2,
  subtle: variantSubtle2,
  outline: variantOutline
};
var defaultProps3 = {
  variant: "subtle",
  colorScheme: "gray"
};
var badge_default = {
  baseStyle: baseStyle4,
  variants: variants2,
  defaultProps: defaultProps3
};

// node_modules/@chakra-ui/theme/dist/esm/components/breadcrumb.js
var parts4 = ["container", "item", "link", "separator"];
var baseStyleLink = {
  transition: "all 0.15s ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focus: {
    boxShadow: "outline"
  }
};
var baseStyle5 = {
  link: baseStyleLink
};
var breadcrumb_default = {
  parts: parts4,
  baseStyle: baseStyle5
};

// node_modules/@chakra-ui/theme/dist/esm/components/button.js
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
var baseStyle6 = {
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  _focus: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
};
function variantGhost(props) {
  var {
    colorScheme: c2,
    theme: theme2
  } = props;
  if (c2 === "gray") {
    return {
      color: mode("inherit", "whiteAlpha.900")(props),
      _hover: {
        bg: mode("gray.100", "whiteAlpha.200")(props)
      },
      _active: {
        bg: mode("gray.200", "whiteAlpha.300")(props)
      }
    };
  }
  var darkHoverBg = transparentize(c2 + ".200", 0.12)(theme2);
  var darkActiveBg = transparentize(c2 + ".200", 0.24)(theme2);
  return {
    color: mode(c2 + ".600", c2 + ".200")(props),
    bg: "transparent",
    _hover: {
      bg: mode(c2 + ".50", darkHoverBg)(props)
    },
    _active: {
      bg: mode(c2 + ".100", darkActiveBg)(props)
    }
  };
}
function variantOutline2(props) {
  var {
    colorScheme: c2
  } = props;
  var borderColor = mode("gray.200", "whiteAlpha.300")(props);
  return _extends7({
    border: "1px solid",
    borderColor: c2 === "gray" ? borderColor : "currentColor"
  }, variantGhost(props));
}
var accessibleColorMap = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
function variantSolid3(props) {
  var {
    colorScheme: c2
  } = props;
  if (c2 === "gray") {
    var _bg = mode("gray.100", "whiteAlpha.200")(props);
    return {
      bg: _bg,
      _hover: {
        bg: mode("gray.200", "whiteAlpha.300")(props),
        _disabled: {
          bg: _bg
        }
      },
      _active: {
        bg: mode("gray.300", "whiteAlpha.400")(props)
      }
    };
  }
  var {
    bg = c2 + ".500",
    color: color3 = "white",
    hoverBg = c2 + ".600",
    activeBg = c2 + ".700"
  } = accessibleColorMap[c2] || {};
  var background2 = mode(bg, c2 + ".200")(props);
  return {
    bg: background2,
    color: mode(color3, "gray.800")(props),
    _hover: {
      bg: mode(hoverBg, c2 + ".300")(props),
      _disabled: {
        bg: background2
      }
    },
    _active: {
      bg: mode(activeBg, c2 + ".400")(props)
    }
  };
}
function variantLink(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode(c2 + ".500", c2 + ".200")(props),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode(c2 + ".700", c2 + ".500")(props)
    }
  };
}
var variantUnstyled = {
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: 0,
  p: 0
};
var variants3 = {
  ghost: variantGhost,
  outline: variantOutline2,
  solid: variantSolid3,
  link: variantLink,
  unstyled: variantUnstyled
};
var sizes3 = {
  lg: {
    h: 12,
    minW: 12,
    fontSize: "lg",
    px: 6
  },
  md: {
    h: 10,
    minW: 10,
    fontSize: "md",
    px: 4
  },
  sm: {
    h: 8,
    minW: 8,
    fontSize: "sm",
    px: 3
  },
  xs: {
    h: 6,
    minW: 6,
    fontSize: "xs",
    px: 2
  }
};
var defaultProps4 = {
  variant: "solid",
  size: "md",
  colorScheme: "gray"
};
var button_default = {
  baseStyle: baseStyle6,
  variants: variants3,
  sizes: sizes3,
  defaultProps: defaultProps4
};

// node_modules/@chakra-ui/theme/dist/esm/components/checkbox.js
var parts5 = ["container", "control", "label", "icon"];
function baseStyleControl(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    w: "100%",
    transition: "box-shadow 250ms",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode(c2 + ".500", c2 + ".200")(props),
      borderColor: mode(c2 + ".500", c2 + ".200")(props),
      color: mode("white", "gray.900")(props),
      _hover: {
        bg: mode(c2 + ".600", c2 + ".300")(props),
        borderColor: mode(c2 + ".600", c2 + ".300")(props)
      },
      _disabled: {
        borderColor: mode("gray.200", "transparent")(props),
        bg: mode("gray.200", "whiteAlpha.300")(props),
        color: mode("gray.500", "whiteAlpha.500")(props)
      }
    },
    _indeterminate: {
      bg: mode(c2 + ".500", c2 + ".200")(props),
      borderColor: mode(c2 + ".500", c2 + ".200")(props),
      color: mode("white", "gray.900")(props)
    },
    _disabled: {
      bg: mode("gray.100", "whiteAlpha.100")(props),
      borderColor: mode("gray.100", "transparent")(props)
    },
    _focus: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode("red.500", "red.300")(props)
    }
  };
}
var baseStyleLabel = {
  userSelect: "none",
  _disabled: {
    opacity: 0.4
  }
};
var baseStyle7 = (props) => ({
  control: baseStyleControl(props),
  label: baseStyleLabel
});
var sizes4 = {
  sm: {
    control: {
      h: 3,
      w: 3
    },
    label: {
      fontSize: "sm"
    },
    icon: {
      fontSize: "0.45rem"
    }
  },
  md: {
    control: {
      w: 4,
      h: 4
    },
    label: {
      fontSize: "md"
    },
    icon: {
      fontSize: "0.625rem"
    }
  },
  lg: {
    control: {
      w: 5,
      h: 5
    },
    label: {
      fontSize: "lg"
    },
    icon: {
      fontSize: "0.625rem"
    }
  }
};
var defaultProps5 = {
  size: "md",
  colorScheme: "blue"
};
var checkbox_default = {
  parts: parts5,
  baseStyle: baseStyle7,
  sizes: sizes4,
  defaultProps: defaultProps5
};

// node_modules/@chakra-ui/theme/dist/esm/components/close-button.js
function baseStyle8(props) {
  var hoverBg = mode("blackAlpha.100", "whiteAlpha.100")(props);
  var activeBg = mode("blackAlpha.200", "whiteAlpha.200")(props);
  return {
    borderRadius: "md",
    transition: "all 0.2s",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _hover: {
      bg: hoverBg
    },
    _active: {
      bg: activeBg
    },
    _focus: {
      boxShadow: "outline"
    }
  };
}
var sizes5 = {
  lg: {
    w: "40px",
    h: "40px",
    fontSize: "16px"
  },
  md: {
    w: "32px",
    h: "32px",
    fontSize: "12px"
  },
  sm: {
    w: "24px",
    h: "24px",
    fontSize: "10px"
  }
};
var defaultProps6 = {
  size: "md"
};
var close_button_default = {
  baseStyle: baseStyle8,
  sizes: sizes5,
  defaultProps: defaultProps6
};

// node_modules/@chakra-ui/theme/dist/esm/components/code.js
var {
  variants: variants4,
  defaultProps: defaultProps7
} = badge_default;
var baseStyle9 = {
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm"
};
var code_default = {
  baseStyle: baseStyle9,
  variants: variants4,
  defaultProps: defaultProps7
};

// node_modules/@chakra-ui/theme/dist/esm/components/container.js
var baseStyle10 = {
  w: "100%",
  mx: "auto",
  maxW: "60ch",
  px: "1rem"
};
var container_default = {
  baseStyle: baseStyle10
};

// node_modules/@chakra-ui/theme/dist/esm/components/divider.js
var baseStyle11 = {
  opacity: 0.6,
  borderColor: "inherit"
};
var variantSolid4 = {
  borderStyle: "solid"
};
var variantDashed = {
  borderStyle: "dashed"
};
var variants5 = {
  solid: variantSolid4,
  dashed: variantDashed
};
var defaultProps8 = {
  variant: "solid"
};
var divider_default = {
  baseStyle: baseStyle11,
  variants: variants5,
  defaultProps: defaultProps8
};

// node_modules/@chakra-ui/theme/dist/esm/components/modal.js
var parts6 = ["overlay", "dialogContainer", "dialog", "header", "closeButton", "body", "footer"];
var baseStyleOverlay = {
  bg: "blackAlpha.600",
  zIndex: "modal"
};
function baseStyleDialogContainer(props) {
  var {
    isCentered,
    scrollBehavior
  } = props;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto"
  };
}
function baseStyleDialog(props) {
  var {
    scrollBehavior
  } = props;
  return {
    borderRadius: "md",
    bg: mode("white", "gray.700")(props),
    color: "inherit",
    my: "3.75rem",
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    boxShadow: mode("lg", "dark-lg")(props)
  };
}
var baseStyleHeader = {
  px: 6,
  py: 4,
  fontSize: "xl",
  fontWeight: "semibold"
};
var baseStyleCloseButton = {
  position: "absolute",
  top: 2,
  insetEnd: 3
};
function baseStyleBody(props) {
  var {
    scrollBehavior
  } = props;
  return {
    px: 6,
    py: 2,
    flex: 1,
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
}
var baseStyleFooter = {
  px: 6,
  py: 4
};
var baseStyle12 = (props) => ({
  overlay: baseStyleOverlay,
  dialogContainer: baseStyleDialogContainer(props),
  dialog: baseStyleDialog(props),
  header: baseStyleHeader,
  closeButton: baseStyleCloseButton,
  body: baseStyleBody(props),
  footer: baseStyleFooter
});
function getSize2(value) {
  if (value === "full") {
    return {
      dialog: {
        maxW: "100vw",
        minH: "100vh"
      }
    };
  }
  return {
    dialog: {
      maxW: value
    }
  };
}
var sizes6 = {
  xs: getSize2("xs"),
  sm: getSize2("sm"),
  md: getSize2("md"),
  lg: getSize2("lg"),
  xl: getSize2("xl"),
  "2xl": getSize2("2xl"),
  "3xl": getSize2("3xl"),
  "4xl": getSize2("4xl"),
  "5xl": getSize2("5xl"),
  "6xl": getSize2("6xl"),
  full: getSize2("full")
};
var defaultProps9 = {
  size: "md"
};
var modal_default = {
  parts: parts6,
  baseStyle: baseStyle12,
  sizes: sizes6,
  defaultProps: defaultProps9
};

// node_modules/@chakra-ui/theme/dist/esm/components/drawer.js
function _extends8() {
  _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
var parts7 = modal_default.parts;
function getSize3(value) {
  if (value === "full") {
    return {
      dialog: {
        maxW: "100vw",
        h: "100vh"
      }
    };
  }
  return {
    dialog: {
      maxW: value
    }
  };
}
var baseStyleOverlay2 = {
  bg: "blackAlpha.600",
  zIndex: "overlay"
};
var baseStyleDialogContainer2 = {
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
};
function baseStyleDialog2(props) {
  var {
    isFullHeight
  } = props;
  return _extends8({}, isFullHeight && {
    height: "100vh"
  }, {
    zIndex: "modal",
    maxH: "100vh",
    bg: mode("white", "gray.700")(props),
    color: "inherit",
    boxShadow: mode("lg", "dark-lg")(props)
  });
}
var baseStyleHeader2 = {
  px: 6,
  py: 4,
  fontSize: "xl",
  fontWeight: "semibold"
};
var baseStyleCloseButton2 = {
  position: "absolute",
  top: 2,
  insetEnd: 3
};
var baseStyleBody2 = {
  px: 6,
  py: 2,
  flex: 1,
  overflow: "auto"
};
var baseStyleFooter2 = {
  px: 6,
  py: 4
};
var baseStyle13 = (props) => ({
  overlay: baseStyleOverlay2,
  dialogContainer: baseStyleDialogContainer2,
  dialog: baseStyleDialog2(props),
  header: baseStyleHeader2,
  closeButton: baseStyleCloseButton2,
  body: baseStyleBody2,
  footer: baseStyleFooter2
});
var sizes7 = {
  xs: getSize3("xs"),
  sm: getSize3("md"),
  md: getSize3("lg"),
  lg: getSize3("2xl"),
  xl: getSize3("4xl"),
  full: getSize3("full")
};
var defaultProps10 = {
  size: "xs"
};
var drawer_default = {
  parts: parts7,
  baseStyle: baseStyle13,
  sizes: sizes7,
  defaultProps: defaultProps10
};

// node_modules/@chakra-ui/theme/dist/esm/components/editable.js
var parts8 = ["preview", "input"];
var baseStylePreview = {
  borderRadius: "md",
  py: "3px",
  transition: "all 0.2s"
};
var baseStyleInput = {
  borderRadius: "md",
  py: "3px",
  transition: "all 0.2s",
  width: "full",
  _focus: {
    boxShadow: "outline"
  },
  _placeholder: {
    opacity: 0.6
  }
};
var baseStyle14 = {
  preview: baseStylePreview,
  input: baseStyleInput
};
var editable_default = {
  parts: parts8,
  baseStyle: baseStyle14
};

// node_modules/@chakra-ui/theme/dist/esm/components/form.js
var parts9 = ["requiredIndicator", "helperText"];
function baseStyleRequiredIndicator(props) {
  return {
    marginStart: 1,
    color: mode("red.500", "red.300")(props)
  };
}
function baseStyleHelperText(props) {
  return {
    mt: 2,
    color: mode("gray.500", "whiteAlpha.600")(props),
    lineHeight: "normal",
    fontSize: "sm"
  };
}
var baseStyle15 = (props) => ({
  requiredIndicator: baseStyleRequiredIndicator(props),
  helperText: baseStyleHelperText(props)
});
var form_default = {
  parts: parts9,
  baseStyle: baseStyle15
};

// node_modules/@chakra-ui/theme/dist/esm/components/form-label.js
var baseStyle16 = {
  fontSize: "md",
  marginEnd: 3,
  mb: 2,
  fontWeight: "medium",
  transition: "all 0.2s",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
};
var form_label_default = {
  baseStyle: baseStyle16
};

// node_modules/@chakra-ui/theme/dist/esm/components/heading.js
var baseStyle17 = {
  fontFamily: "heading",
  fontWeight: "bold"
};
var sizes8 = {
  "4xl": {
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  },
  "3xl": {
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  },
  "2xl": {
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  },
  xl: {
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  },
  lg: {
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  },
  md: {
    fontSize: "xl",
    lineHeight: 1.2
  },
  sm: {
    fontSize: "md",
    lineHeight: 1.2
  },
  xs: {
    fontSize: "sm",
    lineHeight: 1.2
  }
};
var defaultProps11 = {
  size: "xl"
};
var heading_default = {
  baseStyle: baseStyle17,
  sizes: sizes8,
  defaultProps: defaultProps11
};

// node_modules/@chakra-ui/theme/dist/esm/components/input.js
var parts10 = ["field", "addon"];
var baseStyle18 = {
  field: {
    width: "100%",
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transition: "all 0.2s"
  }
};
var size = {
  lg: {
    fontSize: "lg",
    px: 4,
    h: 12,
    borderRadius: "md"
  },
  md: {
    fontSize: "md",
    px: 4,
    h: 10,
    borderRadius: "md"
  },
  sm: {
    fontSize: "sm",
    px: 3,
    h: 8,
    borderRadius: "sm"
  },
  xs: {
    fontSize: "xs",
    px: 2,
    h: 6,
    borderRadius: "sm"
  }
};
var sizes9 = {
  lg: {
    field: size.lg,
    addon: size.lg
  },
  md: {
    field: size.md,
    addon: size.md
  },
  sm: {
    field: size.sm,
    addon: size.sm
  },
  xs: {
    field: size.xs,
    addon: size.xs
  }
};
function getDefaults(props) {
  var {
    focusBorderColor: fc,
    errorBorderColor: ec
  } = props;
  return {
    focusBorderColor: fc || mode("blue.500", "blue.300")(props),
    errorBorderColor: ec || mode("red.500", "red.300")(props)
  };
}
function variantOutline3(props) {
  var {
    theme: theme2
  } = props;
  var {
    focusBorderColor: fc,
    errorBorderColor: ec
  } = getDefaults(props);
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode("gray.300", "whiteAlpha.400")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _invalid: {
        borderColor: getColor(theme2, ec),
        boxShadow: "0 0 0 1px " + getColor(theme2, ec)
      },
      _focus: {
        zIndex: 1,
        borderColor: getColor(theme2, fc),
        boxShadow: "0 0 0 1px " + getColor(theme2, fc)
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode("inherit", "whiteAlpha.50")(props),
      bg: mode("gray.100", "whiteAlpha.300")(props)
    }
  };
}
function variantFilled(props) {
  var {
    theme: theme2
  } = props;
  var {
    focusBorderColor: fc,
    errorBorderColor: ec
  } = getDefaults(props);
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props),
      _hover: {
        bg: mode("gray.200", "whiteAlpha.100")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _invalid: {
        borderColor: getColor(theme2, ec)
      },
      _focus: {
        bg: "transparent",
        borderColor: getColor(theme2, fc)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props)
    }
  };
}
function variantFlushed(props) {
  var {
    theme: theme2
  } = props;
  var {
    focusBorderColor: fc,
    errorBorderColor: ec
  } = getDefaults(props);
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: 0,
      px: 0,
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme2, ec),
        boxShadow: "0px 1px 0px 0px " + getColor(theme2, ec)
      },
      _focus: {
        borderColor: getColor(theme2, fc),
        boxShadow: "0px 1px 0px 0px " + getColor(theme2, fc)
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: 0,
      px: 0,
      bg: "transparent"
    }
  };
}
var variantUnstyled2 = {
  field: {
    bg: "transparent",
    px: 0,
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: 0,
    height: "auto"
  }
};
var variants6 = {
  outline: variantOutline3,
  filled: variantFilled,
  flushed: variantFlushed,
  unstyled: variantUnstyled2
};
var defaultProps12 = {
  size: "md",
  variant: "outline"
};
var input_default = {
  parts: parts10,
  baseStyle: baseStyle18,
  sizes: sizes9,
  variants: variants6,
  defaultProps: defaultProps12
};

// node_modules/@chakra-ui/theme/dist/esm/components/kbd.js
function baseStyle19(props) {
  return {
    bg: mode("gray.100", "whiteAlpha")(props),
    borderRadius: "md",
    borderWidth: "1px",
    borderBottomWidth: "3px",
    fontSize: "0.8em",
    fontWeight: "bold",
    lineHeight: "normal",
    px: "0.4em",
    whiteSpace: "nowrap"
  };
}
var kbd_default = {
  baseStyle: baseStyle19
};

// node_modules/@chakra-ui/theme/dist/esm/components/link.js
var baseStyle20 = {
  transition: "all 0.15s ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focus: {
    boxShadow: "outline"
  }
};
var link_default = {
  baseStyle: baseStyle20
};

// node_modules/@chakra-ui/theme/dist/esm/components/list.js
var parts11 = ["container", "item", "icon"];
var baseStyleContainer3 = {};
var baseStyleItem = {};
var baseStyleIcon2 = {
  marginEnd: "0.5rem",
  display: "inline",
  verticalAlign: "text-bottom"
};
var baseStyle21 = {
  container: baseStyleContainer3,
  item: baseStyleItem,
  icon: baseStyleIcon2
};
var list_default = {
  parts: parts11,
  baseStyle: baseStyle21
};

// node_modules/@chakra-ui/theme/dist/esm/components/menu.js
var parts12 = ["item", "command", "list", "button", "groupTitle", "divider"];
function baseStyleList(props) {
  return {
    bg: mode("#fff", "gray.700")(props),
    boxShadow: mode("sm", "dark-lg")(props),
    color: "inherit",
    minW: "3xs",
    py: "2",
    zIndex: 1,
    borderRadius: "md",
    borderWidth: "1px"
  };
}
function baseStyleItem2(props) {
  return {
    py: "0.4rem",
    px: "0.8rem",
    transition: "background 50ms ease-in 0s",
    _focus: {
      bg: mode("gray.100", "whiteAlpha.100")(props)
    },
    _active: {
      bg: mode("gray.200", "whiteAlpha.200")(props)
    },
    _expanded: {
      bg: mode("gray.100", "whiteAlpha.100")(props)
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  };
}
var baseStyleGroupTitle = {
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
};
var baseStyleCommand = {
  opacity: 0.6
};
var baseStyleDivider = {
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "0.5rem",
  opacity: 0.6
};
var baseStyle22 = (props) => ({
  list: baseStyleList(props),
  item: baseStyleItem2(props),
  groupTitle: baseStyleGroupTitle,
  command: baseStyleCommand,
  divider: baseStyleDivider
});
var menu_default = {
  parts: parts12,
  baseStyle: baseStyle22
};

// node_modules/@chakra-ui/theme/dist/esm/foundations/typography.js
var typography2 = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    mono: 'SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'
  },
  fontSizes: {
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var typography_default = typography2;

// node_modules/@chakra-ui/theme/dist/esm/components/number-input.js
var _Input$baseStyle;
function _extends9() {
  _extends9 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
var parts13 = ["root", "field", "stepper", "stepperGroup"];
var {
  variants: variants7,
  defaultProps: defaultProps13
} = input_default;
var baseStyleRoot = {
  "--number-input-stepper-width": "24px",
  "--number-input-field-padding": "calc(var(--number-input-stepper-width) + 0.5rem)"
};
var baseStyleField = (_Input$baseStyle = input_default.baseStyle) == null ? void 0 : _Input$baseStyle.field;
var baseStyleStepperGroup = {
  width: "var(--number-input-stepper-width)"
};
function baseStyleStepper(props) {
  return {
    borderStart: "1px solid",
    borderStartColor: mode("inherit", "whiteAlpha.300")(props),
    color: mode("inherit", "whiteAlpha.800")(props),
    _active: {
      bg: mode("gray.200", "whiteAlpha.300")(props)
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  };
}
var baseStyle23 = (props) => ({
  root: baseStyleRoot,
  field: baseStyleField,
  stepperGroup: baseStyleStepperGroup,
  stepper: baseStyleStepper(props)
});
function getSize4(size2) {
  var sizeStyle = input_default.sizes[size2];
  var radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  var resolvedFontSize = typography_default.fontSizes[sizeStyle.field.fontSize];
  return {
    field: _extends9({}, sizeStyle.field, {
      paddingInlineEnd: "var(--number-input-field-padding)",
      verticalAlign: "top"
    }),
    stepper: {
      fontSize: "calc(" + resolvedFontSize + " * 0.75)",
      _first: {
        borderTopEndRadius: radius[size2]
      },
      _last: {
        borderBottomEndRadius: radius[size2],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  };
}
var sizes10 = {
  xs: getSize4("xs"),
  sm: getSize4("sm"),
  md: getSize4("md"),
  lg: getSize4("lg")
};
var number_input_default = {
  parts: parts13,
  baseStyle: baseStyle23,
  sizes: sizes10,
  variants: variants7,
  defaultProps: defaultProps13
};

// node_modules/@chakra-ui/theme/dist/esm/components/pin-input.js
function _extends10() {
  _extends10 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
var baseStyle24 = _extends10({}, input_default.baseStyle.field, {
  textAlign: "center"
});
var sizes11 = {
  lg: {
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  },
  md: {
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  },
  sm: {
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  },
  xs: {
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  }
};
var variants8 = {
  outline: (props) => input_default.variants.outline(props).field,
  flushed: (props) => input_default.variants.flushed(props).field,
  filled: (props) => input_default.variants.filled(props).field,
  unstyled: input_default.variants.unstyled.field
};
var defaultProps14 = input_default.defaultProps;
var pin_input_default = {
  baseStyle: baseStyle24,
  sizes: sizes11,
  variants: variants8,
  defaultProps: defaultProps14
};

// node_modules/@chakra-ui/theme/dist/esm/components/popover.js
var parts14 = ["popper", "content", "header", "body", "footer", "arrow"];
var baseStylePopper = {
  zIndex: 10
};
function baseStyleContent(props) {
  var bg = mode("white", "gray.700")(props);
  var shadowColor = mode("gray.200", "whiteAlpha.300")(props);
  return {
    "--popover-bg": "colors." + bg,
    bg: "var(--popover-bg)",
    "--popper-arrow-bg": "var(--popover-bg)",
    "--popper-arrow-shadow-color": "colors." + shadowColor,
    width: "xs",
    border: "1px solid",
    borderColor: "inherit",
    borderRadius: "md",
    boxShadow: "sm",
    zIndex: "inherit",
    _focus: {
      outline: 0,
      boxShadow: "outline"
    }
  };
}
var baseStyleHeader3 = {
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
};
var baseStyleBody3 = {
  px: 3,
  py: 2
};
var baseStyleFooter3 = {
  px: 3,
  py: 2,
  borderTopWidth: "1px"
};
var baseStyle25 = (props) => ({
  popper: baseStylePopper,
  content: baseStyleContent(props),
  header: baseStyleHeader3,
  body: baseStyleBody3,
  footer: baseStyleFooter3,
  arrow: {}
});
var popover_default = {
  parts: parts14,
  baseStyle: baseStyle25
};

// node_modules/@chakra-ui/theme/dist/esm/components/progress.js
function _extends11() {
  _extends11 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
var parts15 = ["track", "filledTrack", "label"];
function filledStyle(props) {
  var {
    colorScheme: c2,
    theme: t,
    isIndeterminate,
    hasStripe
  } = props;
  var stripeStyle = mode(generateStripe(), generateStripe("1rem", "rgba(0,0,0,0.1)"))(props);
  var bgColor = mode(c2 + ".500", c2 + ".200")(props);
  var gradient = "linear-gradient(\n    to right,\n    transparent 0%,\n    " + getColor(t, bgColor) + " 50%,\n    transparent 100%\n  )";
  var addStripe = !isIndeterminate && hasStripe;
  return _extends11({}, addStripe && stripeStyle, isIndeterminate ? {
    bgImage: gradient
  } : {
    bgColor
  });
}
var baseStyleLabel2 = {
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
};
function baseStyleTrack(props) {
  return {
    bg: mode("gray.100", "whiteAlpha.300")(props)
  };
}
function baseStyleFilledTrack(props) {
  return _extends11({
    transition: "all 0.3s"
  }, filledStyle(props));
}
var baseStyle26 = (props) => ({
  label: baseStyleLabel2,
  filledTrack: baseStyleFilledTrack(props),
  track: baseStyleTrack(props)
});
var sizes12 = {
  xs: {
    track: {
      h: "0.25rem"
    }
  },
  sm: {
    track: {
      h: "0.5rem"
    }
  },
  md: {
    track: {
      h: "0.75rem"
    }
  },
  lg: {
    track: {
      h: "1rem"
    }
  }
};
var defaultProps15 = {
  size: "md",
  colorScheme: "blue"
};
var progress_default = {
  parts: parts15,
  sizes: sizes12,
  baseStyle: baseStyle26,
  defaultProps: defaultProps15
};

// node_modules/@chakra-ui/theme/dist/esm/components/radio.js
function _extends12() {
  _extends12 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
var parts16 = ["container", "control", "label"];
function baseStyleControl2(props) {
  var {
    control
  } = checkbox_default.baseStyle(props);
  return _extends12({}, control, {
    borderRadius: "full",
    _checked: _extends12({}, control["_checked"], {
      _before: {
        content: '""',
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    })
  });
}
var baseStyle27 = (props) => ({
  label: checkbox_default.baseStyle(props).label,
  control: baseStyleControl2(props)
});
var sizes13 = {
  md: {
    control: {
      w: 4,
      h: 4
    },
    label: {
      fontSize: "md"
    }
  },
  lg: {
    control: {
      w: 5,
      h: 5
    },
    label: {
      fontSize: "lg"
    }
  },
  sm: {
    control: {
      width: 3,
      height: 3
    },
    label: {
      fontSize: "sm"
    }
  }
};
var defaultProps16 = {
  size: "md",
  colorScheme: "blue"
};
var radio_default = {
  parts: parts16,
  baseStyle: baseStyle27,
  sizes: sizes13,
  defaultProps: defaultProps16
};

// node_modules/@chakra-ui/theme/dist/esm/components/select.js
function _extends13() {
  _extends13 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
var parts17 = ["field", "icon"];
function baseStyleField2(props) {
  return _extends13({}, input_default.baseStyle.field, {
    appearance: "none",
    paddingBottom: "1px",
    lineHeight: "normal",
    "> option, > optgroup": {
      bg: mode("white", "gray.700")(props)
    }
  });
}
var baseStyleIcon3 = {
  width: "1.5rem",
  height: "100%",
  insetEnd: "0.5rem",
  position: "relative",
  color: "currentColor",
  fontSize: "1.25rem",
  _disabled: {
    opacity: 0.5
  }
};
var baseStyle28 = (props) => ({
  field: baseStyleField2(props),
  icon: baseStyleIcon3
});
var sizes14 = (0, import_lodash.default)({}, input_default.sizes, {
  xs: {
    icon: {
      insetEnd: "0.25rem"
    }
  }
});
var select_default = {
  parts: parts17,
  baseStyle: baseStyle28,
  sizes: sizes14,
  variants: input_default.variants,
  defaultProps: input_default.defaultProps
};

// node_modules/@chakra-ui/theme/dist/esm/components/skeleton.js
var fade = (startColor, endColor) => keyframes({
  from: {
    borderColor: startColor,
    background: startColor
  },
  to: {
    borderColor: endColor,
    background: endColor
  }
});
var baseStyle29 = (props) => {
  var defaultStartColor = mode("gray.100", "gray.800")(props);
  var defaultEndColor = mode("gray.400", "gray.600")(props);
  var {
    startColor = defaultStartColor,
    endColor = defaultEndColor,
    speed,
    theme: theme2
  } = props;
  var start2 = getColor(theme2, startColor);
  var end2 = getColor(theme2, endColor);
  return {
    opacity: 0.7,
    borderRadius: "2px",
    borderColor: start2,
    background: end2,
    animation: speed + "s linear infinite alternate " + fade(start2, end2)
  };
};
var skeleton_default = {
  baseStyle: baseStyle29
};

// node_modules/@chakra-ui/theme/dist/esm/components/skip-link.js
var baseStyle30 = (props) => ({
  borderRadius: "md",
  fontWeight: "semibold",
  _focus: {
    boxShadow: "outline",
    padding: "1rem",
    position: "fixed",
    top: "1.5rem",
    insetStart: "1.5rem",
    bg: mode("white", "gray.700")(props)
  }
});
var skip_link_default = {
  baseStyle: baseStyle30
};

// node_modules/@chakra-ui/theme/dist/esm/components/slider.js
function _extends14() {
  _extends14 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
var parts18 = ["container", "thumb", "track", "filledTrack"];
function thumbOrientation(props) {
  return orient({
    orientation: props.orientation,
    vertical: {
      left: "50%",
      transform: "translateX(-50%)",
      _active: {
        transform: "translateX(-50%) scale(1.15)"
      }
    },
    horizontal: {
      top: "50%",
      transform: "translateY(-50%)",
      _active: {
        transform: "translateY(-50%) scale(1.15)"
      }
    }
  });
}
var baseStyleContainer4 = (props) => {
  var {
    orientation
  } = props;
  return _extends14({
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    }
  }, orient({
    orientation,
    vertical: {
      h: "100%"
    },
    horizontal: {
      w: "100%"
    }
  }));
};
function baseStyleTrack2(props) {
  return {
    borderRadius: "sm",
    bg: mode("gray.200", "whiteAlpha.200")(props),
    _disabled: {
      bg: mode("gray.300", "whiteAlpha.300")(props)
    }
  };
}
function baseStyleThumb(props) {
  return _extends14({
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transition: "transform 0.2s",
    _focus: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  }, thumbOrientation(props));
}
function baseStyleFilledTrack2(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    bg: mode(c2 + ".500", c2 + ".200")(props)
  };
}
var baseStyle31 = (props) => ({
  container: baseStyleContainer4(props),
  track: baseStyleTrack2(props),
  thumb: baseStyleThumb(props),
  filledTrack: baseStyleFilledTrack2(props)
});
function sizeLg(props) {
  return {
    thumb: {
      w: "16px",
      h: "16px"
    },
    track: orient({
      orientation: props.orientation,
      horizontal: {
        h: "4px"
      },
      vertical: {
        w: "4px"
      }
    })
  };
}
function sizeMd(props) {
  return {
    thumb: {
      w: "14px",
      h: "14px"
    },
    track: orient({
      orientation: props.orientation,
      horizontal: {
        h: "4px"
      },
      vertical: {
        w: "4px"
      }
    })
  };
}
function sizeSm(props) {
  return {
    thumb: {
      w: "10px",
      h: "10px"
    },
    track: orient({
      orientation: props.orientation,
      horizontal: {
        h: "2px"
      },
      vertical: {
        w: "2px"
      }
    })
  };
}
var sizes15 = {
  lg: sizeLg,
  md: sizeMd,
  sm: sizeSm
};
var defaultProps17 = {
  size: "md",
  colorScheme: "blue"
};
var slider_default = {
  parts: parts18,
  sizes: sizes15,
  baseStyle: baseStyle31,
  defaultProps: defaultProps17
};

// node_modules/@chakra-ui/theme/dist/esm/components/spinner.js
var baseStyle32 = {
  width: "var(--spinner-size)",
  height: "var(--spinner-size)"
};
var sizes16 = {
  xs: {
    "--spinner-size": "0.75rem"
  },
  sm: {
    "--spinner-size": "1rem"
  },
  md: {
    "--spinner-size": "1.5rem"
  },
  lg: {
    "--spinner-size": "2rem"
  },
  xl: {
    "--spinner-size": "3rem"
  }
};
var defaultProps18 = {
  size: "md"
};
var spinner_default = {
  baseStyle: baseStyle32,
  sizes: sizes16,
  defaultProps: defaultProps18
};

// node_modules/@chakra-ui/theme/dist/esm/components/stat.js
var parts19 = ["label", "number", "icon", "helpText"];
var baseStyleLabel3 = {
  fontWeight: "medium"
};
var baseStyleHelpText = {
  opacity: 0.8,
  marginBottom: 2
};
var baseStyleNumber = {
  verticalAlign: "baseline",
  fontWeight: "semibold"
};
var baseStyleIcon4 = {
  marginEnd: 1,
  w: "14px",
  h: "14px",
  verticalAlign: "middle"
};
var baseStyle33 = {
  label: baseStyleLabel3,
  helpText: baseStyleHelpText,
  number: baseStyleNumber,
  icon: baseStyleIcon4
};
var sizes17 = {
  md: {
    label: {
      fontSize: "sm"
    },
    helpText: {
      fontSize: "sm"
    },
    number: {
      fontSize: "2xl"
    }
  }
};
var defaultProps19 = {
  size: "md"
};
var stat_default = {
  parts: parts19,
  baseStyle: baseStyle33,
  sizes: sizes17,
  defaultProps: defaultProps19
};

// node_modules/@chakra-ui/theme/dist/esm/components/switch.js
var parts20 = ["container", "track", "thumb"];
function baseStyleTrack3(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    borderRadius: "full",
    p: "2px",
    width: "var(--slider-track-width)",
    height: "var(--slider-track-height)",
    transition: "all 120ms",
    bg: mode("gray.300", "whiteAlpha.400")(props),
    _focus: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      bg: mode(c2 + ".500", c2 + ".200")(props)
    }
  };
}
var baseStyleThumb2 = {
  bg: "white",
  transition: "transform 250ms",
  borderRadius: "inherit",
  width: "var(--slider-track-height)",
  height: "var(--slider-track-height)",
  _checked: {
    transform: "translateX(var(--slider-thumb-x))"
  }
};
var baseStyle34 = (props) => ({
  container: {
    "--slider-track-diff": "calc(var(--slider-track-width) - var(--slider-track-height))",
    "--slider-thumb-x": "var(--slider-track-diff)",
    _rtl: {
      "--slider-thumb-x": "calc(-1 * var(--slider-track-diff))"
    }
  },
  track: baseStyleTrack3(props),
  thumb: baseStyleThumb2
});
var sizes18 = {
  sm: {
    container: {
      "--slider-track-width": "1.375rem",
      "--slider-track-height": "0.75rem"
    }
  },
  md: {
    container: {
      "--slider-track-width": "1.875rem",
      "--slider-track-height": "1rem"
    }
  },
  lg: {
    container: {
      "--slider-track-width": "2.875rem",
      "--slider-track-height": "1.5rem"
    }
  }
};
var defaultProps20 = {
  size: "md",
  colorScheme: "blue"
};
var switch_default = {
  parts: parts20,
  baseStyle: baseStyle34,
  sizes: sizes18,
  defaultProps: defaultProps20
};

// node_modules/@chakra-ui/theme/dist/esm/components/table.js
function _extends15() {
  _extends15 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends15.apply(this, arguments);
}
var parts21 = ["table", "thead", "tbody", "tr", "th", "td", "caption"];
var baseStyle35 = {
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
};
var numericStyles = {
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
};
var simpleVariant = (props) => {
  var {
    colorScheme: c2
  } = props;
  return {
    th: _extends15({
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(c2 + ".100", c2 + ".700")(props)
    }, numericStyles),
    td: _extends15({
      borderBottom: "1px",
      borderColor: mode(c2 + ".100", c2 + ".700")(props)
    }, numericStyles),
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: {
            borderBottomWidth: 0
          }
        }
      }
    }
  };
};
var stripedVariant = (props) => {
  var {
    colorScheme: c2
  } = props;
  return {
    th: _extends15({
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(c2 + ".100", c2 + ".700")(props)
    }, numericStyles),
    td: _extends15({
      borderBottom: "1px",
      borderColor: mode(c2 + ".100", c2 + ".700")(props)
    }, numericStyles),
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode(c2 + ".100", c2 + ".700")(props)
          },
          td: {
            background: mode(c2 + ".100", c2 + ".700")(props)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: {
            borderBottomWidth: 0
          }
        }
      }
    }
  };
};
var variants9 = {
  simple: simpleVariant,
  striped: stripedVariant,
  unstyled: {}
};
var sizes19 = {
  sm: {
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  },
  md: {
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  },
  lg: {
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  }
};
var defaultProps21 = {
  variant: "simple",
  size: "md",
  colorScheme: "gray"
};
var table_default = {
  parts: parts21,
  baseStyle: baseStyle35,
  variants: variants9,
  sizes: sizes19,
  defaultProps: defaultProps21
};

// node_modules/@chakra-ui/theme/dist/esm/components/tabs.js
var parts22 = ["root", "tablist", "tab", "tabpanels", "tabpanel", "indicator"];
function baseStyleRoot2(props) {
  var {
    orientation
  } = props;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
}
function baseStyleTab(props) {
  var {
    isFitted
  } = props;
  return {
    flex: isFitted ? 1 : void 0,
    transition: "all 0.2s",
    _focus: {
      zIndex: 1,
      boxShadow: "outline"
    }
  };
}
function baseStyleTablist(props) {
  var {
    align = "start",
    orientation
  } = props;
  var alignments = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments[align],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
}
var baseStyleTabpanel = {
  p: 4
};
var baseStyle36 = (props) => ({
  root: baseStyleRoot2(props),
  tab: baseStyleTab(props),
  tablist: baseStyleTablist(props),
  tabpanel: baseStyleTabpanel
});
var sizes20 = {
  sm: {
    tab: {
      py: "0.25rem",
      px: "1rem",
      fontSize: "0.85rem"
    }
  },
  md: {
    tab: {
      fontSize: "1rem",
      py: "0.5rem",
      px: "1rem"
    }
  },
  lg: {
    tab: {
      fontSize: "1.15rem",
      py: "0.75rem",
      px: "1rem"
    }
  }
};
function variantLine(props) {
  var {
    colorScheme: c2,
    orientation
  } = props;
  var isVertical = orientation === "vertical";
  var borderProp = orientation === "vertical" ? "borderStart" : "borderBottom";
  var marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: {
      [borderProp]: "2px solid",
      borderColor: "inherit"
    },
    tab: {
      [borderProp]: "2px solid",
      borderColor: "transparent",
      [marginProp]: "-2px",
      _selected: {
        color: mode(c2 + ".600", c2 + ".300")(props),
        borderColor: "currentColor"
      },
      _active: {
        bg: mode("gray.200", "whiteAlpha.300")(props)
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    }
  };
}
function variantEnclosed(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      _selected: {
        color: mode(c2 + ".600", c2 + ".300")(props),
        borderColor: "inherit",
        borderBottomColor: mode("white", "gray.800")(props)
      }
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
}
function variantEnclosedColored(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      bg: mode("gray.50", "whiteAlpha.50")(props),
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        bg: mode("#fff", "gray.800")(props),
        color: mode(c2 + ".600", c2 + ".300")(props),
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      }
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
}
function variantSoftRounded(props) {
  var {
    colorScheme: c2,
    theme: theme2
  } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor(theme2, c2 + ".700"),
        bg: getColor(theme2, c2 + ".100")
      }
    }
  };
}
function variantSolidRounded(props) {
  var {
    colorScheme: c2
  } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: mode("gray.600", "inherit")(props),
      _selected: {
        color: mode("#fff", "gray.800")(props),
        bg: mode(c2 + ".600", c2 + ".300")(props)
      }
    }
  };
}
var variantUnstyled3 = {};
var variants10 = {
  line: variantLine,
  enclosed: variantEnclosed,
  "enclosed-colored": variantEnclosedColored,
  "soft-rounded": variantSoftRounded,
  "solid-rounded": variantSolidRounded,
  unstyled: variantUnstyled3
};
var defaultProps22 = {
  size: "md",
  variant: "line",
  colorScheme: "blue"
};
var tabs_default = {
  parts: parts22,
  baseStyle: baseStyle36,
  sizes: sizes20,
  variants: variants10,
  defaultProps: defaultProps22
};

// node_modules/@chakra-ui/theme/dist/esm/components/tag.js
var parts23 = ["container", "label", "closeButton"];
var baseStyleContainer5 = {
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  _focus: {
    boxShadow: "outline"
  }
};
var baseStyleLabel4 = {
  lineHeight: 1.2
};
var baseStyleCloseButton3 = {
  fontSize: "18px",
  w: "1.25rem",
  h: "1.25rem",
  borderRadius: "full",
  marginStart: "0.375rem",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focus: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
};
var baseStyle37 = {
  container: baseStyleContainer5,
  label: baseStyleLabel4,
  closeButton: baseStyleCloseButton3
};
var sizes21 = {
  sm: {
    container: {
      minH: "1.25rem",
      minW: "1.25rem",
      fontSize: "xs",
      px: 2,
      borderRadius: "md"
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  },
  md: {
    container: {
      minH: "1.5rem",
      minW: "1.5rem",
      fontSize: "sm",
      borderRadius: "md",
      px: 2
    }
  },
  lg: {
    container: {
      minH: 8,
      minW: 8,
      fontSize: "md",
      borderRadius: "md",
      px: 3
    }
  }
};
var variants11 = {
  subtle: (props) => ({
    container: badge_default.variants.subtle(props)
  }),
  solid: (props) => ({
    container: badge_default.variants.solid(props)
  }),
  outline: (props) => ({
    container: badge_default.variants.outline(props)
  })
};
var defaultProps23 = {
  size: "md",
  variant: "subtle",
  colorScheme: "gray"
};
var tag_default = {
  parts: parts23,
  variants: variants11,
  baseStyle: baseStyle37,
  sizes: sizes21,
  defaultProps: defaultProps23
};

// node_modules/@chakra-ui/theme/dist/esm/components/textarea.js
function _extends16() {
  _extends16 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends16.apply(this, arguments);
}
var baseStyle38 = _extends16({}, input_default.baseStyle.field, {
  paddingY: "8px",
  minHeight: "80px",
  lineHeight: "short"
});
var variants12 = {
  outline: (props) => input_default.variants.outline(props).field,
  flushed: (props) => input_default.variants.flushed(props).field,
  filled: (props) => input_default.variants.filled(props).field,
  unstyled: input_default.variants.unstyled.field
};
var sizes22 = {
  xs: input_default.sizes.xs.field,
  sm: input_default.sizes.sm.field,
  md: input_default.sizes.md.field,
  lg: input_default.sizes.lg.field
};
var defaultProps24 = {
  size: "md",
  variant: "outline"
};
var textarea_default = {
  baseStyle: baseStyle38,
  sizes: sizes22,
  variants: variants12,
  defaultProps: defaultProps24
};

// node_modules/@chakra-ui/theme/dist/esm/components/tooltip.js
function baseStyle39(props) {
  var bg = mode("gray.700", "gray.300")(props);
  return {
    "--tooltip-bg": "colors." + bg,
    px: "8px",
    py: "2px",
    bg: "var(--tooltip-bg)",
    "--popper-arrow-bg": "var(--tooltip-bg)",
    color: mode("whiteAlpha.900", "gray.900")(props),
    borderRadius: "sm",
    fontWeight: "medium",
    fontSize: "sm",
    boxShadow: "md",
    maxW: "320px",
    zIndex: "tooltip"
  };
}
var tooltip_default = {
  baseStyle: baseStyle39
};

// node_modules/@chakra-ui/theme/dist/esm/components/form-error.js
var parts24 = ["text", "icon"];
function baseStyleText(props) {
  return {
    color: mode("red.500", "red.300")(props),
    mt: 2,
    fontSize: "sm"
  };
}
function baseStyleIcon5(props) {
  return {
    marginEnd: "0.5em",
    color: mode("red.500", "red.300")(props)
  };
}
var baseStyle40 = (props) => ({
  text: baseStyleText(props),
  icon: baseStyleIcon5(props)
});
var form_error_default = {
  parts: parts24,
  baseStyle: baseStyle40
};

// node_modules/@chakra-ui/theme/dist/esm/components/index.js
var components_default = {
  Accordion: accordion_default,
  Alert: alert_default,
  Avatar: avatar_default,
  Badge: badge_default,
  Breadcrumb: breadcrumb_default,
  Button: button_default,
  Checkbox: checkbox_default,
  CloseButton: close_button_default,
  Code: code_default,
  Container: container_default,
  Divider: divider_default,
  Drawer: drawer_default,
  Editable: editable_default,
  Form: form_default,
  FormLabel: form_label_default,
  Heading: heading_default,
  Input: input_default,
  Kbd: kbd_default,
  Link: link_default,
  List: list_default,
  Menu: menu_default,
  Modal: modal_default,
  NumberInput: number_input_default,
  PinInput: pin_input_default,
  Popover: popover_default,
  Progress: progress_default,
  Radio: radio_default,
  Select: select_default,
  Skeleton: skeleton_default,
  SkipLink: skip_link_default,
  Slider: slider_default,
  Spinner: spinner_default,
  Stat: stat_default,
  Switch: switch_default,
  Table: table_default,
  Tabs: tabs_default,
  Tag: tag_default,
  Textarea: textarea_default,
  Tooltip: tooltip_default,
  FormError: form_error_default
};

// node_modules/@chakra-ui/theme/dist/esm/foundations/borders.js
var borders = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var borders_default = borders;

// node_modules/@chakra-ui/theme/dist/esm/foundations/breakpoints.js
var breakpoints2 = createBreakpoints({
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
});
var breakpoints_default = breakpoints2;

// node_modules/@chakra-ui/theme/dist/esm/foundations/colors.js
var colors = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var colors_default = colors;

// node_modules/@chakra-ui/theme/dist/esm/foundations/radius.js
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var radius_default = radii;

// node_modules/@chakra-ui/theme/dist/esm/foundations/shadows.js
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default = shadows;

// node_modules/@chakra-ui/theme/dist/esm/foundations/transition.js
var transitionProperty = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition2 = {
  property: transitionProperty,
  easing: transitionTimingFunction,
  duration: transitionDuration
};
var transition_default = transition2;

// node_modules/@chakra-ui/theme/dist/esm/foundations/z-index.js
var zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var z_index_default = zIndices;

// node_modules/@chakra-ui/theme/dist/esm/foundations/index.js
function _extends17() {
  _extends17 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends17.apply(this, arguments);
}
var foundations = _extends17({
  breakpoints: breakpoints_default,
  zIndices: z_index_default,
  radii: radius_default,
  colors: colors_default
}, typography_default, {
  sizes: sizes_default,
  shadows: shadows_default,
  space: spacing,
  borders: borders_default,
  transition: transition_default
});
var foundations_default = foundations;

// node_modules/@chakra-ui/theme/dist/esm/styles.js
var styles = {
  global: (props) => ({
    body: {
      fontFamily: "body",
      color: mode("gray.800", "whiteAlpha.900")(props),
      bg: mode("white", "gray.800")(props),
      transition: "background-color 0.2s",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: mode("gray.400", "whiteAlpha.400")(props)
    },
    "*, *::before, &::after": {
      borderColor: mode("gray.200", "whiteAlpha.300")(props),
      wordWrap: "break-word"
    }
  })
};
var styles_default = styles;

// node_modules/@chakra-ui/theme/dist/esm/utils.js
var requiredChakraThemeKeys = ["borders", "breakpoints", "colors", "components", "config", "direction", "fonts", "fontSizes", "fontWeights", "letterSpacings", "lineHeights", "radii", "shadows", "sizes", "space", "styles", "transition", "zIndices"];
function isChakraTheme(unit) {
  if (!isObject(unit)) {
    return false;
  }
  return requiredChakraThemeKeys.every((propertyName) => Object.prototype.hasOwnProperty.call(unit, propertyName));
}

// node_modules/@chakra-ui/theme/dist/esm/index.js
function _extends18() {
  _extends18 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends18.apply(this, arguments);
}
var direction = "ltr";
var config = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme = _extends18({
  direction
}, foundations_default, {
  components: components_default,
  styles: styles_default,
  config
});
var esm_default = theme;

// node_modules/@chakra-ui/react-env/dist/esm/env.js
var import_react10 = __toModule(require_react());

// node_modules/@chakra-ui/react-env/dist/esm/mock-document.js
var doc = {
  body: {
    classList: {
      add() {
      },
      remove() {
      }
    }
  },
  addEventListener() {
  },
  removeEventListener() {
  },
  activeElement: {
    blur() {
    },
    nodeName: ""
  },
  querySelector() {
    return null;
  },
  querySelectorAll() {
    return [];
  },
  getElementById() {
    return null;
  },
  createEvent() {
    return {
      initEvent() {
      }
    };
  },
  createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute() {
      },
      getElementsByTagName() {
        return [];
      }
    };
  }
};
var ssrDocument = doc;

// node_modules/@chakra-ui/react-env/dist/esm/mock-window.js
var noop2 = () => {
};
var win = {
  document: ssrDocument,
  navigator: {
    userAgent: ""
  },
  CustomEvent: function CustomEvent() {
    return this;
  },
  addEventListener: noop2,
  removeEventListener: noop2,
  getComputedStyle() {
    return {
      getPropertyValue() {
        return "";
      }
    };
  },
  matchMedia() {
    return {
      matches: false,
      addListener: noop2,
      removeListener: noop2
    };
  },
  requestAnimationFrame(callback) {
    if (typeof setTimeout === "undefined") {
      callback();
      return null;
    }
    return setTimeout(callback, 0);
  },
  cancelAnimationFrame(id2) {
    if (typeof setTimeout === "undefined")
      return;
    clearTimeout(id2);
  },
  setTimeout: () => 0,
  clearTimeout: noop2,
  setInterval: () => 0,
  clearInterval: noop2
};
var ssrWindow = win;

// node_modules/@chakra-ui/react-env/dist/esm/env.js
var mockEnv = {
  window: ssrWindow,
  document: ssrDocument
};
var defaultEnv = isBrowser ? {
  window,
  document
} : mockEnv;
var EnvironmentContext = (0, import_react10.createContext)(defaultEnv);
if (__DEV__) {
  EnvironmentContext.displayName = "EnvironmentContext";
}
function EnvironmentProvider(props) {
  var {
    children,
    environment: environmentProp
  } = props;
  var [node2, setNode] = (0, import_react10.useState)(null);
  var context = (0, import_react10.useMemo)(() => {
    var _ref2;
    var doc2 = node2 == null ? void 0 : node2.ownerDocument;
    var win2 = node2 == null ? void 0 : node2.ownerDocument.defaultView;
    var nodeEnv = doc2 ? {
      document: doc2,
      window: win2
    } : void 0;
    var env2 = (_ref2 = environmentProp != null ? environmentProp : nodeEnv) != null ? _ref2 : defaultEnv;
    return env2;
  }, [node2, environmentProp]);
  var showEnvGetter = !node2 && !environmentProp;
  return import_react10.default.createElement(EnvironmentContext.Provider, {
    value: context
  }, children, showEnvGetter && import_react10.default.createElement("span", {
    ref: (el) => {
      if (el)
        setNode(el);
    }
  }));
}
if (__DEV__) {
  EnvironmentProvider.displayName = "EnvironmentProvider";
}

// node_modules/@chakra-ui/react/dist/esm/chakra-provider.js
var React24 = __toModule(require_react());
var ChakraProvider = (props) => {
  var {
    children,
    colorModeManager,
    portalZIndex,
    resetCSS = true,
    theme: theme2 = esm_default,
    environment
  } = props;
  return React24.createElement(EnvironmentProvider, {
    environment
  }, React24.createElement(ThemeProvider, {
    theme: theme2
  }, React24.createElement(ColorModeProvider, {
    colorModeManager,
    options: theme2.config
  }, resetCSS && React24.createElement(css_reset_default, null), React24.createElement(GlobalStyle, null), portalZIndex ? React24.createElement(PortalManager, {
    zIndex: portalZIndex
  }, children) : children)));
};

// node_modules/@chakra-ui/react/dist/esm/extend-theme.js
function extendTheme() {
  for (var _len = arguments.length, extensions = new Array(_len), _key = 0; _key < _len; _key++) {
    extensions[_key] = arguments[_key];
  }
  var overrides = [...extensions];
  var baseTheme = extensions[extensions.length - 1];
  if (isChakraTheme(baseTheme) && overrides.length > 1) {
    overrides = overrides.slice(0, overrides.length - 1);
  } else {
    baseTheme = esm_default;
  }
  return pipe(...overrides.map((extension) => (prevTheme) => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)))(baseTheme);
}
function mergeThemeOverride() {
  for (var _len2 = arguments.length, overrides = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    overrides[_key2] = arguments[_key2];
  }
  return (0, import_lodash.default)({}, ...overrides, mergeThemeCustomizer);
}
function mergeThemeCustomizer(source, override, key, object2) {
  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object2, key)) {
    return function() {
      var sourceValue = isFunction(source) ? source(...arguments) : source;
      var overrideValue = isFunction(override) ? override(...arguments) : override;
      return (0, import_lodash.default)({}, sourceValue, overrideValue, mergeThemeCustomizer);
    };
  }
  return void 0;
}

// node_modules/@chakra-ui/react/dist/esm/theme-extensions/with-default-color-scheme.js
function withDefaultColorScheme(_ref2) {
  var {
    colorScheme,
    components
  } = _ref2;
  return (theme2) => {
    var names2 = Object.keys(theme2.components || {});
    if (Array.isArray(components)) {
      names2 = components;
    } else if (isObject(components)) {
      names2 = Object.keys(components);
    }
    return mergeThemeOverride(theme2, {
      components: Object.fromEntries(names2.map((componentName) => {
        var withColorScheme = {
          defaultProps: {
            colorScheme
          }
        };
        return [componentName, withColorScheme];
      }))
    });
  };
}

// node_modules/@chakra-ui/react/dist/esm/theme-extensions/with-default-size.js
function withDefaultSize(_ref2) {
  var {
    size: size2,
    components
  } = _ref2;
  return (theme2) => {
    var names2 = Object.keys(theme2.components || {});
    if (Array.isArray(components)) {
      names2 = components;
    } else if (isObject(components)) {
      names2 = Object.keys(components);
    }
    return mergeThemeOverride(theme2, {
      components: Object.fromEntries(names2.map((componentName) => {
        var withSize = {
          defaultProps: {
            size: size2
          }
        };
        return [componentName, withSize];
      }))
    });
  };
}

// node_modules/@chakra-ui/react/dist/esm/theme-extensions/with-default-variant.js
function withDefaultVariant(_ref2) {
  var {
    variant,
    components
  } = _ref2;
  return (theme2) => {
    var names2 = Object.keys(theme2.components || {});
    if (Array.isArray(components)) {
      names2 = components;
    } else if (isObject(components)) {
      names2 = Object.keys(components);
    }
    return mergeThemeOverride(theme2, {
      components: Object.fromEntries(names2.map((componentName) => {
        var withVariant = {
          defaultProps: {
            variant
          }
        };
        return [componentName, withVariant];
      }))
    });
  };
}

// node_modules/@chakra-ui/react/dist/esm/theme-extensions/with-default-props.js
function withDefaultProps(_ref2) {
  var {
    defaultProps: {
      colorScheme,
      variant,
      size: size2
    },
    components
  } = _ref2;
  var identity2 = (t) => t;
  var fns = [colorScheme ? withDefaultColorScheme({
    colorScheme,
    components
  }) : identity2, size2 ? withDefaultSize({
    size: size2,
    components
  }) : identity2, variant ? withDefaultVariant({
    variant,
    components
  }) : identity2];
  return (theme2) => mergeThemeOverride(pipe(...fns)(theme2));
}

// node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b2) {
  extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b3) {
    d2.__proto__ = b3;
  } || function(d2, b3) {
    for (var p in b3)
      if (Object.prototype.hasOwnProperty.call(b3, p))
        d2[p] = b3[p];
  };
  return extendStatics(d, b2);
};
function __extends(d, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d, b2);
  function __() {
    this.constructor = d;
  }
  d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign4(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __read(o, n) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2)
    return o;
  var i = m2.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = {error};
  } finally {
    try {
      if (r && !r.done && (m2 = i["return"]))
        m2.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
    to[j] = from[i];
  return to;
}

// node_modules/framer-motion/dist/es/motion/index.js
var React26 = __toModule(require_react());
var import_react23 = __toModule(require_react());

// node_modules/framer-motion/dist/es/motion/features/use-features.js
var React25 = __toModule(require_react());
var import_react12 = __toModule(require_react());

// node_modules/framer-motion/dist/es/motion/features/definitions.js
var createDefinition = function(propNames2) {
  return {
    isEnabled: function(props) {
      return propNames2.some(function(name) {
        return !!props[name];
      });
    }
  };
};
var featureDefinitions = {
  measureLayout: createDefinition([
    "layout",
    "layoutId",
    "drag",
    "_layoutResetTransform"
  ]),
  animation: createDefinition([
    "animate",
    "exit",
    "variants",
    "whileHover",
    "whileTap",
    "whileFocus",
    "whileDrag"
  ]),
  exit: createDefinition(["exit"]),
  drag: createDefinition(["drag", "dragControls"]),
  focus: createDefinition(["whileFocus"]),
  hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
  tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
  pan: createDefinition([
    "onPan",
    "onPanStart",
    "onPanSessionStart",
    "onPanEnd"
  ]),
  layoutAnimation: createDefinition(["layout", "layoutId"])
};
function loadFeatures(features) {
  for (var key in features) {
    var Component4 = features[key];
    if (Component4 !== null)
      featureDefinitions[key].Component = Component4;
  }
}

// node_modules/hey-listen/dist/hey-listen.es.js
var warning = function() {
};
var invariant = function() {
};
if (true) {
  warning = function(check, message) {
    if (!check && typeof console !== "undefined") {
      console.warn(message);
    }
  };
  invariant = function(check, message) {
    if (!check) {
      throw new Error(message);
    }
  };
}

// node_modules/framer-motion/dist/es/context/LazyContext.js
var import_react11 = __toModule(require_react());
var LazyContext = (0, import_react11.createContext)({strict: false});

// node_modules/framer-motion/dist/es/motion/features/use-features.js
var featureNames = Object.keys(featureDefinitions);
var numFeatures = featureNames.length;
function useFeatures(props, visualElement2, preloadedFeatures) {
  var features = [];
  var lazyContext = (0, import_react12.useContext)(LazyContext);
  if (!visualElement2)
    return null;
  if (preloadedFeatures && lazyContext.strict) {
    invariant(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
  }
  for (var i = 0; i < numFeatures; i++) {
    var name_1 = featureNames[i];
    var _a = featureDefinitions[name_1], isEnabled = _a.isEnabled, Component4 = _a.Component;
    if (isEnabled(props) && Component4) {
      features.push(React25.createElement(Component4, __assign({key: name_1}, props, {visualElement: visualElement2})));
    }
  }
  return features;
}

// node_modules/framer-motion/dist/es/context/MotionConfigContext.js
var import_react13 = __toModule(require_react());
var MotionConfigContext = (0, import_react13.createContext)({
  transformPagePoint: function(p) {
    return p;
  },
  isStatic: false
});

// node_modules/framer-motion/dist/es/context/MotionContext/index.js
var import_react14 = __toModule(require_react());
var MotionContext = (0, import_react14.createContext)({});
function useVisualElementContext() {
  return (0, import_react14.useContext)(MotionContext).visualElement;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
var import_react20 = __toModule(require_react());

// node_modules/framer-motion/dist/es/context/PresenceContext.js
var import_react15 = __toModule(require_react());
var PresenceContext = (0, import_react15.createContext)(null);

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
var import_react17 = __toModule(require_react());

// node_modules/framer-motion/dist/es/utils/use-constant.js
var import_react16 = __toModule(require_react());
function useConstant(init) {
  var ref = (0, import_react16.useRef)(null);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
function usePresence() {
  var context = (0, import_react17.useContext)(PresenceContext);
  if (context === null)
    return [true, null];
  var isPresent2 = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
  var id2 = useUniqueId();
  (0, import_react17.useEffect)(function() {
    return register(id2);
  }, []);
  var safeToRemove = function() {
    return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id2);
  };
  return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
}
function useIsPresent() {
  return isPresent((0, import_react17.useContext)(PresenceContext));
}
function isPresent(context) {
  return context === null ? true : context.isPresent;
}
var counter = 0;
var incrementId = function() {
  return counter++;
};
var useUniqueId = function() {
  return useConstant(incrementId);
};

// node_modules/framer-motion/dist/es/context/LayoutGroupContext.js
var import_react18 = __toModule(require_react());
var LayoutGroupContext = (0, import_react18.createContext)(null);

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var import_react19 = __toModule(require_react());

// node_modules/framer-motion/dist/es/utils/is-browser.js
var isBrowser2 = typeof window !== "undefined";

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var useIsomorphicLayoutEffect = isBrowser2 ? import_react19.useLayoutEffect : import_react19.useEffect;

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
function useLayoutId(_a) {
  var layoutId = _a.layoutId;
  var layoutGroupId = (0, import_react20.useContext)(LayoutGroupContext);
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}
function useVisualElement(Component4, visualState, props, createVisualElement) {
  var config2 = (0, import_react20.useContext)(MotionConfigContext);
  var lazyContext = (0, import_react20.useContext)(LazyContext);
  var parent = useVisualElementContext();
  var presenceContext = (0, import_react20.useContext)(PresenceContext);
  var layoutId = useLayoutId(props);
  var visualElementRef = (0, import_react20.useRef)(void 0);
  if (!createVisualElement)
    createVisualElement = lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement) {
    visualElementRef.current = createVisualElement(Component4, {
      visualState,
      parent,
      props: __assign(__assign({}, props), {layoutId}),
      presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
      blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false
    });
  }
  var visualElement2 = visualElementRef.current;
  useIsomorphicLayoutEffect(function() {
    if (!visualElement2)
      return;
    visualElement2.setProps(__assign(__assign(__assign({}, config2), props), {layoutId}));
    visualElement2.isPresent = isPresent(presenceContext);
    visualElement2.isPresenceRoot = !parent || parent.presenceId !== (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id);
    visualElement2.syncRender();
  });
  (0, import_react20.useEffect)(function() {
    var _a;
    if (!visualElement2)
      return;
    (_a = visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();
  });
  useIsomorphicLayoutEffect(function() {
    return function() {
      return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
    };
  }, []);
  return visualElement2;
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
var import_react21 = __toModule(require_react());

// node_modules/framer-motion/dist/es/utils/is-ref-object.js
function isRefObject2(ref) {
  return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
function useMotionRef(visualState, visualElement2, externalRef) {
  return (0, import_react21.useCallback)(function(instance) {
    var _a;
    instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));
    if (visualElement2) {
      instance ? visualElement2.mount(instance) : visualElement2.unmount();
    }
    if (externalRef) {
      if (typeof externalRef === "function") {
        externalRef(instance);
      } else if (isRefObject2(externalRef)) {
        externalRef.current = instance;
      }
    }
  }, [visualElement2, externalRef]);
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.js
var import_react22 = __toModule(require_react());

// node_modules/framer-motion/dist/es/render/utils/variants.js
function isVariantLabels(v) {
  return Array.isArray(v);
}
function isVariantLabel(v) {
  return typeof v === "string" || isVariantLabels(v);
}
function getCurrent(visualElement2) {
  var current = {};
  visualElement2.forEachValue(function(value, key) {
    return current[key] = value.get();
  });
  return current;
}
function getVelocity(visualElement2) {
  var velocity = {};
  visualElement2.forEachValue(function(value, key) {
    return velocity[key] = value.getVelocity();
  });
  return velocity;
}
function resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {
  var _a;
  if (currentValues === void 0) {
    currentValues = {};
  }
  if (currentVelocity === void 0) {
    currentVelocity = {};
  }
  if (typeof definition === "string") {
    definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];
  }
  return typeof definition === "function" ? definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity) : definition;
}
function resolveVariant(visualElement2, definition, custom) {
  var props = visualElement2.getProps();
  return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement2), getVelocity(visualElement2));
}
function checkIfControllingVariants(props) {
  var _a;
  return typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
}
function checkIfVariantNode(props) {
  return Boolean(checkIfControllingVariants(props) || props.variants);
}

// node_modules/framer-motion/dist/es/context/MotionContext/utils.js
function getCurrentTreeVariants(props, context) {
  if (checkIfControllingVariants(props)) {
    var initial = props.initial, animate3 = props.animate;
    return {
      initial: initial === false || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate3) ? animate3 : void 0
    };
  }
  return props.inherit !== false ? context : {};
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.js
function useCreateMotionContext(props, isStatic) {
  var _a = getCurrentTreeVariants(props, (0, import_react22.useContext)(MotionContext)), initial = _a.initial, animate3 = _a.animate;
  return (0, import_react22.useMemo)(function() {
    return {initial, animate: animate3};
  }, isStatic ? [
    variantLabelsAsDependency(initial),
    variantLabelsAsDependency(animate3)
  ] : []);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}

// node_modules/framer-motion/dist/es/motion/index.js
function createMotionComponent(_a) {
  var preloadedFeatures = _a.preloadedFeatures, createVisualElement = _a.createVisualElement, useRender = _a.useRender, useVisualState2 = _a.useVisualState, Component4 = _a.Component;
  preloadedFeatures && loadFeatures(preloadedFeatures);
  function MotionComponent(props, externalRef) {
    var isStatic = (0, import_react23.useContext)(MotionConfigContext).isStatic;
    var features = null;
    var context = useCreateMotionContext(props, isStatic);
    var visualState = useVisualState2(props, isStatic);
    if (!isStatic && isBrowser2) {
      context.visualElement = useVisualElement(Component4, visualState, props, createVisualElement);
      features = useFeatures(props, context.visualElement, preloadedFeatures);
    }
    return React26.createElement(React26.Fragment, null, React26.createElement(MotionContext.Provider, {value: context}, useRender(Component4, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic)), features);
  }
  return (0, import_react23.forwardRef)(MotionComponent);
}

// node_modules/framer-motion/dist/es/render/dom/motion-proxy.js
function createMotionProxy(createConfig) {
  function custom(Component4, customMotionComponentConfig) {
    if (customMotionComponentConfig === void 0) {
      customMotionComponentConfig = {};
    }
    return createMotionComponent(createConfig(Component4, customMotionComponentConfig));
  }
  var componentCache = new Map();
  return new Proxy(custom, {
    get: function(_target, key) {
      if (!componentCache.has(key)) {
        componentCache.set(key, custom(key));
      }
      return componentCache.get(key);
    }
  });
}

// node_modules/framer-motion/dist/es/render/svg/lowercase-elements.js
var lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "svg",
  "switch",
  "symbol",
  "text",
  "tspan",
  "use",
  "view"
];

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.js
function isSVGComponent(Component4) {
  if (typeof Component4 !== "string" || Component4.includes("-")) {
    return false;
  } else if (lowercaseSVGElements.indexOf(Component4) > -1 || /[A-Z]/.test(Component4)) {
    return true;
  }
  return false;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.js
var import_react26 = __toModule(require_react());

// node_modules/framer-motion/dist/es/render/html/use-props.js
var import_react24 = __toModule(require_react());

// node_modules/framer-motion/dist/es/render/dom/projection/scale-correction.js
var valueScaleCorrection = {};
function addScaleCorrection(correctors) {
  for (var key in correctors) {
    valueScaleCorrection[key] = correctors[key];
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/transform.js
var transformAxes = ["", "X", "Y", "Z"];
var order = ["translate", "scale", "rotate", "skew"];
var transformProps = ["transformPerspective", "x", "y", "z"];
order.forEach(function(operationKey) {
  return transformAxes.forEach(function(axesKey) {
    return transformProps.push(operationKey + axesKey);
  });
});
function sortTransformProps(a2, b2) {
  return transformProps.indexOf(a2) - transformProps.indexOf(b2);
}
var transformPropSet = new Set(transformProps);
function isTransformProp(key) {
  return transformPropSet.has(key);
}
var transformOriginProps = new Set(["originX", "originY", "originZ"]);
function isTransformOriginProp(key) {
  return transformOriginProps.has(key);
}

// node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.js
function isForcedMotionValue(key, _a) {
  var layout2 = _a.layout, layoutId = _a.layoutId;
  return isTransformProp(key) || isTransformOriginProp(key) || (layout2 || layoutId !== void 0) && (!!valueScaleCorrection[key] || key === "opacity");
}

// node_modules/framer-motion/dist/es/value/utils/is-motion-value.js
var isMotionValue = function(value) {
  return value !== null && typeof value === "object" && value.getVelocity;
};

// node_modules/framer-motion/dist/es/render/html/utils/build-transform.js
var translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
function buildTransform(_a, _b, transformIsDefault, transformTemplate) {
  var transform3 = _a.transform, transformKeys2 = _a.transformKeys;
  var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
  var transformString = "";
  transformKeys2.sort(sortTransformProps);
  var transformHasZ = false;
  var numTransformKeys = transformKeys2.length;
  for (var i = 0; i < numTransformKeys; i++) {
    var key = transformKeys2[i];
    transformString += (translateAlias[key] || key) + "(" + transform3[key] + ") ";
    if (key === "z")
      transformHasZ = true;
  }
  if (!transformHasZ && enableHardwareAcceleration) {
    transformString += "translateZ(0)";
  } else {
    transformString = transformString.trim();
  }
  if (transformTemplate) {
    transformString = transformTemplate(transform3, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}
function buildTransformOrigin(_a) {
  var _b = _a.originX, originX = _b === void 0 ? "50%" : _b, _c = _a.originY, originY = _c === void 0 ? "50%" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;
  return originX + " " + originY + " " + originZ;
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.js
function isCSSVariable(key) {
  return key.startsWith("--");
}

// node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.js
var getValueAsType = function(value, type) {
  return type && typeof value === "number" ? type.transform(value) : value;
};

// node_modules/style-value-types/dist/es/utils.js
var clamp = function(min, max) {
  return function(v) {
    return Math.max(Math.min(v, max), min);
  };
};
var sanitize = function(v) {
  return v % 1 ? Number(v.toFixed(5)) : v;
};
var floatRegex = /(-)?([\d]*\.?[\d])+/g;
var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
function isString2(v) {
  return typeof v === "string";
}

// node_modules/style-value-types/dist/es/numbers/index.js
var number = {
  test: function(v) {
    return typeof v === "number";
  },
  parse: parseFloat,
  transform: function(v) {
    return v;
  }
};
var alpha = __assign(__assign({}, number), {transform: clamp(0, 1)});
var scale = __assign(__assign({}, number), {default: 1});

// node_modules/style-value-types/dist/es/numbers/units.js
var createUnitType = function(unit) {
  return {
    test: function(v) {
      return isString2(v) && v.endsWith(unit) && v.split(" ").length === 1;
    },
    parse: parseFloat,
    transform: function(v) {
      return "" + v + unit;
    }
  };
};
var degrees = createUnitType("deg");
var percent = createUnitType("%");
var px2 = createUnitType("px");
var vh = createUnitType("vh");
var vw = createUnitType("vw");
var progressPercentage = __assign(__assign({}, percent), {parse: function(v) {
  return percent.parse(v) / 100;
}, transform: function(v) {
  return percent.transform(v * 100);
}});

// node_modules/style-value-types/dist/es/color/utils.js
var isColorString = function(type, testProp) {
  return function(v) {
    return Boolean(isString2(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
  };
};
var splitColor = function(aName, bName, cName) {
  return function(v) {
    var _a;
    if (!isString2(v))
      return v;
    var _b = v.match(floatRegex), a2 = _b[0], b2 = _b[1], c2 = _b[2], alpha2 = _b[3];
    return _a = {}, _a[aName] = parseFloat(a2), _a[bName] = parseFloat(b2), _a[cName] = parseFloat(c2), _a.alpha = alpha2 !== void 0 ? parseFloat(alpha2) : 1, _a;
  };
};

// node_modules/style-value-types/dist/es/color/hsla.js
var hsla = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: function(_a) {
    var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, _b = _a.alpha, alpha$1 = _b === void 0 ? 1 : _b;
    return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
  }
};

// node_modules/style-value-types/dist/es/color/rgba.js
var clampRgbUnit = clamp(0, 255);
var rgbUnit = __assign(__assign({}, number), {transform: function(v) {
  return Math.round(clampRgbUnit(v));
}});
var rgba = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: function(_a) {
    var red = _a.red, green = _a.green, blue = _a.blue, _b = _a.alpha, alpha$1 = _b === void 0 ? 1 : _b;
    return "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
  }
};

// node_modules/style-value-types/dist/es/color/hex.js
function parseHex(v) {
  var r = "";
  var g = "";
  var b2 = "";
  var a2 = "";
  if (v.length > 5) {
    r = v.substr(1, 2);
    g = v.substr(3, 2);
    b2 = v.substr(5, 2);
    a2 = v.substr(7, 2);
  } else {
    r = v.substr(1, 1);
    g = v.substr(2, 1);
    b2 = v.substr(3, 1);
    a2 = v.substr(4, 1);
    r += r;
    g += g;
    b2 += b2;
    a2 += a2;
  }
  return {
    red: parseInt(r, 16),
    green: parseInt(g, 16),
    blue: parseInt(b2, 16),
    alpha: a2 ? parseInt(a2, 16) / 255 : 1
  };
}
var hex = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba.transform
};

// node_modules/style-value-types/dist/es/color/index.js
var color2 = {
  test: function(v) {
    return rgba.test(v) || hex.test(v) || hsla.test(v);
  },
  parse: function(v) {
    if (rgba.test(v)) {
      return rgba.parse(v);
    } else if (hsla.test(v)) {
      return hsla.parse(v);
    } else {
      return hex.parse(v);
    }
  },
  transform: function(v) {
    return isString2(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v);
  }
};

// node_modules/style-value-types/dist/es/complex/index.js
var colorToken = "${c}";
var numberToken = "${n}";
function test(v) {
  var _a, _b, _c, _d;
  return isNaN(v) && isString2(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
}
function analyse(v) {
  var values = [];
  var numColors = 0;
  var colors2 = v.match(colorRegex);
  if (colors2) {
    numColors = colors2.length;
    v = v.replace(colorRegex, colorToken);
    values.push.apply(values, colors2.map(color2.parse));
  }
  var numbers = v.match(floatRegex);
  if (numbers) {
    v = v.replace(floatRegex, numberToken);
    values.push.apply(values, numbers.map(number.parse));
  }
  return {values, numColors, tokenised: v};
}
function parse(v) {
  return analyse(v).values;
}
function createTransformer(v) {
  var _a = analyse(v), values = _a.values, numColors = _a.numColors, tokenised = _a.tokenised;
  var numValues = values.length;
  return function(v2) {
    var output = tokenised;
    for (var i = 0; i < numValues; i++) {
      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color2.transform(v2[i]) : sanitize(v2[i]));
    }
    return output;
  };
}
var convertNumbersToZero = function(v) {
  return typeof v === "number" ? 0 : v;
};
function getAnimatableNone(v) {
  var parsed = parse(v);
  var transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}
var complex = {test, parse, createTransformer, getAnimatableNone};

// node_modules/style-value-types/dist/es/complex/filter.js
var maxDefaults = new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v) {
  var _a = v.slice(0, -1).split("("), name = _a[0], value = _a[1];
  if (name === "drop-shadow")
    return v;
  var number2 = (value.match(floatRegex) || [])[0];
  if (!number2)
    return v;
  var unit = value.replace(number2, "");
  var defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number2 !== value)
    defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter = __assign(__assign({}, complex), {getAnimatableNone: function(v) {
  var functions = v.match(functionRegex);
  return functions ? functions.map(applyDefaultFilter).join(" ") : v;
}});

// node_modules/framer-motion/dist/es/render/dom/value-types/type-int.js
var int = __assign(__assign({}, number), {transform: Math.round});

// node_modules/framer-motion/dist/es/render/dom/value-types/number.js
var numberValueTypes = {
  borderWidth: px2,
  borderTopWidth: px2,
  borderRightWidth: px2,
  borderBottomWidth: px2,
  borderLeftWidth: px2,
  borderRadius: px2,
  radius: px2,
  borderTopLeftRadius: px2,
  borderTopRightRadius: px2,
  borderBottomRightRadius: px2,
  borderBottomLeftRadius: px2,
  width: px2,
  maxWidth: px2,
  height: px2,
  maxHeight: px2,
  size: px2,
  top: px2,
  right: px2,
  bottom: px2,
  left: px2,
  padding: px2,
  paddingTop: px2,
  paddingRight: px2,
  paddingBottom: px2,
  paddingLeft: px2,
  margin: px2,
  marginTop: px2,
  marginRight: px2,
  marginBottom: px2,
  marginLeft: px2,
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px2,
  translateX: px2,
  translateY: px2,
  translateZ: px2,
  x: px2,
  y: px2,
  z: px2,
  perspective: px2,
  transformPerspective: px2,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px2,
  zIndex: int,
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int
};

// node_modules/framer-motion/dist/es/render/html/utils/build-styles.js
function buildHTMLStyles(state, latestValues, projection, layoutState2, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {
  var _a;
  var style = state.style, vars = state.vars, transform3 = state.transform, transformKeys2 = state.transformKeys, transformOrigin2 = state.transformOrigin;
  transformKeys2.length = 0;
  var hasTransform = false;
  var hasTransformOrigin = false;
  var transformIsNone = true;
  for (var key in latestValues) {
    var value = latestValues[key];
    if (isCSSVariable(key)) {
      vars[key] = value;
      continue;
    }
    var valueType = numberValueTypes[key];
    var valueAsType = getValueAsType(value, valueType);
    if (isTransformProp(key)) {
      hasTransform = true;
      transform3[key] = valueAsType;
      transformKeys2.push(key);
      if (!transformIsNone)
        continue;
      if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))
        transformIsNone = false;
    } else if (isTransformOriginProp(key)) {
      transformOrigin2[key] = valueAsType;
      hasTransformOrigin = true;
    } else {
      if ((projection === null || projection === void 0 ? void 0 : projection.isHydrated) && (layoutState2 === null || layoutState2 === void 0 ? void 0 : layoutState2.isHydrated) && valueScaleCorrection[key]) {
        var correctedValue = valueScaleCorrection[key].process(value, layoutState2, projection);
        var applyTo = valueScaleCorrection[key].applyTo;
        if (applyTo) {
          var num = applyTo.length;
          for (var i = 0; i < num; i++) {
            style[applyTo[i]] = correctedValue;
          }
        } else {
          style[key] = correctedValue;
        }
      } else {
        style[key] = valueAsType;
      }
    }
  }
  if (layoutState2 && projection && buildProjectionTransform && buildProjectionTransformOrigin) {
    style.transform = buildProjectionTransform(layoutState2.deltaFinal, layoutState2.treeScale, hasTransform ? transform3 : void 0);
    if (transformTemplate) {
      style.transform = transformTemplate(transform3, style.transform);
    }
    style.transformOrigin = buildProjectionTransformOrigin(layoutState2);
  } else {
    if (hasTransform) {
      style.transform = buildTransform(state, options, transformIsNone, transformTemplate);
    }
    if (hasTransformOrigin) {
      style.transformOrigin = buildTransformOrigin(transformOrigin2);
    }
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/create-render-state.js
var createHtmlRenderState = function() {
  return {
    style: {},
    transform: {},
    transformKeys: [],
    transformOrigin: {},
    vars: {}
  };
};

// node_modules/framer-motion/dist/es/render/html/use-props.js
function copyRawValuesOnly(target, source, props) {
  for (var key in source) {
    if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
      target[key] = source[key];
    }
  }
}
function useInitialMotionValues(_a, visualState, isStatic) {
  var transformTemplate = _a.transformTemplate;
  return (0, import_react24.useMemo)(function() {
    var state = createHtmlRenderState();
    buildHTMLStyles(state, visualState, void 0, void 0, {enableHardwareAcceleration: !isStatic}, transformTemplate);
    var vars = state.vars, style = state.style;
    return __assign(__assign({}, vars), style);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  var styleProp = props.style || {};
  var style = {};
  copyRawValuesOnly(style, styleProp, props);
  Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
  if (props.transformValues) {
    style = props.transformValues(style);
  }
  return style;
}
function useHTMLProps(props, visualState, isStatic) {
  var htmlProps = {};
  var style = useStyle(props, visualState, isStatic);
  if (Boolean(props.drag)) {
    htmlProps.draggable = false;
    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
    style.touchAction = props.drag === true ? "none" : "pan-" + (props.drag === "x" ? "y" : "x");
  }
  htmlProps.style = style;
  return htmlProps;
}

// node_modules/framer-motion/dist/es/motion/utils/valid-prop.js
var validMotionProps = new Set([
  "initial",
  "animate",
  "exit",
  "style",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "layout",
  "layoutId",
  "_layoutResetTransform",
  "onLayoutAnimationComplete",
  "onViewportBoxUpdate",
  "onLayoutMeasure",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "drag",
  "dragControls",
  "dragListener",
  "dragConstraints",
  "dragDirectionLock",
  "_dragX",
  "_dragY",
  "dragElastic",
  "dragMomentum",
  "dragPropagation",
  "dragTransition",
  "whileDrag",
  "onPan",
  "onPanStart",
  "onPanEnd",
  "onPanSessionStart",
  "onTap",
  "onTapStart",
  "onTapCancel",
  "onHoverStart",
  "onHoverEnd",
  "whileFocus",
  "whileTap",
  "whileHover"
]);
function isValidMotionProp(key) {
  return validMotionProps.has(key);
}

// node_modules/framer-motion/dist/es/render/dom/utils/filter-props.js
var shouldForward = function(key) {
  return !isValidMotionProp(key);
};
try {
  emotionIsPropValid_1 = (init_is_prop_valid_browser_esm(), is_prop_valid_browser_esm_exports).default;
  shouldForward = function(key) {
    if (key.startsWith("on")) {
      return !isValidMotionProp(key);
    } else {
      return emotionIsPropValid_1(key);
    }
  };
} catch (_a) {
}
var emotionIsPropValid_1;
function filterProps(props, isDom, forwardMotionProps) {
  var filteredProps = {};
  for (var key in props) {
    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key)) {
      filteredProps[key] = props[key];
    }
  }
  return filteredProps;
}

// node_modules/framer-motion/dist/es/render/svg/use-props.js
var import_react25 = __toModule(require_react());

// node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.js
function calcOrigin(origin, offset2, size2) {
  return typeof origin === "string" ? origin : px2.transform(offset2 + size2 * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
  var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return pxOriginX + " " + pxOriginY;
}

// node_modules/framer-motion/dist/es/render/svg/utils/path.js
var progressToPixels = function(progress3, length) {
  return px2.transform(progress3 * length);
};
var dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
var camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, totalLength, length, spacing2, offset2, useDashCase) {
  if (spacing2 === void 0) {
    spacing2 = 1;
  }
  if (offset2 === void 0) {
    offset2 = 0;
  }
  if (useDashCase === void 0) {
    useDashCase = true;
  }
  var keys2 = useDashCase ? dashKeys : camelKeys;
  attrs[keys2.offset] = progressToPixels(-offset2, totalLength);
  var pathLength = progressToPixels(length, totalLength);
  var pathSpacing = progressToPixels(spacing2, totalLength);
  attrs[keys2.array] = pathLength + " " + pathSpacing;
}

// node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.js
function buildSVGAttrs(state, _a, projection, layoutState2, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {
  var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, latest = __rest(_a, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
  buildHTMLStyles(state, latest, projection, layoutState2, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin);
  state.attrs = state.style;
  state.style = {};
  var attrs = state.attrs, style = state.style, dimensions = state.dimensions, totalPathLength = state.totalPathLength;
  if (attrs.transform) {
    if (dimensions)
      style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (totalPathLength !== void 0 && pathLength !== void 0) {
    buildSVGPath(attrs, totalPathLength, pathLength, pathSpacing, pathOffset, false);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.js
var createSvgRenderState = function() {
  return __assign(__assign({}, createHtmlRenderState()), {attrs: {}});
};

// node_modules/framer-motion/dist/es/render/svg/use-props.js
function useSVGProps(props, visualState) {
  var visualProps = (0, import_react25.useMemo)(function() {
    var state = createSvgRenderState();
    buildSVGAttrs(state, visualState, void 0, void 0, {enableHardwareAcceleration: false}, props.transformTemplate);
    return __assign(__assign({}, state.attrs), {style: __assign({}, state.style)});
  }, [visualState]);
  if (props.style) {
    var rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = __assign(__assign({}, rawStyles), visualProps.style);
  }
  return visualProps;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.js
function createUseRender(forwardMotionProps) {
  if (forwardMotionProps === void 0) {
    forwardMotionProps = false;
  }
  var useRender = function(Component4, props, ref, _a, isStatic) {
    var latestValues = _a.latestValues;
    var useVisualProps = isSVGComponent(Component4) ? useSVGProps : useHTMLProps;
    var visualProps = useVisualProps(props, latestValues, isStatic);
    var filteredProps = filterProps(props, typeof Component4 === "string", forwardMotionProps);
    var elementProps = __assign(__assign(__assign({}, filteredProps), visualProps), {ref});
    return (0, import_react26.createElement)(Component4, elementProps);
  };
  return useRender;
}

// node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.js
var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
var REPLACE_TEMPLATE = "$1-$2";
var camelToDash = function(str) {
  return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
};

// node_modules/framer-motion/dist/es/render/html/utils/render.js
function renderHTML(element, _a) {
  var style = _a.style, vars = _a.vars;
  Object.assign(element.style, style);
  for (var key in vars) {
    element.style.setProperty(key, vars[key]);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.js
var camelCaseAttributes = new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox"
]);

// node_modules/framer-motion/dist/es/render/svg/utils/render.js
function renderSVG(element, renderState) {
  renderHTML(element, renderState);
  for (var key in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.js
function scrapeMotionValuesFromProps(props) {
  var style = props.style;
  var newValues = {};
  for (var key in style) {
    if (isMotionValue(style[key]) || isForcedMotionValue(key, props)) {
      newValues[key] = style[key];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.js
function scrapeMotionValuesFromProps2(props) {
  var newValues = scrapeMotionValuesFromProps(props);
  for (var key in props) {
    if (isMotionValue(props[key])) {
      var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
      newValues[targetKey] = props[key];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
var import_react27 = __toModule(require_react());

// node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.js
function isAnimationControls(v) {
  return typeof v === "object" && typeof v.start === "function";
}

// node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.js
var isKeyframesTarget = function(v) {
  return Array.isArray(v);
};

// node_modules/framer-motion/dist/es/utils/resolve-value.js
var isCustomValue = function(v) {
  return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
var resolveFinalValueInKeyframes = function(v) {
  return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
};

// node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.js
function resolveMotionValue(value) {
  var unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
function makeState(_a, props, context, presenceContext) {
  var scrapeMotionValuesFromProps3 = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;
  var state = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
    renderState: createRenderState()
  };
  if (onMount) {
    state.mount = function(instance) {
      return onMount(props, instance, state);
    };
  }
  return state;
}
var makeUseVisualState = function(config2) {
  return function(props, isStatic) {
    var context = (0, import_react27.useContext)(MotionContext);
    var presenceContext = (0, import_react27.useContext)(PresenceContext);
    return isStatic ? makeState(config2, props, context, presenceContext) : useConstant(function() {
      return makeState(config2, props, context, presenceContext);
    });
  };
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  var values = {};
  var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
  var motionValues = scrapeMotionValues(props);
  for (var key in motionValues) {
    values[key] = resolveMotionValue(motionValues[key]);
  }
  var initial = props.initial, animate3 = props.animate;
  var isControllingVariants = checkIfControllingVariants(props);
  var isVariantNode = checkIfVariantNode(props);
  if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
    initial !== null && initial !== void 0 ? initial : initial = context.initial;
    animate3 !== null && animate3 !== void 0 ? animate3 : animate3 = context.animate;
  }
  var variantToSet = blockInitialAnimation || initial === false ? animate3 : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    var list2 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list2.forEach(function(definition) {
      var resolved = resolveVariantFromProps(props, definition);
      if (!resolved)
        return;
      var transitionEnd = resolved.transitionEnd;
      resolved.transition;
      var target = __rest(resolved, ["transitionEnd", "transition"]);
      for (var key2 in target)
        values[key2] = target[key2];
      for (var key2 in transitionEnd)
        values[key2] = transitionEnd[key2];
    });
  }
  return values;
}

// node_modules/framer-motion/dist/es/render/svg/config-motion.js
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
    onMount: function(props, instance, _a) {
      var renderState = _a.renderState, latestValues = _a.latestValues;
      try {
        renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
      } catch (e) {
        renderState.dimensions = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }
      if (isPath(instance)) {
        renderState.totalPathLength = instance.getTotalLength();
      }
      buildSVGAttrs(renderState, latestValues, void 0, void 0, {enableHardwareAcceleration: false}, props.transformTemplate);
      renderSVG(instance, renderState);
    }
  })
};
function isPath(element) {
  return element.tagName === "path";
}

// node_modules/framer-motion/dist/es/render/html/config-motion.js
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState
  })
};

// node_modules/framer-motion/dist/es/render/dom/utils/create-config.js
function createDomMotionConfig(Component4, _a, preloadedFeatures, createVisualElement) {
  var _b = _a.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;
  var baseConfig = isSVGComponent(Component4) ? svgMotionConfig : htmlMotionConfig;
  return __assign(__assign({}, baseConfig), {
    preloadedFeatures,
    useRender: createUseRender(forwardMotionProps),
    createVisualElement,
    Component: Component4
  });
}

// node_modules/framer-motion/dist/es/render/utils/types.js
var AnimationType;
(function(AnimationType2) {
  AnimationType2["Animate"] = "animate";
  AnimationType2["Hover"] = "whileHover";
  AnimationType2["Tap"] = "whileTap";
  AnimationType2["Drag"] = "whileDrag";
  AnimationType2["Focus"] = "whileFocus";
  AnimationType2["Exit"] = "exit";
})(AnimationType || (AnimationType = {}));

// node_modules/framer-motion/dist/es/events/use-dom-event.js
var import_react28 = __toModule(require_react());
function addDomEvent(target, eventName, handler, options) {
  target.addEventListener(eventName, handler, options);
  return function() {
    return target.removeEventListener(eventName, handler, options);
  };
}
function useDomEvent(ref, eventName, handler, options) {
  (0, import_react28.useEffect)(function() {
    var element = ref.current;
    if (handler && element) {
      return addDomEvent(element, eventName, handler, options);
    }
  }, [ref, eventName, handler, options]);
}

// node_modules/framer-motion/dist/es/gestures/use-focus-gesture.js
function useFocusGesture(_a) {
  var whileFocus = _a.whileFocus, visualElement2 = _a.visualElement;
  var onFocus3 = function() {
    var _a2;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, true);
  };
  var onBlur3 = function() {
    var _a2;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, false);
  };
  useDomEvent(visualElement2, "focus", whileFocus ? onFocus3 : void 0);
  useDomEvent(visualElement2, "blur", whileFocus ? onBlur3 : void 0);
}

// node_modules/framer-motion/dist/es/gestures/utils/event-type.js
function isMouseEvent(event) {
  if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof MouseEvent;
}
function isTouchEvent(event) {
  var hasTouches = !!event.touches;
  return hasTouches;
}

// node_modules/framer-motion/dist/es/events/event-info.js
function filterPrimaryPointer(eventHandler) {
  return function(event) {
    var isMouseEvent2 = event instanceof MouseEvent;
    var isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
    if (isPrimaryPointer) {
      eventHandler(event);
    }
  };
}
var defaultPagePoint = {pageX: 0, pageY: 0};
function pointFromTouch(e, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  var primaryTouch = e.touches[0] || e.changedTouches[0];
  var point = primaryTouch || defaultPagePoint;
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function pointFromMouse(point, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function extractEventInfo(event, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
  };
}
function getViewportPointFromEvent(event) {
  return extractEventInfo(event, "client");
}
var wrapHandler = function(handler, shouldFilterPrimaryPointer) {
  if (shouldFilterPrimaryPointer === void 0) {
    shouldFilterPrimaryPointer = false;
  }
  var listener = function(event) {
    return handler(event, extractEventInfo(event));
  };
  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
};

// node_modules/framer-motion/dist/es/events/utils.js
var supportsPointerEvents = function() {
  return isBrowser2 && window.onpointerdown === null;
};
var supportsTouchEvents = function() {
  return isBrowser2 && window.ontouchstart === null;
};
var supportsMouseEvents = function() {
  return isBrowser2 && window.onmousedown === null;
};

// node_modules/framer-motion/dist/es/events/use-pointer-event.js
var mouseEventNames = {
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointercancel: "mousecancel",
  pointerover: "mouseover",
  pointerout: "mouseout",
  pointerenter: "mouseenter",
  pointerleave: "mouseleave"
};
var touchEventNames = {
  pointerdown: "touchstart",
  pointermove: "touchmove",
  pointerup: "touchend",
  pointercancel: "touchcancel"
};
function getPointerEventName2(name) {
  if (supportsPointerEvents()) {
    return name;
  } else if (supportsTouchEvents()) {
    return touchEventNames[name];
  } else if (supportsMouseEvents()) {
    return mouseEventNames[name];
  }
  return name;
}
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, getPointerEventName2(eventName), wrapHandler(handler, eventName === "pointerdown"), options);
}
function usePointerEvent2(ref, eventName, handler, options) {
  return useDomEvent(ref, getPointerEventName2(eventName), handler && wrapHandler(handler, eventName === "pointerdown"), options);
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js
function createLock(name) {
  var lock = null;
  return function() {
    var openLock = function() {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
var globalHorizontalLock = createLock("dragHorizontal");
var globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag2) {
  var lock = false;
  if (drag2 === "y") {
    lock = globalVerticalLock();
  } else if (drag2 === "x") {
    lock = globalHorizontalLock();
  } else {
    var openHorizontal_1 = globalHorizontalLock();
    var openVertical_1 = globalVerticalLock();
    if (openHorizontal_1 && openVertical_1) {
      lock = function() {
        openHorizontal_1();
        openVertical_1();
      };
    } else {
      if (openHorizontal_1)
        openHorizontal_1();
      if (openVertical_1)
        openVertical_1();
    }
  }
  return lock;
}
function isDragActive() {
  var openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}

// node_modules/framer-motion/dist/es/render/dom/utils/batch-layout.js
var unresolvedJobs = new Set();
var layoutState = {
  isMeasuringLayout: false
};
function pushJob(stack, job, pointer) {
  if (!stack[pointer])
    stack[pointer] = [];
  stack[pointer].push(job);
}
function batchLayout(callback) {
  unresolvedJobs.add(callback);
  return function() {
    return unresolvedJobs.delete(callback);
  };
}
function flushLayout() {
  if (!unresolvedJobs.size)
    return;
  var pointer = 0;
  var reads = [[]];
  var writes = [];
  var setRead = function(job) {
    return pushJob(reads, job, pointer);
  };
  var setWrite = function(job) {
    pushJob(writes, job, pointer);
    pointer++;
  };
  unresolvedJobs.forEach(function(callback) {
    callback(setRead, setWrite);
    pointer = 0;
  });
  unresolvedJobs.clear();
  layoutState.isMeasuringLayout = true;
  es_default.postRender(function() {
    setTimeout(function() {
      return layoutState.isMeasuringLayout = false;
    }, 10);
  });
  var numStacks = writes.length;
  for (var i = 0; i <= numStacks; i++) {
    reads[i] && reads[i].forEach(executeJob);
    writes[i] && writes[i].forEach(executeJob);
  }
}
var executeJob = function(job) {
  return job();
};

// node_modules/framer-motion/dist/es/gestures/use-hover-gesture.js
function createHoverEvent(visualElement2, isActive, callback) {
  return function(event, info) {
    var _a;
    if (!isMouseEvent(event) || layoutState.isMeasuringLayout || isDragActive()) {
      return;
    }
    callback === null || callback === void 0 ? void 0 : callback(event, info);
    (_a = visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);
  };
}
function useHoverGesture(_a) {
  var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement2 = _a.visualElement;
  usePointerEvent2(visualElement2, "pointerenter", onHoverStart || whileHover ? createHoverEvent(visualElement2, true, onHoverStart) : void 0);
  usePointerEvent2(visualElement2, "pointerleave", onHoverEnd || whileHover ? createHoverEvent(visualElement2, false, onHoverEnd) : void 0);
}

// node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js
var import_react30 = __toModule(require_react());

// node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js
var isNodeOrChild = function(parent, child) {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};

// node_modules/framer-motion/dist/es/utils/use-unmount-effect.js
var import_react29 = __toModule(require_react());
function useUnmountEffect2(callback) {
  return (0, import_react29.useEffect)(function() {
    return function() {
      return callback();
    };
  }, []);
}

// node_modules/popmotion/dist/es/utils/clamp.js
var clamp2 = function(min, max, v) {
  return Math.min(Math.max(v, min), max);
};

// node_modules/popmotion/dist/es/animations/utils/find-spring.js
var safeMin = 1e-3;
var minDuration = 0.01;
var maxDuration = 10;
var minDamping = 0.05;
var maxDamping = 1;
function findSpring(_a) {
  var _b = _a.duration, duration = _b === void 0 ? 800 : _b, _c = _a.bounce, bounce = _c === void 0 ? 0.25 : _c, _d = _a.velocity, velocity = _d === void 0 ? 0 : _d, _e = _a.mass, mass = _e === void 0 ? 1 : _e;
  var envelope;
  var derivative;
  warning(duration <= maxDuration * 1e3, "Spring duration must be 10 seconds or less");
  var dampingRatio = 1 - bounce;
  dampingRatio = clamp2(minDamping, maxDamping, dampingRatio);
  duration = clamp2(minDuration, maxDuration, duration / 1e3);
  if (dampingRatio < 1) {
    envelope = function(undampedFreq2) {
      var exponentialDecay = undampedFreq2 * dampingRatio;
      var delta2 = exponentialDecay * duration;
      var a2 = exponentialDecay - velocity;
      var b2 = calcAngularFreq(undampedFreq2, dampingRatio);
      var c2 = Math.exp(-delta2);
      return safeMin - a2 / b2 * c2;
    };
    derivative = function(undampedFreq2) {
      var exponentialDecay = undampedFreq2 * dampingRatio;
      var delta2 = exponentialDecay * duration;
      var d = delta2 * velocity + velocity;
      var e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      var f = Math.exp(-delta2);
      var g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      var factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g;
    };
  } else {
    envelope = function(undampedFreq2) {
      var a2 = Math.exp(-undampedFreq2 * duration);
      var b2 = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin + a2 * b2;
    };
    derivative = function(undampedFreq2) {
      var a2 = Math.exp(-undampedFreq2 * duration);
      var b2 = (velocity - undampedFreq2) * (duration * duration);
      return a2 * b2;
    };
  }
  var initialGuess = 5 / duration;
  var undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = duration * 1e3;
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  } else {
    var stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  var result = initialGuess;
  for (var i = 1; i < rootIterations; i++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// node_modules/popmotion/dist/es/animations/generators/spring.js
var durationKeys = ["duration", "bounce"];
var physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys2) {
  return keys2.some(function(key) {
    return options[key] !== void 0;
  });
}
function getSpringOptions(options) {
  var springOptions = __assign({velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false}, options);
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    var derived = findSpring(options);
    springOptions = __assign(__assign(__assign({}, springOptions), derived), {velocity: 0, mass: 1});
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring(_a) {
  var _b = _a.from, from = _b === void 0 ? 0 : _b, _c = _a.to, to = _c === void 0 ? 1 : _c, _d = _a.restSpeed, restSpeed = _d === void 0 ? 2 : _d, restDelta = _a.restDelta, options = __rest(_a, ["from", "to", "restSpeed", "restDelta"]);
  var state = {done: false, value: from};
  var _e = getSpringOptions(options), stiffness = _e.stiffness, damping = _e.damping, mass = _e.mass, velocity = _e.velocity, duration = _e.duration, isResolvedFromDuration = _e.isResolvedFromDuration;
  var resolveSpring = zero;
  var resolveVelocity = zero;
  function createSpring() {
    var initialVelocity = velocity ? -(velocity / 1e3) : 0;
    var initialDelta = to - from;
    var dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
    restDelta !== null && restDelta !== void 0 ? restDelta : restDelta = Math.abs(to - from) <= 1 ? 0.01 : 0.4;
    if (dampingRatio < 1) {
      var angularFreq_1 = calcAngularFreq(undampedAngularFreq, dampingRatio);
      resolveSpring = function(t) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 * Math.sin(angularFreq_1 * t) + initialDelta * Math.cos(angularFreq_1 * t));
      };
      resolveVelocity = function(t) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq_1 * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq_1 + initialDelta * Math.cos(angularFreq_1 * t)) - envelope * (Math.cos(angularFreq_1 * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq_1 * initialDelta * Math.sin(angularFreq_1 * t));
      };
    } else if (dampingRatio === 1) {
      resolveSpring = function(t) {
        return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
      };
    } else {
      var dampedAngularFreq_1 = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
      resolveSpring = function(t) {
        var envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        var freqForT = Math.min(dampedAngularFreq_1 * t, 300);
        return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq_1 * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq_1;
      };
    }
  }
  createSpring();
  return {
    next: function(t) {
      var current = resolveSpring(t);
      if (!isResolvedFromDuration) {
        var currentVelocity = resolveVelocity(t) * 1e3;
        var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        var isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state.done = t >= duration;
      }
      state.value = state.done ? to : current;
      return state;
    },
    flipTarget: function() {
      var _a2;
      velocity = -velocity;
      _a2 = [to, from], from = _a2[0], to = _a2[1];
      createSpring();
    }
  };
}
spring.needsInterpolation = function(a2, b2) {
  return typeof a2 === "string" || typeof b2 === "string";
};
var zero = function(_t) {
  return 0;
};

// node_modules/popmotion/dist/es/utils/progress.js
var progress = function(from, to, value) {
  var toFromDifference = to - from;
  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};

// node_modules/popmotion/dist/es/utils/mix.js
var mix = function(from, to, progress3) {
  return -progress3 * from + progress3 * to + from;
};

// node_modules/popmotion/dist/es/utils/mix-color.js
var mixLinearColor = function(from, to, v) {
  var fromExpo = from * from;
  var toExpo = to * to;
  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
};
var colorTypes = [hex, rgba, hsla];
var getColorType = function(v) {
  return colorTypes.find(function(type) {
    return type.test(v);
  });
};
var notAnimatable = function(color3) {
  return "'" + color3 + "' is not an animatable color. Use the equivalent color code instead.";
};
var mixColor = function(from, to) {
  var fromColorType = getColorType(from);
  var toColorType = getColorType(to);
  invariant(!!fromColorType, notAnimatable(from));
  invariant(!!toColorType, notAnimatable(to));
  invariant(fromColorType.transform === toColorType.transform, "Both colors must be hex/RGBA, OR both must be HSLA.");
  var fromColor = fromColorType.parse(from);
  var toColor = toColorType.parse(to);
  var blended = __assign({}, fromColor);
  var mixFunc = fromColorType === hsla ? mix : mixLinearColor;
  return function(v) {
    for (var key in blended) {
      if (key !== "alpha") {
        blended[key] = mixFunc(fromColor[key], toColor[key], v);
      }
    }
    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
    return fromColorType.transform(blended);
  };
};

// node_modules/popmotion/dist/es/utils/inc.js
var isNum = function(v) {
  return typeof v === "number";
};

// node_modules/popmotion/dist/es/utils/pipe.js
var combineFunctions = function(a2, b2) {
  return function(v) {
    return b2(a2(v));
  };
};
var pipe2 = function() {
  var transformers = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    transformers[_i] = arguments[_i];
  }
  return transformers.reduce(combineFunctions);
};

// node_modules/popmotion/dist/es/utils/mix-complex.js
function getMixer(origin, target) {
  if (isNum(origin)) {
    return function(v) {
      return mix(origin, target, v);
    };
  } else if (color2.test(origin)) {
    return mixColor(origin, target);
  } else {
    return mixComplex(origin, target);
  }
}
var mixArray = function(from, to) {
  var output = __spreadArray([], from);
  var numValues = output.length;
  var blendValue = from.map(function(fromThis, i) {
    return getMixer(fromThis, to[i]);
  });
  return function(v) {
    for (var i = 0; i < numValues; i++) {
      output[i] = blendValue[i](v);
    }
    return output;
  };
};
var mixObject = function(origin, target) {
  var output = __assign(__assign({}, origin), target);
  var blendValue = {};
  for (var key in output) {
    if (origin[key] !== void 0 && target[key] !== void 0) {
      blendValue[key] = getMixer(origin[key], target[key]);
    }
  }
  return function(v) {
    for (var key2 in blendValue) {
      output[key2] = blendValue[key2](v);
    }
    return output;
  };
};
function analyse2(value) {
  var parsed = complex.parse(value);
  var numValues = parsed.length;
  var numNumbers = 0;
  var numRGB = 0;
  var numHSL = 0;
  for (var i = 0; i < numValues; i++) {
    if (numNumbers || typeof parsed[i] === "number") {
      numNumbers++;
    } else {
      if (parsed[i].hue !== void 0) {
        numHSL++;
      } else {
        numRGB++;
      }
    }
  }
  return {parsed, numNumbers, numRGB, numHSL};
}
var mixComplex = function(origin, target) {
  var template = complex.createTransformer(target);
  var originStats = analyse2(origin);
  var targetStats = analyse2(target);
  invariant(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, "Complex values '" + origin + "' and '" + target + "' too different to mix. Ensure all colors are of the same type.");
  return pipe2(mixArray(originStats.parsed, targetStats.parsed), template);
};

// node_modules/popmotion/dist/es/utils/interpolate.js
var mixNumber = function(from, to) {
  return function(p) {
    return mix(from, to, p);
  };
};
function detectMixerFactory(v) {
  if (typeof v === "number") {
    return mixNumber;
  } else if (typeof v === "string") {
    if (color2.test(v)) {
      return mixColor;
    } else {
      return mixComplex;
    }
  } else if (Array.isArray(v)) {
    return mixArray;
  } else if (typeof v === "object") {
    return mixObject;
  }
}
function createMixers(output, ease, customMixer) {
  var mixers = [];
  var mixerFactory = customMixer || detectMixerFactory(output[0]);
  var numMixers = output.length - 1;
  for (var i = 0; i < numMixers; i++) {
    var mixer = mixerFactory(output[i], output[i + 1]);
    if (ease) {
      var easingFunction = Array.isArray(ease) ? ease[i] : ease;
      mixer = pipe2(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function fastInterpolate(_a, _b) {
  var from = _a[0], to = _a[1];
  var mixer = _b[0];
  return function(v) {
    return mixer(progress(from, to, v));
  };
}
function slowInterpolate(input, mixers) {
  var inputLength = input.length;
  var lastInputIndex = inputLength - 1;
  return function(v) {
    var mixerIndex = 0;
    var foundMixerIndex = false;
    if (v <= input[0]) {
      foundMixerIndex = true;
    } else if (v >= input[lastInputIndex]) {
      mixerIndex = lastInputIndex - 1;
      foundMixerIndex = true;
    }
    if (!foundMixerIndex) {
      var i = 1;
      for (; i < inputLength; i++) {
        if (input[i] > v || i === lastInputIndex) {
          break;
        }
      }
      mixerIndex = i - 1;
    }
    var progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
    return mixers[mixerIndex](progressInRange);
  };
}
function interpolate(input, output, _a) {
  var _b = _a === void 0 ? {} : _a, _c = _b.clamp, isClamp = _c === void 0 ? true : _c, ease = _b.ease, mixer = _b.mixer;
  var inputLength = input.length;
  invariant(inputLength === output.length, "Both input and output ranges must be the same length");
  invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
  if (input[0] > input[inputLength - 1]) {
    input = [].concat(input);
    output = [].concat(output);
    input.reverse();
    output.reverse();
  }
  var mixers = createMixers(output, ease, mixer);
  var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
  return isClamp ? function(v) {
    return interpolator(clamp2(input[0], input[inputLength - 1], v));
  } : interpolator;
}

// node_modules/popmotion/dist/es/easing/utils.js
var reverseEasing = function(easing) {
  return function(p) {
    return 1 - easing(1 - p);
  };
};
var mirrorEasing = function(easing) {
  return function(p) {
    return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
  };
};
var createExpoIn = function(power) {
  return function(p) {
    return Math.pow(p, power);
  };
};
var createBackIn = function(power) {
  return function(p) {
    return p * p * ((power + 1) * p - power);
  };
};
var createAnticipate = function(power) {
  var backEasing = createBackIn(power);
  return function(p) {
    return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
  };
};

// node_modules/popmotion/dist/es/easing/index.js
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
var BOUNCE_FIRST_THRESHOLD = 4 / 11;
var BOUNCE_SECOND_THRESHOLD = 8 / 11;
var BOUNCE_THIRD_THRESHOLD = 9 / 10;
var linear = function(p) {
  return p;
};
var easeIn = createExpoIn(2);
var easeOut = reverseEasing(easeIn);
var easeInOut = mirrorEasing(easeIn);
var circIn = function(p) {
  return 1 - Math.sin(Math.acos(p));
};
var circOut = reverseEasing(circIn);
var circInOut = mirrorEasing(circOut);
var backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
var backOut = reverseEasing(backIn);
var backInOut = mirrorEasing(backIn);
var anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
var ca = 4356 / 361;
var cb = 35442 / 1805;
var cc = 16061 / 1805;
var bounceOut = function(p) {
  if (p === 1 || p === 0)
    return p;
  var p2 = p * p;
  return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
};
var bounceIn = reverseEasing(bounceOut);
var bounceInOut = function(p) {
  return p < 0.5 ? 0.5 * (1 - bounceOut(1 - p * 2)) : 0.5 * bounceOut(p * 2 - 1) + 0.5;
};

// node_modules/popmotion/dist/es/animations/generators/keyframes.js
function defaultEasing(values, easing) {
  return values.map(function() {
    return easing || easeInOut;
  }).splice(0, values.length - 1);
}
function defaultOffset(values) {
  var numValues = values.length;
  return values.map(function(_value, i) {
    return i !== 0 ? i / (numValues - 1) : 0;
  });
}
function convertOffsetToTimes(offset2, duration) {
  return offset2.map(function(o) {
    return o * duration;
  });
}
function keyframes2(_a) {
  var _b = _a.from, from = _b === void 0 ? 0 : _b, _c = _a.to, to = _c === void 0 ? 1 : _c, ease = _a.ease, offset2 = _a.offset, _d = _a.duration, duration = _d === void 0 ? 300 : _d;
  var state = {done: false, value: from};
  var values = Array.isArray(to) ? to : [from, to];
  var times = convertOffsetToTimes(offset2 && offset2.length === values.length ? offset2 : defaultOffset(values), duration);
  function createInterpolator() {
    return interpolate(times, values, {
      ease: Array.isArray(ease) ? ease : defaultEasing(values, ease)
    });
  }
  var interpolator = createInterpolator();
  return {
    next: function(t) {
      state.value = interpolator(t);
      state.done = t >= duration;
      return state;
    },
    flipTarget: function() {
      values.reverse();
      interpolator = createInterpolator();
    }
  };
}

// node_modules/popmotion/dist/es/animations/generators/decay.js
function decay(_a) {
  var _b = _a.velocity, velocity = _b === void 0 ? 0 : _b, _c = _a.from, from = _c === void 0 ? 0 : _c, _d = _a.power, power = _d === void 0 ? 0.8 : _d, _e = _a.timeConstant, timeConstant = _e === void 0 ? 350 : _e, _f = _a.restDelta, restDelta = _f === void 0 ? 0.5 : _f, modifyTarget = _a.modifyTarget;
  var state = {done: false, value: from};
  var amplitude = power * velocity;
  var ideal = from + amplitude;
  var target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - from;
  return {
    next: function(t) {
      var delta2 = -amplitude * Math.exp(-t / timeConstant);
      state.done = !(delta2 > restDelta || delta2 < -restDelta);
      state.value = state.done ? target : target + delta2;
      return state;
    },
    flipTarget: function() {
    }
  };
}

// node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.js
var types = {keyframes: keyframes2, spring, decay};
function detectAnimationFromOptions(config2) {
  if (Array.isArray(config2.to)) {
    return keyframes2;
  } else if (types[config2.type]) {
    return types[config2.type];
  }
  var keys2 = new Set(Object.keys(config2));
  if (keys2.has("ease") || keys2.has("duration") && !keys2.has("dampingRatio")) {
    return keyframes2;
  } else if (keys2.has("dampingRatio") || keys2.has("stiffness") || keys2.has("mass") || keys2.has("damping") || keys2.has("restSpeed") || keys2.has("restDelta")) {
    return spring;
  }
  return keyframes2;
}

// node_modules/popmotion/dist/es/animations/utils/elapsed.js
function loopElapsed(elapsed, duration, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return elapsed - duration - delay;
}
function reverseElapsed(elapsed, duration, delay, isForwardPlayback) {
  if (delay === void 0) {
    delay = 0;
  }
  if (isForwardPlayback === void 0) {
    isForwardPlayback = true;
  }
  return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;
}
function hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {
  return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;
}

// node_modules/popmotion/dist/es/animations/index.js
var framesync = function(update) {
  var passTimestamp = function(_a) {
    var delta2 = _a.delta;
    return update(delta2);
  };
  return {
    start: function() {
      return es_default.update(passTimestamp, true);
    },
    stop: function() {
      return cancelSync.update(passTimestamp);
    }
  };
};
function animate(_a) {
  var _b, _c;
  var from = _a.from, _d = _a.autoplay, autoplay = _d === void 0 ? true : _d, _e = _a.driver, driver = _e === void 0 ? framesync : _e, _f = _a.elapsed, elapsed = _f === void 0 ? 0 : _f, _g = _a.repeat, repeatMax = _g === void 0 ? 0 : _g, _h = _a.repeatType, repeatType = _h === void 0 ? "loop" : _h, _j = _a.repeatDelay, repeatDelay = _j === void 0 ? 0 : _j, onPlay = _a.onPlay, onStop = _a.onStop, onComplete = _a.onComplete, onRepeat = _a.onRepeat, onUpdate = _a.onUpdate, options = __rest(_a, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
  var to = options.to;
  var driverControls;
  var repeatCount = 0;
  var computedDuration = options.duration;
  var latest;
  var isComplete = false;
  var isForwardPlayback = true;
  var interpolateFromNumber;
  var animator = detectAnimationFromOptions(options);
  if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {
    interpolateFromNumber = interpolate([0, 100], [from, to], {
      clamp: false
    });
    from = 0;
    to = 100;
  }
  var animation = animator(__assign(__assign({}, options), {from, to}));
  function repeat() {
    repeatCount++;
    if (repeatType === "reverse") {
      isForwardPlayback = repeatCount % 2 === 0;
      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
    } else {
      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
      if (repeatType === "mirror")
        animation.flipTarget();
    }
    isComplete = false;
    onRepeat && onRepeat();
  }
  function complete() {
    driverControls.stop();
    onComplete && onComplete();
  }
  function update(delta2) {
    if (!isForwardPlayback)
      delta2 = -delta2;
    elapsed += delta2;
    if (!isComplete) {
      var state = animation.next(Math.max(0, elapsed));
      latest = state.value;
      if (interpolateFromNumber)
        latest = interpolateFromNumber(latest);
      isComplete = isForwardPlayback ? state.done : elapsed <= 0;
    }
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
    if (isComplete) {
      if (repeatCount === 0)
        computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
      if (repeatCount < repeatMax) {
        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
      } else {
        complete();
      }
    }
  }
  function play() {
    onPlay === null || onPlay === void 0 ? void 0 : onPlay();
    driverControls = driver(update);
    driverControls.start();
  }
  autoplay && play();
  return {
    stop: function() {
      onStop === null || onStop === void 0 ? void 0 : onStop();
      driverControls.stop();
    }
  };
}

// node_modules/popmotion/dist/es/utils/velocity-per-second.js
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/popmotion/dist/es/animations/inertia.js
function inertia(_a) {
  var _b = _a.from, from = _b === void 0 ? 0 : _b, _c = _a.velocity, velocity = _c === void 0 ? 0 : _c, min = _a.min, max = _a.max, _d = _a.power, power = _d === void 0 ? 0.8 : _d, _e = _a.timeConstant, timeConstant = _e === void 0 ? 750 : _e, _f = _a.bounceStiffness, bounceStiffness = _f === void 0 ? 500 : _f, _g = _a.bounceDamping, bounceDamping = _g === void 0 ? 10 : _g, _h = _a.restDelta, restDelta = _h === void 0 ? 1 : _h, modifyTarget = _a.modifyTarget, driver = _a.driver, onUpdate = _a.onUpdate, onComplete = _a.onComplete;
  var currentAnimation;
  function isOutOfBounds(v) {
    return min !== void 0 && v < min || max !== void 0 && v > max;
  }
  function boundaryNearest(v) {
    if (min === void 0)
      return max;
    if (max === void 0)
      return min;
    return Math.abs(min - v) < Math.abs(max - v) ? min : max;
  }
  function startAnimation2(options) {
    currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
    currentAnimation = animate(__assign(__assign({}, options), {driver, onUpdate: function(v) {
      var _a2;
      onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
      (_a2 = options.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(options, v);
    }, onComplete}));
  }
  function startSpring(options) {
    startAnimation2(__assign({type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta}, options));
  }
  if (isOutOfBounds(from)) {
    startSpring({from, velocity, to: boundaryNearest(from)});
  } else {
    var target = power * velocity + from;
    if (typeof modifyTarget !== "undefined")
      target = modifyTarget(target);
    var boundary_1 = boundaryNearest(target);
    var heading_1 = boundary_1 === min ? -1 : 1;
    var prev_1;
    var current_1;
    var checkBoundary = function(v) {
      prev_1 = current_1;
      current_1 = v;
      velocity = velocityPerSecond(v - prev_1, getFrameData().delta);
      if (heading_1 === 1 && v > boundary_1 || heading_1 === -1 && v < boundary_1) {
        startSpring({from: v, to: boundary_1, velocity});
      }
    };
    startAnimation2({
      type: "decay",
      from,
      velocity,
      timeConstant,
      power,
      restDelta,
      modifyTarget,
      onUpdate: isOutOfBounds(target) ? checkBoundary : void 0
    });
  }
  return {
    stop: function() {
      return currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
    }
  };
}

// node_modules/popmotion/dist/es/utils/attract.js
var identity = function(v) {
  return v;
};
var createAttractor = function(alterDisplacement) {
  if (alterDisplacement === void 0) {
    alterDisplacement = identity;
  }
  return function(constant, origin, v) {
    var displacement = origin - v;
    var springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));
    return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
  };
};
var attract = createAttractor();
var attractExpo = createAttractor(Math.sqrt);

// node_modules/popmotion/dist/es/utils/is-point.js
var isPoint = function(point) {
  return point.hasOwnProperty("x") && point.hasOwnProperty("y");
};

// node_modules/popmotion/dist/es/utils/is-point-3d.js
var isPoint3D = function(point) {
  return isPoint(point) && point.hasOwnProperty("z");
};

// node_modules/popmotion/dist/es/utils/distance.js
var distance1D = function(a2, b2) {
  return Math.abs(a2 - b2);
};
function distance(a2, b2) {
  if (isNum(a2) && isNum(b2)) {
    return distance1D(a2, b2);
  } else if (isPoint(a2) && isPoint(b2)) {
    var xDelta = distance1D(a2.x, b2.x);
    var yDelta = distance1D(a2.y, b2.y);
    var zDelta = isPoint3D(a2) && isPoint3D(b2) ? distance1D(a2.z, b2.z) : 0;
    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
  }
}

// node_modules/popmotion/dist/es/easing/cubic-bezier.js
var a = function(a1, a2) {
  return 1 - 3 * a2 + 3 * a1;
};
var b = function(a1, a2) {
  return 3 * a2 - 6 * a1;
};
var c = function(a1) {
  return 3 * a1;
};
var calcBezier = function(t, a1, a2) {
  return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
};
var getSlope = function(t, a1, a2) {
  return 3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);
};
var subdivisionPrecision = 1e-7;
var subdivisionMaxIterations = 10;
function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX;
  var currentT;
  var i = 0;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
  return currentT;
}
var newtonIterations = 8;
var newtonMinSlope = 1e-3;
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < newtonIterations; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
var kSplineTableSize = 11;
var kSampleStepSize = 1 / (kSplineTableSize - 1);
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return linear;
  var sampleValues = new Float32Array(kSplineTableSize);
  for (var i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }
  function getTForX(aX) {
    var intervalStart = 0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= newtonMinSlope) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return function(t) {
    return t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
  };
}

// node_modules/framer-motion/dist/es/gestures/use-tap-gesture.js
function useTapGesture(_a) {
  var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement2 = _a.visualElement;
  var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;
  var isPressing = (0, import_react30.useRef)(false);
  var cancelPointerEndListeners = (0, import_react30.useRef)(null);
  function removePointerEndListener() {
    var _a2;
    (_a2 = cancelPointerEndListeners.current) === null || _a2 === void 0 ? void 0 : _a2.call(cancelPointerEndListeners);
    cancelPointerEndListeners.current = null;
  }
  function checkPointerEnd() {
    var _a2;
    removePointerEndListener();
    isPressing.current = false;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, false);
    return !isDragActive();
  }
  function onPointerUp(event, info) {
    if (!checkPointerEnd())
      return;
    !isNodeOrChild(visualElement2.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);
  }
  function onPointerCancel(event, info) {
    if (!checkPointerEnd())
      return;
    onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);
  }
  function onPointerDown(event, info) {
    var _a2;
    removePointerEndListener();
    if (isPressing.current)
      return;
    isPressing.current = true;
    cancelPointerEndListeners.current = pipe2(addPointerEvent(window, "pointerup", onPointerUp), addPointerEvent(window, "pointercancel", onPointerCancel));
    onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, true);
  }
  usePointerEvent2(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0);
  useUnmountEffect2(removePointerEndListener);
}

// node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.js
var makeRenderlessComponent = function(hook) {
  return function(props) {
    hook(props);
    return null;
  };
};

// node_modules/framer-motion/dist/es/motion/features/gestures.js
var gestureAnimations = {
  tap: makeRenderlessComponent(useTapGesture),
  focus: makeRenderlessComponent(useFocusGesture),
  hover: makeRenderlessComponent(useHoverGesture)
};

// node_modules/framer-motion/dist/es/motion/features/animations.js
var import_react31 = __toModule(require_react());

// node_modules/framer-motion/dist/es/utils/shallow-compare.js
function shallowCompare(next, prev) {
  if (!Array.isArray(prev))
    return false;
  var prevLength = prev.length;
  if (prevLength !== next.length)
    return false;
  for (var i = 0; i < prevLength; i++) {
    if (prev[i] !== next[i])
      return false;
  }
  return true;
}

// node_modules/framer-motion/dist/es/utils/time-conversion.js
var secondsToMilliseconds = function(seconds) {
  return seconds * 1e3;
};

// node_modules/framer-motion/dist/es/animation/utils/easing.js
var easingLookup = {
  linear,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate,
  bounceIn,
  bounceInOut,
  bounceOut
};
var easingDefinitionToFunction = function(definition) {
  if (Array.isArray(definition)) {
    invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
    var _a = __read(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    invariant(easingLookup[definition] !== void 0, "Invalid easing type '" + definition + "'");
    return easingLookup[definition];
  }
  return definition;
};
var isEasingArray = function(ease) {
  return Array.isArray(ease) && typeof ease[0] !== "number";
};

// node_modules/framer-motion/dist/es/animation/utils/is-animatable.js
var isAnimatable = function(key, value) {
  if (key === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && complex.test(value) && !value.startsWith("url(")) {
    return true;
  }
  return false;
};

// node_modules/framer-motion/dist/es/animation/utils/default-transitions.js
var underDampedSpring = function() {
  return {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restDelta: 0.5,
    restSpeed: 10
  };
};
var criticallyDampedSpring = function(to) {
  return {
    type: "spring",
    stiffness: 550,
    damping: to === 0 ? 2 * Math.sqrt(550) : 30,
    restDelta: 0.01,
    restSpeed: 10
  };
};
var linearTween = function() {
  return {
    type: "keyframes",
    ease: "linear",
    duration: 0.3
  };
};
var keyframes3 = function(values) {
  return {
    type: "keyframes",
    duration: 0.8,
    values
  };
};
var defaultTransitions = {
  x: underDampedSpring,
  y: underDampedSpring,
  z: underDampedSpring,
  rotate: underDampedSpring,
  rotateX: underDampedSpring,
  rotateY: underDampedSpring,
  rotateZ: underDampedSpring,
  scaleX: criticallyDampedSpring,
  scaleY: criticallyDampedSpring,
  scale: criticallyDampedSpring,
  opacity: linearTween,
  backgroundColor: linearTween,
  color: linearTween,
  default: criticallyDampedSpring
};
var getDefaultTransition = function(valueKey, to) {
  var transitionFactory;
  if (isKeyframesTarget(to)) {
    transitionFactory = keyframes3;
  } else {
    transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
  }
  return __assign({to}, transitionFactory(to));
};

// node_modules/framer-motion/dist/es/render/dom/value-types/defaults.js
var defaultValueTypes = __assign(__assign({}, numberValueTypes), {
  color: color2,
  backgroundColor: color2,
  outlineColor: color2,
  fill: color2,
  stroke: color2,
  borderColor: color2,
  borderTopColor: color2,
  borderRightColor: color2,
  borderBottomColor: color2,
  borderLeftColor: color2,
  filter,
  WebkitFilter: filter
});
var getDefaultValueType = function(key) {
  return defaultValueTypes[key];
};

// node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.js
function getAnimatableNone2(key, value) {
  var _a;
  var defaultValueType = getDefaultValueType(key);
  if (defaultValueType !== filter)
    defaultValueType = complex;
  return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);
}

// node_modules/framer-motion/dist/es/animation/utils/transitions.js
function isTransitionDefined(_a) {
  _a.when;
  _a.delay;
  _a.delayChildren;
  _a.staggerChildren;
  _a.staggerDirection;
  _a.repeat;
  _a.repeatType;
  _a.repeatDelay;
  _a.from;
  var transition3 = __rest(_a, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
  return !!Object.keys(transition3).length;
}
var legacyRepeatWarning = false;
function convertTransitionToAnimationOptions(_a) {
  var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip2 = _a.flip, loop = _a.loop, transition3 = __rest(_a, ["ease", "times", "yoyo", "flip", "loop"]);
  var options = __assign({}, transition3);
  if (times)
    options["offset"] = times;
  if (transition3.duration)
    options["duration"] = secondsToMilliseconds(transition3.duration);
  if (transition3.repeatDelay)
    options.repeatDelay = secondsToMilliseconds(transition3.repeatDelay);
  if (ease) {
    options["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
  }
  if (transition3.type === "tween")
    options.type = "keyframes";
  if (yoyo || loop || flip2) {
    warning(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
    legacyRepeatWarning = true;
    if (yoyo) {
      options.repeatType = "reverse";
    } else if (loop) {
      options.repeatType = "loop";
    } else if (flip2) {
      options.repeatType = "mirror";
    }
    options.repeat = loop || yoyo || flip2 || transition3.repeat;
  }
  if (transition3.type !== "spring")
    options.type = "keyframes";
  return options;
}
function getDelayFromTransition(transition3, key) {
  var _a;
  var valueTransition = getValueTransition(transition3, key) || {};
  return (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : 0;
}
function hydrateKeyframes(options) {
  if (Array.isArray(options.to) && options.to[0] === null) {
    options.to = __spreadArray([], __read(options.to));
    options.to[0] = options.from;
  }
  return options;
}
function getPopmotionAnimationOptions(transition3, options, key) {
  var _a;
  if (Array.isArray(options.to)) {
    (_a = transition3.duration) !== null && _a !== void 0 ? _a : transition3.duration = 0.8;
  }
  hydrateKeyframes(options);
  if (!isTransitionDefined(transition3)) {
    transition3 = __assign(__assign({}, transition3), getDefaultTransition(key, options.to));
  }
  return __assign(__assign({}, options), convertTransitionToAnimationOptions(transition3));
}
function getAnimation(key, value, target, transition3, onComplete) {
  var _a;
  var valueTransition = getValueTransition(transition3, key);
  var origin = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value.get();
  var isTargetAnimatable = isAnimatable(key, target);
  if (origin === "none" && isTargetAnimatable && typeof target === "string") {
    origin = getAnimatableNone2(key, target);
  } else if (isZero(origin) && typeof target === "string") {
    origin = getZeroUnit(target);
  } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
    target = getZeroUnit(origin);
  }
  var isOriginAnimatable = isAnimatable(key, origin);
  warning(isOriginAnimatable === isTargetAnimatable, "You are trying to animate " + key + ' from "' + origin + '" to "' + target + '". ' + origin + " is not an animatable value - to enable this animation set " + origin + " to a value animatable to " + target + " via the `style` property.");
  function start2() {
    var options = {
      from: origin,
      to: target,
      velocity: value.getVelocity(),
      onComplete,
      onUpdate: function(v) {
        return value.set(v);
      }
    };
    return valueTransition.type === "inertia" || valueTransition.type === "decay" ? inertia(__assign(__assign({}, options), valueTransition)) : animate(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options, key)), {onUpdate: function(v) {
      var _a2;
      options.onUpdate(v);
      (_a2 = valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, v);
    }, onComplete: function() {
      var _a2;
      options.onComplete();
      (_a2 = valueTransition.onComplete) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition);
    }}));
  }
  function set() {
    var _a2;
    value.set(target);
    onComplete();
    (_a2 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition);
    return {stop: function() {
    }};
  }
  return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set : start2;
}
function isZero(value) {
  return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
}
function getZeroUnit(potentialUnitType) {
  return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
}
function getValueTransition(transition3, key) {
  return transition3[key] || transition3["default"] || transition3;
}
function startAnimation(key, value, target, transition3) {
  if (transition3 === void 0) {
    transition3 = {};
  }
  return value.start(function(onComplete) {
    var delayTimer;
    var controls;
    var animation = getAnimation(key, value, target, transition3, onComplete);
    var delay = getDelayFromTransition(transition3, key);
    var start2 = function() {
      return controls = animation();
    };
    if (delay) {
      delayTimer = setTimeout(start2, secondsToMilliseconds(delay));
    } else {
      start2();
    }
    return function() {
      clearTimeout(delayTimer);
      controls === null || controls === void 0 ? void 0 : controls.stop();
    };
  });
}

// node_modules/framer-motion/dist/es/utils/is-numerical-string.js
var isNumericalString = function(v) {
  return /^\-?\d*\.?\d+$/.test(v);
};

// node_modules/framer-motion/dist/es/utils/array.js
function addUniqueItem(arr, item) {
  arr.indexOf(item) === -1 && arr.push(item);
}
function removeItem2(arr, item) {
  var index2 = arr.indexOf(item);
  index2 > -1 && arr.splice(index2, 1);
}

// node_modules/framer-motion/dist/es/utils/subscription-manager.js
var SubscriptionManager = function() {
  function SubscriptionManager2() {
    this.subscriptions = [];
  }
  SubscriptionManager2.prototype.add = function(handler) {
    var _this = this;
    addUniqueItem(this.subscriptions, handler);
    return function() {
      return removeItem2(_this.subscriptions, handler);
    };
  };
  SubscriptionManager2.prototype.notify = function(a2, b2, c2) {
    var numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a2, b2, c2);
    } else {
      for (var i = 0; i < numSubscriptions; i++) {
        var handler = this.subscriptions[i];
        handler && handler(a2, b2, c2);
      }
    }
  };
  SubscriptionManager2.prototype.getSize = function() {
    return this.subscriptions.length;
  };
  SubscriptionManager2.prototype.clear = function() {
    this.subscriptions.length = 0;
  };
  return SubscriptionManager2;
}();

// node_modules/framer-motion/dist/es/value/index.js
var isFloat = function(value) {
  return !isNaN(parseFloat(value));
};
var MotionValue = function() {
  function MotionValue2(init) {
    var _this = this;
    this.timeDelta = 0;
    this.lastUpdated = 0;
    this.updateSubscribers = new SubscriptionManager();
    this.velocityUpdateSubscribers = new SubscriptionManager();
    this.renderSubscribers = new SubscriptionManager();
    this.canTrackVelocity = false;
    this.updateAndNotify = function(v, render3) {
      if (render3 === void 0) {
        render3 = true;
      }
      _this.prev = _this.current;
      _this.current = v;
      var _a = getFrameData(), delta2 = _a.delta, timestamp = _a.timestamp;
      if (_this.lastUpdated !== timestamp) {
        _this.timeDelta = delta2;
        _this.lastUpdated = timestamp;
        es_default.postRender(_this.scheduleVelocityCheck);
      }
      if (_this.prev !== _this.current) {
        _this.updateSubscribers.notify(_this.current);
      }
      if (_this.velocityUpdateSubscribers.getSize()) {
        _this.velocityUpdateSubscribers.notify(_this.getVelocity());
      }
      if (render3) {
        _this.renderSubscribers.notify(_this.current);
      }
    };
    this.scheduleVelocityCheck = function() {
      return es_default.postRender(_this.velocityCheck);
    };
    this.velocityCheck = function(_a) {
      var timestamp = _a.timestamp;
      if (timestamp !== _this.lastUpdated) {
        _this.prev = _this.current;
        _this.velocityUpdateSubscribers.notify(_this.getVelocity());
      }
    };
    this.hasAnimated = false;
    this.prev = this.current = init;
    this.canTrackVelocity = isFloat(this.current);
  }
  MotionValue2.prototype.onChange = function(subscription) {
    return this.updateSubscribers.add(subscription);
  };
  MotionValue2.prototype.clearListeners = function() {
    this.updateSubscribers.clear();
  };
  MotionValue2.prototype.onRenderRequest = function(subscription) {
    subscription(this.get());
    return this.renderSubscribers.add(subscription);
  };
  MotionValue2.prototype.attach = function(passiveEffect) {
    this.passiveEffect = passiveEffect;
  };
  MotionValue2.prototype.set = function(v, render3) {
    if (render3 === void 0) {
      render3 = true;
    }
    if (!render3 || !this.passiveEffect) {
      this.updateAndNotify(v, render3);
    } else {
      this.passiveEffect(v, this.updateAndNotify);
    }
  };
  MotionValue2.prototype.get = function() {
    return this.current;
  };
  MotionValue2.prototype.getPrevious = function() {
    return this.prev;
  };
  MotionValue2.prototype.getVelocity = function() {
    return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
  };
  MotionValue2.prototype.start = function(animation) {
    var _this = this;
    this.stop();
    return new Promise(function(resolve) {
      _this.hasAnimated = true;
      _this.stopAnimation = animation(resolve);
    }).then(function() {
      return _this.clearAnimation();
    });
  };
  MotionValue2.prototype.stop = function() {
    if (this.stopAnimation)
      this.stopAnimation();
    this.clearAnimation();
  };
  MotionValue2.prototype.isAnimating = function() {
    return !!this.stopAnimation;
  };
  MotionValue2.prototype.clearAnimation = function() {
    this.stopAnimation = null;
  };
  MotionValue2.prototype.destroy = function() {
    this.updateSubscribers.clear();
    this.renderSubscribers.clear();
    this.stop();
  };
  return MotionValue2;
}();
function motionValue(init) {
  return new MotionValue(init);
}

// node_modules/framer-motion/dist/es/render/dom/value-types/test.js
var testValueType = function(v) {
  return function(type) {
    return type.test(v);
  };
};

// node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js
var auto = {
  test: function(v) {
    return v === "auto";
  },
  parse: function(v) {
    return v;
  }
};

// node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js
var dimensionValueTypes = [number, px2, percent, degrees, vw, vh, auto];
var findDimensionValueType = function(v) {
  return dimensionValueTypes.find(testValueType(v));
};

// node_modules/framer-motion/dist/es/render/dom/value-types/find.js
var valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes)), [color2, complex]);
var findValueType = function(v) {
  return valueTypes.find(testValueType(v));
};

// node_modules/framer-motion/dist/es/render/utils/setters.js
function setMotionValue(visualElement2, key, value) {
  if (visualElement2.hasValue(key)) {
    visualElement2.getValue(key).set(value);
  } else {
    visualElement2.addValue(key, motionValue(value));
  }
}
function setTarget(visualElement2, definition) {
  var resolved = resolveVariant(visualElement2, definition);
  var _a = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;
  _a.transition;
  var target = __rest(_a, ["transitionEnd", "transition"]);
  target = __assign(__assign({}, target), transitionEnd);
  for (var key in target) {
    var value = resolveFinalValueInKeyframes(target[key]);
    setMotionValue(visualElement2, key, value);
  }
}
function checkTargetForNewValues(visualElement2, target, origin) {
  var _a, _b, _c;
  var _d;
  var newValueKeys = Object.keys(target).filter(function(key2) {
    return !visualElement2.hasValue(key2);
  });
  var numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (var i = 0; i < numNewValues; i++) {
    var key = newValueKeys[i];
    var targetValue = target[key];
    var value = null;
    if (Array.isArray(targetValue)) {
      value = targetValue[0];
    }
    if (value === null) {
      value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement2.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
    }
    if (value === void 0 || value === null)
      continue;
    if (typeof value === "string" && isNumericalString(value)) {
      value = parseFloat(value);
    } else if (!findValueType(value) && complex.test(targetValue)) {
      value = getAnimatableNone2(key, targetValue);
    }
    visualElement2.addValue(key, motionValue(value));
    (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : _d[key] = value;
    visualElement2.setBaseTarget(key, value);
  }
}
function getOriginFromTransition(key, transition3) {
  if (!transition3)
    return;
  var valueTransition = transition3[key] || transition3["default"] || transition3;
  return valueTransition.from;
}
function getOrigin(target, transition3, visualElement2) {
  var _a, _b;
  var origin = {};
  for (var key in target) {
    origin[key] = (_a = getOriginFromTransition(key, transition3)) !== null && _a !== void 0 ? _a : (_b = visualElement2.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
  }
  return origin;
}

// node_modules/framer-motion/dist/es/render/utils/animation.js
function animateVisualElement(visualElement2, definition, options) {
  if (options === void 0) {
    options = {};
  }
  visualElement2.notifyAnimationStart();
  var animation;
  if (Array.isArray(definition)) {
    var animations2 = definition.map(function(variant) {
      return animateVariant(visualElement2, variant, options);
    });
    animation = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement2, definition, options);
  } else {
    var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options.custom) : definition;
    animation = animateTarget(visualElement2, resolvedDefinition, options);
  }
  return animation.then(function() {
    return visualElement2.notifyAnimationComplete(definition);
  });
}
function animateVariant(visualElement2, variant, options) {
  var _a;
  if (options === void 0) {
    options = {};
  }
  var resolved = resolveVariant(visualElement2, variant, options.custom);
  var _b = (resolved || {}).transition, transition3 = _b === void 0 ? visualElement2.getDefaultTransition() || {} : _b;
  if (options.transitionOverride) {
    transition3 = options.transitionOverride;
  }
  var getAnimation2 = resolved ? function() {
    return animateTarget(visualElement2, resolved, options);
  } : function() {
    return Promise.resolve();
  };
  var getChildAnimations = ((_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function(forwardDelay) {
    if (forwardDelay === void 0) {
      forwardDelay = 0;
    }
    var _a2 = transition3.delayChildren, delayChildren = _a2 === void 0 ? 0 : _a2, staggerChildren = transition3.staggerChildren, staggerDirection = transition3.staggerDirection;
    return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : function() {
    return Promise.resolve();
  };
  var when = transition3.when;
  if (when) {
    var _c = __read(when === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first = _c[0], last = _c[1];
    return first().then(last);
  } else {
    return Promise.all([getAnimation2(), getChildAnimations(options.delay)]);
  }
}
function animateTarget(visualElement2, definition, _a) {
  var _b;
  var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
  var _e = visualElement2.makeTargetAnimatable(definition), _f = _e.transition, transition3 = _f === void 0 ? visualElement2.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = __rest(_e, ["transition", "transitionEnd"]);
  if (transitionOverride)
    transition3 = transitionOverride;
  var animations2 = [];
  var animationTypeState = type && ((_b = visualElement2.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
  for (var key in target) {
    var value = visualElement2.getValue(key);
    var valueTarget = target[key];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
      continue;
    }
    var animation = startAnimation(key, value, valueTarget, __assign({delay}, transition3));
    animations2.push(animation);
  }
  return Promise.all(animations2).then(function() {
    transitionEnd && setTarget(visualElement2, transitionEnd);
  });
}
function animateChildren(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options) {
  if (delayChildren === void 0) {
    delayChildren = 0;
  }
  if (staggerChildren === void 0) {
    staggerChildren = 0;
  }
  if (staggerDirection === void 0) {
    staggerDirection = 1;
  }
  var animations2 = [];
  var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
  var generateStaggerDuration = staggerDirection === 1 ? function(i) {
    if (i === void 0) {
      i = 0;
    }
    return i * staggerChildren;
  } : function(i) {
    if (i === void 0) {
      i = 0;
    }
    return maxStaggerDuration - i * staggerChildren;
  };
  Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {
    animations2.push(animateVariant(child, variant, __assign(__assign({}, options), {delay: delayChildren + generateStaggerDuration(i)})).then(function() {
      return child.notifyAnimationComplete(variant);
    }));
  });
  return Promise.all(animations2);
}
function sortByTreeOrder(a2, b2) {
  return a2.sortNodePosition(b2);
}
function shouldBlockAnimation(_a, key) {
  var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;
  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
  needsAnimating[key] = false;
  return shouldBlock;
}

// node_modules/framer-motion/dist/es/render/utils/animation-state.js
var variantPriorityOrder = [
  AnimationType.Animate,
  AnimationType.Hover,
  AnimationType.Tap,
  AnimationType.Drag,
  AnimationType.Focus,
  AnimationType.Exit
];
var reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement2) {
  return function(animations2) {
    return Promise.all(animations2.map(function(_a) {
      var animation = _a.animation, options = _a.options;
      return animateVisualElement(visualElement2, animation, options);
    }));
  };
}
function createAnimationState(visualElement2) {
  var animate3 = animateList(visualElement2);
  var state = createState();
  var allAnimatedKeys = {};
  var isInitialRender = true;
  var buildResolvedTypeValues = function(acc, definition) {
    var resolved = resolveVariant(visualElement2, definition);
    if (resolved) {
      resolved.transition;
      var transitionEnd = resolved.transitionEnd, target = __rest(resolved, ["transition", "transitionEnd"]);
      acc = __assign(__assign(__assign({}, acc), target), transitionEnd);
    }
    return acc;
  };
  function isAnimated(key) {
    return allAnimatedKeys[key] !== void 0;
  }
  function setAnimateFunction(makeAnimator) {
    animate3 = makeAnimator(visualElement2);
  }
  function animateChanges(options, changedActiveType) {
    var _a;
    var props = visualElement2.getProps();
    var context = visualElement2.getVariantContext(true) || {};
    var animations2 = [];
    var removedKeys = new Set();
    var encounteredKeys = {};
    var removedVariantIndex = Infinity;
    var _loop_1 = function(i2) {
      var type = reversePriorityOrder[i2];
      var typeState = state[type];
      var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];
      var propIsVariant = isVariantLabel(prop);
      var activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i2;
      var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = __assign({}, encounteredKeys);
      if (!typeState.isActive && activeDelta === null || !prop && !typeState.prevProp || isAnimationControls(prop) || typeof prop === "boolean") {
        return "continue";
      }
      var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i2 > removedVariantIndex && propIsVariant;
      var definitionList = Array.isArray(prop) ? prop : [prop];
      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;
      var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
      var markToAnimate = function(key2) {
        shouldAnimateType = true;
        removedKeys.delete(key2);
        typeState.needsAnimating[key2] = true;
      };
      for (var key in allKeys) {
        var next = resolvedValues[key];
        var prev = prevResolvedValues[key];
        if (encounteredKeys.hasOwnProperty(key))
          continue;
        if (next !== prev) {
          if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
            if (!shallowCompare(next, prev)) {
              markToAnimate(key);
            } else {
              typeState.protectedKeys[key] = true;
            }
          } else if (next !== void 0) {
            markToAnimate(key);
          } else {
            removedKeys.add(key);
          }
        } else if (next !== void 0 && removedKeys.has(key)) {
          markToAnimate(key);
        } else {
          typeState.protectedKeys[key] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
      }
      if (isInitialRender && visualElement2.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && !isInherited) {
        animations2.push.apply(animations2, __spreadArray([], __read(definitionList.map(function(animation) {
          return {
            animation,
            options: __assign({type}, options)
          };
        }))));
      }
    };
    for (var i = 0; i < numAnimationTypes; i++) {
      _loop_1(i);
    }
    allAnimatedKeys = __assign({}, encounteredKeys);
    if (removedKeys.size) {
      var fallbackAnimation_1 = {};
      removedKeys.forEach(function(key) {
        var fallbackTarget = visualElement2.getBaseTarget(key);
        if (fallbackTarget !== void 0) {
          fallbackAnimation_1[key] = fallbackTarget;
        }
      });
      animations2.push({animation: fallbackAnimation_1});
    }
    var shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate3(animations2) : Promise.resolve();
  }
  function setActive(type, isActive, options) {
    var _a;
    if (state[type].isActive === isActive)
      return Promise.resolve();
    (_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {
      var _a2;
      return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
    });
    state[type].isActive = isActive;
    return animateChanges(options, type);
  }
  return {
    isAnimated,
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: function() {
      return state;
    }
  };
}
function variantsHaveChanged(prev, next) {
  if (typeof next === "string") {
    return next !== prev;
  } else if (isVariantLabels(next)) {
    return !shallowCompare(next, prev);
  }
  return false;
}
function createTypeState(isActive) {
  if (isActive === void 0) {
    isActive = false;
  }
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  var _a;
  return _a = {}, _a[AnimationType.Animate] = createTypeState(true), _a[AnimationType.Hover] = createTypeState(), _a[AnimationType.Tap] = createTypeState(), _a[AnimationType.Drag] = createTypeState(), _a[AnimationType.Focus] = createTypeState(), _a[AnimationType.Exit] = createTypeState(), _a;
}

// node_modules/framer-motion/dist/es/motion/features/animations.js
var animations = {
  animation: makeRenderlessComponent(function(_a) {
    var visualElement2 = _a.visualElement, animate3 = _a.animate;
    visualElement2.animationState || (visualElement2.animationState = createAnimationState(visualElement2));
    if (isAnimationControls(animate3)) {
      (0, import_react31.useEffect)(function() {
        return animate3.subscribe(visualElement2);
      }, [animate3]);
    }
  }),
  exit: makeRenderlessComponent(function(props) {
    var custom = props.custom, visualElement2 = props.visualElement;
    var _a = __read(usePresence(), 2), isPresent2 = _a[0], onExitComplete = _a[1];
    var presenceContext = (0, import_react31.useContext)(PresenceContext);
    (0, import_react31.useEffect)(function() {
      var _a2, _b;
      var animation = (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Exit, !isPresent2, {custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom});
      !isPresent2 && (animation === null || animation === void 0 ? void 0 : animation.then(onExitComplete));
    }, [isPresent2]);
  })
};

// node_modules/framer-motion/dist/es/gestures/drag/use-drag.js
var import_react32 = __toModule(require_react());

// node_modules/framer-motion/dist/es/gestures/PanSession.js
var PanSession2 = function() {
  function PanSession3(event, handlers, _a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.updatePoint = function() {
      if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
        return;
      var info2 = getPanInfo(_this.lastMoveEventInfo, _this.history);
      var isPanStarted = _this.startEvent !== null;
      var isDistancePastThreshold = distance(info2.offset, {x: 0, y: 0}) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      var point2 = info2.point;
      var timestamp2 = getFrameData().timestamp;
      _this.history.push(__assign(__assign({}, point2), {timestamp: timestamp2}));
      var _a2 = _this.handlers, onStart = _a2.onStart, onMove = _a2.onMove;
      if (!isPanStarted) {
        onStart && onStart(_this.lastMoveEvent, info2);
        _this.startEvent = _this.lastMoveEvent;
      }
      onMove && onMove(_this.lastMoveEvent, info2);
    };
    this.handlePointerMove = function(event2, info2) {
      _this.lastMoveEvent = event2;
      _this.lastMoveEventInfo = transformPoint(info2, _this.transformPagePoint);
      if (isMouseEvent(event2) && event2.buttons === 0) {
        _this.handlePointerUp(event2, info2);
        return;
      }
      es_default.update(_this.updatePoint, true);
    };
    this.handlePointerUp = function(event2, info2) {
      _this.end();
      var _a2 = _this.handlers, onEnd = _a2.onEnd, onSessionEnd = _a2.onSessionEnd;
      var panInfo = getPanInfo(transformPoint(info2, _this.transformPagePoint), _this.history);
      if (_this.startEvent && onEnd) {
        onEnd(event2, panInfo);
      }
      onSessionEnd && onSessionEnd(event2, panInfo);
    };
    if (isTouchEvent(event) && event.touches.length > 1)
      return;
    this.handlers = handlers;
    this.transformPagePoint = transformPagePoint;
    var info = extractEventInfo(event);
    var initialInfo = transformPoint(info, this.transformPagePoint);
    var point = initialInfo.point;
    var timestamp = getFrameData().timestamp;
    this.history = [__assign(__assign({}, point), {timestamp})];
    var onSessionStart = handlers.onSessionStart;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe2(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
  }
  PanSession3.prototype.updateHandlers = function(handlers) {
    this.handlers = handlers;
  };
  PanSession3.prototype.end = function() {
    this.removeListeners && this.removeListeners();
    cancelSync.update(this.updatePoint);
  };
  return PanSession3;
}();
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? {point: transformPagePoint(info.point)} : info;
}
function subtractPoint(a2, b2) {
  return {x: a2.x - b2.x, y: a2.y - b2.y};
}
function getPanInfo(_a, history) {
  var point = _a.point;
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity2(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity2(history, timeDelta) {
  if (history.length < 2) {
    return {x: 0, y: 0};
  }
  var i = history.length - 1;
  var timestampedPoint = null;
  var lastPoint = lastDevicePoint(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return {x: 0, y: 0};
  }
  var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time === 0) {
    return {x: 0, y: 0};
  }
  var currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time,
    y: (lastPoint.y - timestampedPoint.y) / time
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/framer-motion/dist/es/utils/noop.js
function noop3(any2) {
  return any2;
}

// node_modules/framer-motion/dist/es/utils/geometry/index.js
function convertBoundingBoxToAxisBox(_a) {
  var top2 = _a.top, left2 = _a.left, right2 = _a.right, bottom2 = _a.bottom;
  return {
    x: {min: left2, max: right2},
    y: {min: top2, max: bottom2}
  };
}
function convertAxisBoxToBoundingBox(_a) {
  var x = _a.x, y = _a.y;
  return {
    top: y.min,
    bottom: y.max,
    left: x.min,
    right: x.max
  };
}
function transformBoundingBox(_a, transformPoint2) {
  var top2 = _a.top, left2 = _a.left, bottom2 = _a.bottom, right2 = _a.right;
  if (transformPoint2 === void 0) {
    transformPoint2 = noop3;
  }
  var topLeft = transformPoint2({x: left2, y: top2});
  var bottomRight = transformPoint2({x: right2, y: bottom2});
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}
function axisBox() {
  return {x: {min: 0, max: 1}, y: {min: 0, max: 1}};
}
function copyAxisBox(box) {
  return {
    x: __assign({}, box.x),
    y: __assign({}, box.y)
  };
}
var zeroDelta = {
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
};
function delta() {
  return {
    x: __assign({}, zeroDelta),
    y: __assign({}, zeroDelta)
  };
}

// node_modules/framer-motion/dist/es/utils/each-axis.js
function eachAxis(handler) {
  return [handler("x"), handler("y")];
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js
function applyConstraints(point, _a, elastic) {
  var min = _a.min, max = _a.max;
  if (min !== void 0 && point < min) {
    point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);
  } else if (max !== void 0 && point > max) {
    point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);
  }
  return point;
}
function calcConstrainedMinPoint(point, length, progress3, constraints, elastic) {
  var min = point - length * progress3;
  return constraints ? applyConstraints(min, constraints, elastic) : min;
}
function calcRelativeAxisConstraints(axis, min, max) {
  return {
    min: min !== void 0 ? axis.min + min : void 0,
    max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, _a) {
  var top2 = _a.top, left2 = _a.left, bottom2 = _a.bottom, right2 = _a.right;
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left2, right2),
    y: calcRelativeAxisConstraints(layoutBox.y, top2, bottom2)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  var _a;
  var min = constraintsAxis.min - layoutAxis.min;
  var max = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    _a = __read([max, min], 2), min = _a[0], max = _a[1];
  }
  return {
    min: layoutAxis.min + min,
    max: layoutAxis.min + max
  };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcPositionFromProgress(axis, constraints, progress3) {
  var axisLength = axis.max - axis.min;
  var min = mix(constraints.min, constraints.max - axisLength, progress3);
  return {min, max: min + axisLength};
}
function rebaseAxisConstraints(layout2, constraints) {
  var relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout2.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout2.min;
  }
  return relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  var _a;
  return typeof dragElastic === "number" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;
}

// node_modules/framer-motion/dist/es/render/dom/projection/measure.js
function getBoundingBox(element, transformPagePoint) {
  var box = element.getBoundingClientRect();
  return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));
}

// node_modules/framer-motion/dist/es/utils/geometry/delta-calc.js
var clampProgress = function(v) {
  return clamp2(0, 1, v);
};
function isNear(value, target, maxDistance) {
  if (target === void 0) {
    target = 0;
  }
  if (maxDistance === void 0) {
    maxDistance = 0.01;
  }
  return distance(value, target) < maxDistance;
}
function calcLength(axis) {
  return axis.max - axis.min;
}
function calcOrigin2(source, target) {
  var origin = 0.5;
  var sourceLength = calcLength(source);
  var targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min);
  }
  return clampProgress(origin);
}
function updateAxisDelta(delta2, source, target, origin) {
  if (origin === void 0) {
    origin = 0.5;
  }
  delta2.origin = origin;
  delta2.originPoint = mix(source.min, source.max, delta2.origin);
  delta2.scale = calcLength(target) / calcLength(source);
  if (isNear(delta2.scale, 1, 1e-4))
    delta2.scale = 1;
  delta2.translate = mix(target.min, target.max, delta2.origin) - delta2.originPoint;
  if (isNear(delta2.translate))
    delta2.translate = 0;
}
function updateBoxDelta(delta2, source, target, origin) {
  updateAxisDelta(delta2.x, source.x, target.x, defaultOrigin(origin.originX));
  updateAxisDelta(delta2.y, source.y, target.y, defaultOrigin(origin.originY));
}
function defaultOrigin(origin) {
  return typeof origin === "number" ? origin : 0.5;
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(projection, parentProjection) {
  calcRelativeAxis(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);
  calcRelativeAxis(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);
}

// node_modules/framer-motion/dist/es/render/utils/compare-by-depth.js
var compareByDepth = function(a2, b2) {
  return a2.depth - b2.depth;
};

// node_modules/framer-motion/dist/es/render/dom/projection/utils.js
function isProjecting(visualElement2) {
  var isEnabled = visualElement2.projection.isEnabled;
  return isEnabled || visualElement2.shouldResetTransform();
}
function collectProjectingAncestors(visualElement2, ancestors) {
  if (ancestors === void 0) {
    ancestors = [];
  }
  var parent = visualElement2.parent;
  if (parent)
    collectProjectingAncestors(parent, ancestors);
  if (isProjecting(visualElement2))
    ancestors.push(visualElement2);
  return ancestors;
}
function collectProjectingChildren(visualElement2) {
  var children = [];
  var addChild = function(child) {
    if (isProjecting(child))
      children.push(child);
    child.children.forEach(addChild);
  };
  visualElement2.children.forEach(addChild);
  return children.sort(compareByDepth);
}
function updateLayoutMeasurement(visualElement2) {
  if (visualElement2.shouldResetTransform())
    return;
  var layoutState2 = visualElement2.getLayoutState();
  visualElement2.notifyBeforeLayoutMeasure(layoutState2.layout);
  layoutState2.isHydrated = true;
  layoutState2.layout = visualElement2.measureViewportBox();
  layoutState2.layoutCorrected = copyAxisBox(layoutState2.layout);
  visualElement2.notifyLayoutMeasure(layoutState2.layout, visualElement2.prevViewportBox || layoutState2.layout);
  es_default.update(function() {
    return visualElement2.rebaseProjectionTarget();
  });
}
function snapshotViewportBox(visualElement2) {
  if (visualElement2.shouldResetTransform())
    return;
  visualElement2.prevViewportBox = visualElement2.measureViewportBox(false);
  visualElement2.rebaseProjectionTarget(false, visualElement2.prevViewportBox);
}

// node_modules/framer-motion/dist/es/motion/features/layout/utils.js
function tweenAxis(target, prev, next, p) {
  target.min = mix(prev.min, next.min, p);
  target.max = mix(prev.max, next.max, p);
}
function calcRelativeOffsetAxis(parent, child) {
  return {
    min: child.min - parent.min,
    max: child.max - parent.min
  };
}
function calcRelativeOffset(parent, child) {
  return {
    x: calcRelativeOffsetAxis(parent.x, child.x),
    y: calcRelativeOffsetAxis(parent.y, child.y)
  };
}
function checkIfParentHasChanged(prev, next) {
  var prevId = prev.getLayoutId();
  var nextId = next.getLayoutId();
  return prevId !== nextId || nextId === void 0 && prev !== next;
}

// node_modules/framer-motion/dist/es/render/utils/is-draggable.js
function isDraggable(visualElement2) {
  var _a = visualElement2.getProps(), drag2 = _a.drag, _dragX = _a._dragX;
  return drag2 && !_dragX;
}

// node_modules/framer-motion/dist/es/utils/geometry/delta-apply.js
function resetAxis(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function resetBox(box, originBox) {
  resetAxis(box.x, originBox.x);
  resetAxis(box.y, originBox.y);
}
function scalePoint(point, scale3, originPoint) {
  var distanceFromOrigin = point - originPoint;
  var scaled = scale3 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale3, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale3, originPoint) + translate;
}
function applyAxisDelta(axis, translate, scale3, originPoint, boxScale) {
  if (translate === void 0) {
    translate = 0;
  }
  if (scale3 === void 0) {
    scale3 = 1;
  }
  axis.min = applyPointDelta(axis.min, translate, scale3, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale3, originPoint, boxScale);
}
function applyBoxDelta(box, _a) {
  var x = _a.x, y = _a.y;
  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
function applyAxisTransforms(final, axis, transforms2, _a) {
  var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
  final.min = axis.min;
  final.max = axis.max;
  var axisOrigin = transforms2[originKey] !== void 0 ? transforms2[originKey] : 0.5;
  var originPoint = mix(axis.min, axis.max, axisOrigin);
  applyAxisDelta(final, transforms2[key], transforms2[scaleKey], originPoint, transforms2.scale);
}
var xKeys = ["x", "scaleX", "originX"];
var yKeys = ["y", "scaleY", "originY"];
function applyBoxTransforms(finalBox, box, transforms2) {
  applyAxisTransforms(finalBox.x, box.x, transforms2, xKeys);
  applyAxisTransforms(finalBox.y, box.y, transforms2, yKeys);
}
function removePointDelta(point, translate, scale3, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale3, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate, scale3, origin, boxScale) {
  if (translate === void 0) {
    translate = 0;
  }
  if (scale3 === void 0) {
    scale3 = 1;
  }
  if (origin === void 0) {
    origin = 0.5;
  }
  var originPoint = mix(axis.min, axis.max, origin) - translate;
  axis.min = removePointDelta(axis.min, translate, scale3, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale3, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms2, _a) {
  var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
  removeAxisDelta(axis, transforms2[key], transforms2[scaleKey], transforms2[originKey], transforms2.scale);
}
function removeBoxTransforms(box, transforms2) {
  removeAxisTransforms(box.x, transforms2, xKeys);
  removeAxisTransforms(box.y, transforms2, yKeys);
}
function applyTreeDeltas(box, treeScale, treePath) {
  var treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  var node2;
  var delta2;
  for (var i = 0; i < treeLength; i++) {
    node2 = treePath[i];
    delta2 = node2.getLayoutState().delta;
    treeScale.x *= delta2.x.scale;
    treeScale.y *= delta2.y.scale;
    applyBoxDelta(box, delta2);
    if (isDraggable(node2)) {
      applyBoxTransforms(box, box, node2.getLatestValues());
    }
  }
}

// node_modules/framer-motion/dist/es/render/dom/projection/convert-to-relative.js
function convertToRelativeProjection(visualElement2, isLayoutDrag) {
  if (isLayoutDrag === void 0) {
    isLayoutDrag = true;
  }
  var projectionParent = visualElement2.getProjectionParent();
  if (!projectionParent)
    return false;
  var offset2;
  if (isLayoutDrag) {
    offset2 = calcRelativeOffset(projectionParent.projection.target, visualElement2.projection.target);
    removeBoxTransforms(offset2, projectionParent.getLatestValues());
  } else {
    offset2 = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement2.getLayoutState().layout);
  }
  eachAxis(function(axis) {
    return visualElement2.setProjectionTargetAxis(axis, offset2[axis].min, offset2[axis].max, true);
  });
  return true;
}

// node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js
var elementDragControls = new WeakMap();
var lastPointerEvent;
var VisualElementDragControls = function() {
  function VisualElementDragControls2(_a) {
    var visualElement2 = _a.visualElement;
    this.isDragging = false;
    this.currentDirection = null;
    this.constraints = false;
    this.elastic = axisBox();
    this.props = {};
    this.hasMutatedConstraints = false;
    this.cursorProgress = {
      x: 0.5,
      y: 0.5
    };
    this.originPoint = {};
    this.openGlobalLock = null;
    this.panSession = null;
    this.visualElement = visualElement2;
    this.visualElement.enableLayoutProjection();
    elementDragControls.set(visualElement2, this);
  }
  VisualElementDragControls2.prototype.start = function(originEvent, _a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;
    var onSessionStart = function(event) {
      var _a2;
      _this.stopMotion();
      var initialPoint = getViewportPointFromEvent(event).point;
      (_a2 = _this.cancelLayout) === null || _a2 === void 0 ? void 0 : _a2.call(_this);
      _this.cancelLayout = batchLayout(function(read2, write2) {
        var ancestors = collectProjectingAncestors(_this.visualElement);
        var children = collectProjectingChildren(_this.visualElement);
        var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));
        var hasManuallySetCursorOrigin = false;
        _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();
        write2(function() {
          tree.forEach(function(element) {
            return element.resetTransform();
          });
        });
        read2(function() {
          updateLayoutMeasurement(_this.visualElement);
          children.forEach(updateLayoutMeasurement);
        });
        write2(function() {
          tree.forEach(function(element) {
            return element.restoreTransform();
          });
          if (snapToCursor) {
            hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);
          }
        });
        read2(function() {
          var isRelativeDrag = Boolean(_this.getAxisMotionValue("x") && !_this.isExternalDrag());
          if (!isRelativeDrag) {
            _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));
          }
          _this.visualElement.scheduleUpdateLayoutProjection();
          var projection = _this.visualElement.projection;
          eachAxis(function(axis) {
            if (!hasManuallySetCursorOrigin) {
              var _a3 = projection.target[axis], min = _a3.min, max = _a3.max;
              _this.cursorProgress[axis] = cursorProgress ? cursorProgress[axis] : progress(min, max, initialPoint[axis]);
            }
            var axisValue = _this.getAxisMotionValue(axis);
            if (axisValue) {
              _this.originPoint[axis] = axisValue.get();
            }
          });
        });
        write2(function() {
          flushSync.update();
          flushSync.preRender();
          flushSync.render();
          flushSync.postRender();
        });
        read2(function() {
          return _this.resolveDragConstraints();
        });
      });
    };
    var onStart = function(event, info) {
      var _a2, _b2, _c2;
      var _d = _this.props, drag2 = _d.drag, dragPropagation = _d.dragPropagation;
      if (drag2 && !dragPropagation) {
        if (_this.openGlobalLock)
          _this.openGlobalLock();
        _this.openGlobalLock = getGlobalLock(drag2);
        if (!_this.openGlobalLock)
          return;
      }
      flushLayout();
      _this.isDragging = true;
      _this.currentDirection = null;
      (_b2 = (_a2 = _this.props).onDragStart) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, event, info);
      (_c2 = _this.visualElement.animationState) === null || _c2 === void 0 ? void 0 : _c2.setActive(AnimationType.Drag, true);
    };
    var onMove = function(event, info) {
      var _a2, _b2, _c2, _d;
      var _e = _this.props, dragPropagation = _e.dragPropagation, dragDirectionLock = _e.dragDirectionLock;
      if (!dragPropagation && !_this.openGlobalLock)
        return;
      var offset2 = info.offset;
      if (dragDirectionLock && _this.currentDirection === null) {
        _this.currentDirection = getCurrentDirection(offset2);
        if (_this.currentDirection !== null) {
          (_b2 = (_a2 = _this.props).onDirectionLock) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, _this.currentDirection);
        }
        return;
      }
      _this.updateAxis("x", info.point, offset2);
      _this.updateAxis("y", info.point, offset2);
      (_d = (_c2 = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c2, event, info);
      lastPointerEvent = event;
    };
    var onSessionEnd = function(event, info) {
      return _this.stop(event, info);
    };
    var transformPagePoint = this.props.transformPagePoint;
    this.panSession = new PanSession2(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd
    }, {transformPagePoint});
  };
  VisualElementDragControls2.prototype.resolveDragConstraints = function() {
    var _this = this;
    var _a = this.props, dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;
    var layout2 = this.visualElement.getLayoutState().layoutCorrected;
    if (dragConstraints) {
      this.constraints = isRefObject2(dragConstraints) ? this.resolveRefConstraints(layout2, dragConstraints) : calcRelativeConstraints(layout2, dragConstraints);
    } else {
      this.constraints = false;
    }
    this.elastic = resolveDragElastic(dragElastic);
    if (this.constraints && !this.hasMutatedConstraints) {
      eachAxis(function(axis) {
        if (_this.getAxisMotionValue(axis)) {
          _this.constraints[axis] = rebaseAxisConstraints(layout2[axis], _this.constraints[axis]);
        }
      });
    }
  };
  VisualElementDragControls2.prototype.resolveRefConstraints = function(layoutBox, constraints) {
    var _a = this.props, onMeasureDragConstraints = _a.onMeasureDragConstraints, transformPagePoint = _a.transformPagePoint;
    var constraintsElement = constraints.current;
    invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);
    var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);
    if (onMeasureDragConstraints) {
      var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);
      }
    }
    return measuredConstraints;
  };
  VisualElementDragControls2.prototype.cancelDrag = function() {
    var _a, _b;
    this.visualElement.unlockProjectionTarget();
    (_a = this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(this);
    this.isDragging = false;
    this.panSession && this.panSession.end();
    this.panSession = null;
    if (!this.props.dragPropagation && this.openGlobalLock) {
      this.openGlobalLock();
      this.openGlobalLock = null;
    }
    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);
  };
  VisualElementDragControls2.prototype.stop = function(event, info) {
    var _a, _b, _c;
    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();
    this.panSession = null;
    var isDragging = this.isDragging;
    this.cancelDrag();
    if (!isDragging)
      return;
    var velocity = info.velocity;
    this.animateDragEnd(velocity);
    (_c = (_b = this.props).onDragEnd) === null || _c === void 0 ? void 0 : _c.call(_b, event, info);
  };
  VisualElementDragControls2.prototype.snapToCursor = function(point) {
    var _this = this;
    return eachAxis(function(axis) {
      var drag2 = _this.props.drag;
      if (!shouldDrag(axis, drag2, _this.currentDirection))
        return;
      var axisValue = _this.getAxisMotionValue(axis);
      if (axisValue) {
        var box = _this.visualElement.getLayoutState().layout;
        var length_1 = box[axis].max - box[axis].min;
        var center = box[axis].min + length_1 / 2;
        var offset2 = point[axis] - center;
        _this.originPoint[axis] = point[axis];
        axisValue.set(offset2);
      } else {
        _this.cursorProgress[axis] = 0.5;
        return true;
      }
    }).includes(true);
  };
  VisualElementDragControls2.prototype.updateAxis = function(axis, point, offset2) {
    var drag2 = this.props.drag;
    if (!shouldDrag(axis, drag2, this.currentDirection))
      return;
    return this.getAxisMotionValue(axis) ? this.updateAxisMotionValue(axis, offset2) : this.updateVisualElementAxis(axis, point);
  };
  VisualElementDragControls2.prototype.updateAxisMotionValue = function(axis, offset2) {
    var axisValue = this.getAxisMotionValue(axis);
    if (!offset2 || !axisValue)
      return;
    var nextValue = this.originPoint[axis] + offset2[axis];
    var update = this.constraints ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis]) : nextValue;
    axisValue.set(update);
  };
  VisualElementDragControls2.prototype.updateVisualElementAxis = function(axis, point) {
    var _a;
    var axisLayout = this.visualElement.getLayoutState().layout[axis];
    var axisLength = axisLayout.max - axisLayout.min;
    var axisProgress = this.cursorProgress[axis];
    var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]);
    this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);
  };
  VisualElementDragControls2.prototype.setProps = function(_a) {
    var _b = _a.drag, drag2 = _b === void 0 ? false : _b, _c = _a.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e = _a.dragConstraints, dragConstraints = _e === void 0 ? false : _e, _f = _a.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = __rest(_a, ["drag", "dragDirectionLock", "dragPropagation", "dragConstraints", "dragElastic", "dragMomentum"]);
    this.props = __assign({
      drag: drag2,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum
    }, remainingProps);
  };
  VisualElementDragControls2.prototype.getAxisMotionValue = function(axis) {
    var _a = this.props, layout2 = _a.layout, layoutId = _a.layoutId;
    var dragKey = "_drag" + axis.toUpperCase();
    if (this.props[dragKey]) {
      return this.props[dragKey];
    } else if (!layout2 && layoutId === void 0) {
      return this.visualElement.getValue(axis, 0);
    }
  };
  VisualElementDragControls2.prototype.isLayoutDrag = function() {
    return !this.getAxisMotionValue("x");
  };
  VisualElementDragControls2.prototype.isExternalDrag = function() {
    var _a = this.props, _dragX = _a._dragX, _dragY = _a._dragY;
    return _dragX || _dragY;
  };
  VisualElementDragControls2.prototype.animateDragEnd = function(velocity) {
    var _this = this;
    var _a = this.props, drag2 = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition;
    var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());
    var constraints = this.constraints || {};
    if (isRelative && Object.keys(constraints).length && this.isLayoutDrag()) {
      var projectionParent = this.visualElement.getProjectionParent();
      if (projectionParent) {
        var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);
        eachAxis(function(axis) {
          var _a2 = relativeConstraints_1[axis], min = _a2.min, max = _a2.max;
          constraints[axis] = {
            min: isNaN(min) ? void 0 : min,
            max: isNaN(max) ? void 0 : max
          };
        });
      }
    }
    var momentumAnimations = eachAxis(function(axis) {
      var _a2;
      if (!shouldDrag(axis, drag2, _this.currentDirection)) {
        return;
      }
      var transition3 = (_a2 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a2 !== void 0 ? _a2 : {};
      var bounceStiffness = dragElastic ? 200 : 1e6;
      var bounceDamping = dragElastic ? 40 : 1e7;
      var inertia2 = __assign(__assign({
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10
      }, dragTransition), transition3);
      return _this.getAxisMotionValue(axis) ? _this.startAxisValueAnimation(axis, inertia2) : _this.visualElement.startLayoutAnimation(axis, inertia2, isRelative);
    });
    return Promise.all(momentumAnimations).then(function() {
      var _a2, _b;
      (_b = (_a2 = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a2);
    });
  };
  VisualElementDragControls2.prototype.stopMotion = function() {
    var _this = this;
    eachAxis(function(axis) {
      var axisValue = _this.getAxisMotionValue(axis);
      axisValue ? axisValue.stop() : _this.visualElement.stopLayoutAnimation();
    });
  };
  VisualElementDragControls2.prototype.startAxisValueAnimation = function(axis, transition3) {
    var axisValue = this.getAxisMotionValue(axis);
    if (!axisValue)
      return;
    var currentValue = axisValue.get();
    axisValue.set(currentValue);
    axisValue.set(currentValue);
    return startAnimation(axis, axisValue, 0, transition3);
  };
  VisualElementDragControls2.prototype.scalePoint = function() {
    var _this = this;
    var _a = this.props, drag2 = _a.drag, dragConstraints = _a.dragConstraints;
    if (!isRefObject2(dragConstraints) || !this.constraintsBox)
      return;
    this.stopMotion();
    var boxProgress = {x: 0, y: 0};
    eachAxis(function(axis) {
      boxProgress[axis] = calcOrigin2(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);
    });
    this.updateConstraints(function() {
      eachAxis(function(axis) {
        if (!shouldDrag(axis, drag2, null))
          return;
        var _a2 = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a2.min, max = _a2.max;
        _this.visualElement.setProjectionTargetAxis(axis, min, max);
      });
    });
    setTimeout(flushLayout, 1);
  };
  VisualElementDragControls2.prototype.updateConstraints = function(onReady) {
    var _this = this;
    this.cancelLayout = batchLayout(function(read2, write2) {
      var ancestors = collectProjectingAncestors(_this.visualElement);
      write2(function() {
        return ancestors.forEach(function(element) {
          return element.resetTransform();
        });
      });
      read2(function() {
        return updateLayoutMeasurement(_this.visualElement);
      });
      write2(function() {
        return ancestors.forEach(function(element) {
          return element.restoreTransform();
        });
      });
      read2(function() {
        _this.resolveDragConstraints();
      });
      if (onReady)
        write2(onReady);
    });
  };
  VisualElementDragControls2.prototype.mount = function(visualElement2) {
    var _this = this;
    var element = visualElement2.getInstance();
    var stopPointerListener = addPointerEvent(element, "pointerdown", function(event) {
      var _a = _this.props, drag2 = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;
      drag2 && dragListener && _this.start(event);
    });
    var stopResizeListener = addDomEvent(window, "resize", function() {
      _this.scalePoint();
    });
    var stopLayoutUpdateListener = visualElement2.onLayoutUpdate(function() {
      if (_this.isDragging) {
        _this.resolveDragConstraints();
      }
    });
    var prevDragCursor = visualElement2.prevDragCursor;
    if (prevDragCursor) {
      this.start(lastPointerEvent, {cursorProgress: prevDragCursor});
    }
    return function() {
      stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();
      stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();
      stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();
      _this.cancelDrag();
    };
  };
  return VisualElementDragControls2;
}();
function shouldDrag(direction2, drag2, currentDirection) {
  return (drag2 === true || drag2 === direction2) && (currentDirection === null || currentDirection === direction2);
}
function getCurrentDirection(offset2, lockThreshold) {
  if (lockThreshold === void 0) {
    lockThreshold = 10;
  }
  var direction2 = null;
  if (Math.abs(offset2.y) > lockThreshold) {
    direction2 = "y";
  } else if (Math.abs(offset2.x) > lockThreshold) {
    direction2 = "x";
  }
  return direction2;
}

// node_modules/framer-motion/dist/es/gestures/drag/use-drag.js
function useDrag(props) {
  var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
  var transformPagePoint = (0, import_react32.useContext)(MotionConfigContext).transformPagePoint;
  var dragControls = useConstant(function() {
    return new VisualElementDragControls({
      visualElement: visualElement2
    });
  });
  dragControls.setProps(__assign(__assign({}, props), {transformPagePoint}));
  (0, import_react32.useEffect)(function() {
    return groupDragControls && groupDragControls.subscribe(dragControls);
  }, [dragControls]);
  (0, import_react32.useEffect)(function() {
    return dragControls.mount(visualElement2);
  }, []);
}

// node_modules/framer-motion/dist/es/gestures/use-pan-gesture.js
var import_react33 = __toModule(require_react());
function usePanGesture2(_a) {
  var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement2 = _a.visualElement;
  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;
  var panSession = (0, import_react33.useRef)(null);
  var transformPagePoint = (0, import_react33.useContext)(MotionConfigContext).transformPagePoint;
  var handlers = {
    onSessionStart: onPanSessionStart,
    onStart: onPanStart,
    onMove: onPan,
    onEnd: function(event, info) {
      panSession.current = null;
      onPanEnd && onPanEnd(event, info);
    }
  };
  (0, import_react33.useEffect)(function() {
    if (panSession.current !== null) {
      panSession.current.updateHandlers(handlers);
    }
  });
  function onPointerDown(event) {
    panSession.current = new PanSession2(event, handlers, {
      transformPagePoint
    });
  }
  usePointerEvent2(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
  useUnmountEffect2(function() {
    return panSession.current && panSession.current.end();
  });
}

// node_modules/framer-motion/dist/es/motion/features/drag.js
var drag = {
  pan: makeRenderlessComponent(usePanGesture2),
  drag: makeRenderlessComponent(useDrag)
};

// node_modules/framer-motion/dist/es/motion/features/layout/Animate.js
var React27 = __toModule(require_react());

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout/types.js
var Presence;
(function(Presence2) {
  Presence2[Presence2["Entering"] = 0] = "Entering";
  Presence2[Presence2["Present"] = 1] = "Present";
  Presence2[Presence2["Exiting"] = 2] = "Exiting";
})(Presence || (Presence = {}));
var VisibilityAction;
(function(VisibilityAction2) {
  VisibilityAction2[VisibilityAction2["Hide"] = 0] = "Hide";
  VisibilityAction2[VisibilityAction2["Show"] = 1] = "Show";
})(VisibilityAction || (VisibilityAction = {}));

// node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js
function isCSSVariable2(value) {
  return typeof value === "string" && value.startsWith("var(--");
}
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
  var match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  var _a = __read(match, 3), token = _a[1], fallback = _a[2];
  return [token, fallback];
}
var maxDepth = 4;
function getVariableValue(current, element, depth) {
  if (depth === void 0) {
    depth = 1;
  }
  invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property "' + current + '". This may indicate a circular fallback dependency.');
  var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];
  if (!token)
    return;
  var resolved = window.getComputedStyle(element).getPropertyValue(token);
  if (resolved) {
    return resolved.trim();
  } else if (isCSSVariable2(fallback)) {
    return getVariableValue(fallback, element, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables(visualElement2, _a, transitionEnd) {
  var _b;
  var target = __rest(_a, []);
  var element = visualElement2.getInstance();
  if (!(element instanceof HTMLElement))
    return {target, transitionEnd};
  if (transitionEnd) {
    transitionEnd = __assign({}, transitionEnd);
  }
  visualElement2.forEachValue(function(value) {
    var current2 = value.get();
    if (!isCSSVariable2(current2))
      return;
    var resolved2 = getVariableValue(current2, element);
    if (resolved2)
      value.set(resolved2);
  });
  for (var key in target) {
    var current = target[key];
    if (!isCSSVariable2(current))
      continue;
    var resolved = getVariableValue(current, element);
    if (!resolved)
      continue;
    target[key] = resolved;
    if (transitionEnd)
      (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;
  }
  return {target, transitionEnd};
}

// node_modules/framer-motion/dist/es/render/dom/projection/default-scale-correctors.js
function pixelsToPercent(pixels, axis) {
  return pixels / (axis.max - axis.min) * 100;
}
function correctBorderRadius(latest, _layoutState, _a) {
  var target = _a.target;
  if (typeof latest === "string") {
    if (px2.test(latest)) {
      latest = parseFloat(latest);
    } else {
      return latest;
    }
  }
  var x = pixelsToPercent(latest, target.x);
  var y = pixelsToPercent(latest, target.y);
  return x + "% " + y + "%";
}
var varToken = "_$css";
function correctBoxShadow(latest, _a) {
  var delta2 = _a.delta, treeScale = _a.treeScale;
  var original = latest;
  var containsCSSVariables = latest.includes("var(");
  var cssVariables = [];
  if (containsCSSVariables) {
    latest = latest.replace(cssVariableRegex, function(match) {
      cssVariables.push(match);
      return varToken;
    });
  }
  var shadow2 = complex.parse(latest);
  if (shadow2.length > 5)
    return original;
  var template = complex.createTransformer(latest);
  var offset2 = typeof shadow2[0] !== "number" ? 1 : 0;
  var xScale = delta2.x.scale * treeScale.x;
  var yScale = delta2.y.scale * treeScale.y;
  shadow2[0 + offset2] /= xScale;
  shadow2[1 + offset2] /= yScale;
  var averageScale = mix(xScale, yScale, 0.5);
  if (typeof shadow2[2 + offset2] === "number")
    shadow2[2 + offset2] /= averageScale;
  if (typeof shadow2[3 + offset2] === "number")
    shadow2[3 + offset2] /= averageScale;
  var output = template(shadow2);
  if (containsCSSVariables) {
    var i_1 = 0;
    output = output.replace(varToken, function() {
      var cssVariable = cssVariables[i_1];
      i_1++;
      return cssVariable;
    });
  }
  return output;
}
var borderCorrectionDefinition = {
  process: correctBorderRadius
};
var defaultScaleCorrectors = {
  borderRadius: __assign(__assign({}, borderCorrectionDefinition), {applyTo: [
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ]}),
  borderTopLeftRadius: borderCorrectionDefinition,
  borderTopRightRadius: borderCorrectionDefinition,
  borderBottomLeftRadius: borderCorrectionDefinition,
  borderBottomRightRadius: borderCorrectionDefinition,
  boxShadow: {
    process: correctBoxShadow
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/Animate.js
var progressTarget = 1e3;
var Animate = function(_super) {
  __extends(Animate2, _super);
  function Animate2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.frameTarget = axisBox();
    _this.currentAnimationTarget = axisBox();
    _this.isAnimating = {
      x: false,
      y: false
    };
    _this.stopAxisAnimation = {
      x: void 0,
      y: void 0
    };
    _this.isAnimatingTree = false;
    _this.animate = function(target, origin, _a) {
      if (_a === void 0) {
        _a = {};
      }
      var originBox = _a.originBox, targetBox = _a.targetBox, visibilityAction = _a.visibilityAction, shouldStackAnimate = _a.shouldStackAnimate, onComplete = _a.onComplete, prevParent = _a.prevParent, config2 = __rest(_a, ["originBox", "targetBox", "visibilityAction", "shouldStackAnimate", "onComplete", "prevParent"]);
      var _b = _this.props, visualElement2 = _b.visualElement, layout2 = _b.layout;
      if (shouldStackAnimate === false) {
        _this.isAnimatingTree = false;
        return _this.safeToRemove();
      }
      if (_this.isAnimatingTree && shouldStackAnimate !== true) {
        return;
      } else if (shouldStackAnimate) {
        _this.isAnimatingTree = true;
      }
      origin = originBox || origin;
      target = targetBox || target;
      var isRelative = false;
      var projectionParent = visualElement2.getProjectionParent();
      if (projectionParent) {
        var prevParentViewportBox = projectionParent.prevViewportBox;
        var parentLayout = projectionParent.getLayoutState().layout;
        if (prevParent) {
          if (targetBox) {
            parentLayout = prevParent.getLayoutState().layout;
          }
          if (originBox && !checkIfParentHasChanged(prevParent, projectionParent) && prevParent.prevViewportBox) {
            prevParentViewportBox = prevParent.prevViewportBox;
          }
        }
        if (prevParentViewportBox && isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {
          isRelative = true;
          origin = calcRelativeOffset(prevParentViewportBox, origin);
          target = calcRelativeOffset(parentLayout, target);
        }
      }
      var boxHasMoved = hasMoved(origin, target);
      var animations2 = eachAxis(function(axis) {
        var _a2, _b2;
        if (layout2 === "position") {
          var targetLength = target[axis].max - target[axis].min;
          origin[axis].max = origin[axis].min + targetLength;
        }
        if (visualElement2.projection.isTargetLocked) {
          return;
        } else if (visibilityAction !== void 0) {
          visualElement2.setVisibility(visibilityAction === VisibilityAction.Show);
        } else if (boxHasMoved) {
          return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config2), {isRelative}));
        } else {
          (_b2 = (_a2 = _this.stopAxisAnimation)[axis]) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
          return visualElement2.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);
        }
      });
      visualElement2.syncRender();
      return Promise.all(animations2).then(function() {
        _this.isAnimatingTree = false;
        onComplete && onComplete();
        visualElement2.notifyLayoutAnimationComplete();
      });
    };
    return _this;
  }
  Animate2.prototype.componentDidMount = function() {
    var _this = this;
    var visualElement2 = this.props.visualElement;
    visualElement2.animateMotionValue = startAnimation;
    visualElement2.enableLayoutProjection();
    this.unsubLayoutReady = visualElement2.onLayoutUpdate(this.animate);
    visualElement2.layoutSafeToRemove = function() {
      return _this.safeToRemove();
    };
    addScaleCorrection(defaultScaleCorrectors);
  };
  Animate2.prototype.componentWillUnmount = function() {
    var _this = this;
    this.unsubLayoutReady();
    eachAxis(function(axis) {
      var _a, _b;
      return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);
    });
  };
  Animate2.prototype.animateAxis = function(axis, target, origin, _a) {
    var _this = this;
    var _b, _c;
    var _d = _a === void 0 ? {} : _a, transition3 = _d.transition, isRelative = _d.isRelative;
    if (this.isAnimating[axis] && axisIsEqual(target, this.currentAnimationTarget[axis])) {
      return;
    }
    (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);
    this.isAnimating[axis] = true;
    var visualElement2 = this.props.visualElement;
    var frameTarget = this.frameTarget[axis];
    var layoutProgress = visualElement2.getProjectionAnimationProgress()[axis];
    layoutProgress.clearListeners();
    layoutProgress.set(0);
    layoutProgress.set(0);
    var frame = function() {
      var p = layoutProgress.get() / progressTarget;
      tweenAxis(frameTarget, origin, target, p);
      visualElement2.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);
    };
    frame();
    var unsubscribeProgress = layoutProgress.onChange(frame);
    this.stopAxisAnimation[axis] = function() {
      _this.isAnimating[axis] = false;
      layoutProgress.stop();
      unsubscribeProgress();
    };
    this.currentAnimationTarget[axis] = target;
    var layoutTransition = transition3 || visualElement2.getDefaultTransition() || defaultLayoutTransition;
    var animation = startAnimation(axis === "x" ? "layoutX" : "layoutY", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, "layout")).then(this.stopAxisAnimation[axis]);
    return animation;
  };
  Animate2.prototype.safeToRemove = function() {
    var _a, _b;
    (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  Animate2.prototype.render = function() {
    return null;
  };
  return Animate2;
}(React27.Component);
function AnimateLayoutContextProvider(props) {
  var _a = __read(usePresence(), 2), safeToRemove = _a[1];
  return React27.createElement(Animate, __assign({}, props, {safeToRemove}));
}
function hasMoved(a2, b2) {
  return !isZeroBox(a2) && !isZeroBox(b2) && (!axisIsEqual(a2.x, b2.x) || !axisIsEqual(a2.y, b2.y));
}
var zeroAxis = {min: 0, max: 0};
function isZeroBox(a2) {
  return axisIsEqual(a2.x, zeroAxis) && axisIsEqual(a2.y, zeroAxis);
}
function axisIsEqual(a2, b2) {
  return a2.min === b2.min && a2.max === b2.max;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
function isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {
  return prevParent || !prevParent && !(originBox || targetBox);
}

// node_modules/framer-motion/dist/es/motion/features/layout/Measure.js
var import_react35 = __toModule(require_react());

// node_modules/framer-motion/dist/es/context/SharedLayoutContext.js
var import_react34 = __toModule(require_react());

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/batcher.js
var defaultHandler = {
  layoutReady: function(child) {
    return child.notifyLayoutReady();
  }
};
function createBatcher() {
  var queue = new Set();
  return {
    add: function(child) {
      return queue.add(child);
    },
    flush: function(_a) {
      var _b = _a === void 0 ? defaultHandler : _a, layoutReady = _b.layoutReady, parent = _b.parent;
      batchLayout(function(read2, write2) {
        var order3 = Array.from(queue).sort(compareByDepth);
        var ancestors = parent ? collectProjectingAncestors(parent) : [];
        write2(function() {
          var allElements = __spreadArray(__spreadArray([], __read(ancestors)), __read(order3));
          allElements.forEach(function(element) {
            return element.resetTransform();
          });
        });
        read2(function() {
          order3.forEach(updateLayoutMeasurement);
        });
        write2(function() {
          ancestors.forEach(function(element) {
            return element.restoreTransform();
          });
          order3.forEach(layoutReady);
        });
        read2(function() {
          order3.forEach(function(child) {
            if (child.isPresent)
              child.presence = Presence.Present;
          });
        });
        write2(function() {
          flushSync.preRender();
          flushSync.render();
        });
        read2(function() {
          es_default.postRender(function() {
            return order3.forEach(assignProjectionToSnapshot);
          });
          queue.clear();
        });
      });
      flushLayout();
    }
  };
}
function assignProjectionToSnapshot(child) {
  child.prevViewportBox = child.projection.target;
}

// node_modules/framer-motion/dist/es/context/SharedLayoutContext.js
var SharedLayoutContext = (0, import_react34.createContext)(createBatcher());
var FramerTreeLayoutContext = (0, import_react34.createContext)(createBatcher());
function isSharedLayout(context) {
  return !!context.forceUpdate;
}

// node_modules/framer-motion/dist/es/motion/features/layout/Measure.js
var Measure = function(_super) {
  __extends(Measure2, _super);
  function Measure2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Measure2.prototype.componentDidMount = function() {
    var _a = this.props, syncLayout = _a.syncLayout, framerSyncLayout = _a.framerSyncLayout, visualElement2 = _a.visualElement;
    isSharedLayout(syncLayout) && syncLayout.register(visualElement2);
    isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement2);
    visualElement2.onUnmount(function() {
      if (isSharedLayout(syncLayout)) {
        syncLayout.remove(visualElement2);
      }
      if (isSharedLayout(framerSyncLayout)) {
        framerSyncLayout.remove(visualElement2);
      }
    });
  };
  Measure2.prototype.getSnapshotBeforeUpdate = function() {
    var _a = this.props, syncLayout = _a.syncLayout, visualElement2 = _a.visualElement;
    if (isSharedLayout(syncLayout)) {
      syncLayout.syncUpdate();
    } else {
      snapshotViewportBox(visualElement2);
      syncLayout.add(visualElement2);
    }
    return null;
  };
  Measure2.prototype.componentDidUpdate = function() {
    var syncLayout = this.props.syncLayout;
    if (!isSharedLayout(syncLayout))
      syncLayout.flush();
  };
  Measure2.prototype.render = function() {
    return null;
  };
  return Measure2;
}(import_react35.default.Component);
function MeasureContextProvider(props) {
  var syncLayout = (0, import_react35.useContext)(SharedLayoutContext);
  var framerSyncLayout = (0, import_react35.useContext)(FramerTreeLayoutContext);
  return import_react35.default.createElement(Measure, __assign({}, props, {syncLayout, framerSyncLayout}));
}

// node_modules/framer-motion/dist/es/motion/features/layout/index.js
var layoutAnimations = {
  measureLayout: MeasureContextProvider,
  layoutAnimation: AnimateLayoutContextProvider
};

// node_modules/framer-motion/dist/es/render/utils/state.js
var createProjectionState = function() {
  return {
    isEnabled: false,
    isHydrated: false,
    isTargetLocked: false,
    target: axisBox(),
    targetFinal: axisBox()
  };
};
function createLayoutState() {
  return {
    isHydrated: false,
    layout: axisBox(),
    layoutCorrected: axisBox(),
    treeScale: {x: 1, y: 1},
    delta: delta(),
    deltaFinal: delta(),
    deltaTransform: ""
  };
}
var zeroLayout = createLayoutState();

// node_modules/framer-motion/dist/es/render/html/utils/build-projection-transform.js
function buildLayoutProjectionTransform(_a, treeScale, latestTransform) {
  var x = _a.x, y = _a.y;
  var xTranslate = x.translate / treeScale.x;
  var yTranslate = y.translate / treeScale.y;
  var transform3 = "translate3d(" + xTranslate + "px, " + yTranslate + "px, 0) ";
  if (latestTransform) {
    var rotate2 = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
    if (rotate2)
      transform3 += "rotate(" + rotate2 + ") ";
    if (rotateX)
      transform3 += "rotateX(" + rotateX + ") ";
    if (rotateY)
      transform3 += "rotateY(" + rotateY + ") ";
  }
  transform3 += "scale(" + x.scale + ", " + y.scale + ")";
  return !latestTransform && transform3 === identityProjection ? "" : transform3;
}
function buildLayoutProjectionTransformOrigin(_a) {
  var deltaFinal = _a.deltaFinal;
  return deltaFinal.x.origin * 100 + "% " + deltaFinal.y.origin * 100 + "% 0";
}
var identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, {x: 1, y: 1});

// node_modules/framer-motion/dist/es/render/utils/lifecycles.js
var names = [
  "LayoutMeasure",
  "BeforeLayoutMeasure",
  "LayoutUpdate",
  "ViewportBoxUpdate",
  "Update",
  "Render",
  "AnimationComplete",
  "LayoutAnimationComplete",
  "AnimationStart",
  "SetAxisTarget",
  "Unmount"
];
function createLifecycles() {
  var managers = names.map(function() {
    return new SubscriptionManager();
  });
  var propSubscriptions = {};
  var lifecycles = {
    clearAllListeners: function() {
      return managers.forEach(function(manager2) {
        return manager2.clear();
      });
    },
    updatePropListeners: function(props) {
      return names.forEach(function(name) {
        var _a;
        (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);
        var on = "on" + name;
        var propListener = props[on];
        if (propListener) {
          propSubscriptions[name] = lifecycles[on](propListener);
        }
      });
    }
  };
  managers.forEach(function(manager2, i) {
    lifecycles["on" + names[i]] = function(handler) {
      return manager2.add(handler);
    };
    lifecycles["notify" + names[i]] = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return manager2.notify.apply(manager2, __spreadArray([], __read(args)));
    };
  });
  return lifecycles;
}

// node_modules/framer-motion/dist/es/render/utils/motion-values.js
function updateMotionValuesFromProps(element, next, prev) {
  var _a;
  for (var key in next) {
    var nextValue = next[key];
    var prevValue = prev[key];
    if (isMotionValue(nextValue)) {
      element.addValue(key, nextValue);
    } else if (isMotionValue(prevValue)) {
      element.addValue(key, motionValue(nextValue));
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key)) {
        var existingValue = element.getValue(key);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));
      }
    }
  }
  for (var key in prev) {
    if (next[key] === void 0)
      element.removeValue(key);
  }
  return next;
}

// node_modules/framer-motion/dist/es/render/utils/projection.js
function updateLayoutDeltas(_a, _b, treePath, transformOrigin2) {
  var delta2 = _a.delta, layout2 = _a.layout, layoutCorrected = _a.layoutCorrected, treeScale = _a.treeScale;
  var target = _b.target;
  resetBox(layoutCorrected, layout2);
  applyTreeDeltas(layoutCorrected, treeScale, treePath);
  updateBoxDelta(delta2, layoutCorrected, target, transformOrigin2);
}

// node_modules/framer-motion/dist/es/render/utils/flat-tree.js
var FlatTree = function() {
  function FlatTree2() {
    this.children = [];
    this.isDirty = false;
  }
  FlatTree2.prototype.add = function(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  };
  FlatTree2.prototype.remove = function(child) {
    removeItem2(this.children, child);
    this.isDirty = true;
  };
  FlatTree2.prototype.forEach = function(callback) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback);
  };
  return FlatTree2;
}();

// node_modules/framer-motion/dist/es/render/dom/projection/relative-set.js
function setCurrentViewportBox(visualElement2) {
  var projectionParent = visualElement2.getProjectionParent();
  if (!projectionParent) {
    visualElement2.rebaseProjectionTarget();
    return;
  }
  var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement2.getLayoutState().layout);
  eachAxis(function(axis) {
    visualElement2.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);
  });
}

// node_modules/framer-motion/dist/es/render/index.js
var visualElement = function(_a) {
  var _b = _a.treeType, treeType = _b === void 0 ? "" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps3 = _a.scrapeMotionValuesFromProps;
  return function(_a2, options) {
    var parent = _a2.parent, props = _a2.props, presenceId2 = _a2.presenceId, blockInitialAnimation = _a2.blockInitialAnimation, visualState = _a2.visualState;
    if (options === void 0) {
      options = {};
    }
    var latestValues = visualState.latestValues, renderState = visualState.renderState;
    var instance;
    var lifecycles = createLifecycles();
    var projection = createProjectionState();
    var projectionParent;
    var leadProjection = projection;
    var leadLatestValues = latestValues;
    var unsubscribeFromLeadVisualElement;
    var layoutState2 = createLayoutState();
    var crossfader;
    var hasViewportBoxUpdated = false;
    var values = new Map();
    var valueSubscriptions = new Map();
    var prevMotionValues = {};
    var projectionTargetProgress;
    var baseTarget = __assign({}, latestValues);
    var removeFromVariantTree;
    function render3() {
      if (!instance)
        return;
      if (element.isProjectionReady()) {
        applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);
        updateBoxDelta(layoutState2.deltaFinal, layoutState2.layoutCorrected, leadProjection.targetFinal, latestValues);
      }
      triggerBuild();
      renderInstance(instance, renderState);
    }
    function triggerBuild() {
      var valuesToRender = latestValues;
      if (crossfader && crossfader.isActive()) {
        var crossfadedValues = crossfader.getCrossfadeState(element);
        if (crossfadedValues)
          valuesToRender = crossfadedValues;
      }
      build(element, renderState, valuesToRender, leadProjection, layoutState2, options, props);
    }
    function update() {
      lifecycles.notifyUpdate(latestValues);
    }
    function updateLayoutProjection() {
      if (!element.isProjectionReady())
        return;
      var delta2 = layoutState2.delta, treeScale = layoutState2.treeScale;
      var prevTreeScaleX = treeScale.x;
      var prevTreeScaleY = treeScale.y;
      var prevDeltaTransform = layoutState2.deltaTransform;
      updateLayoutDeltas(layoutState2, leadProjection, element.path, latestValues);
      hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta2);
      hasViewportBoxUpdated = false;
      var deltaTransform = buildLayoutProjectionTransform(delta2, treeScale);
      if (deltaTransform !== prevDeltaTransform || prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) {
        element.scheduleRender();
      }
      layoutState2.deltaTransform = deltaTransform;
    }
    function updateTreeLayoutProjection() {
      element.layoutTree.forEach(fireUpdateLayoutProjection);
    }
    function bindToMotionValue(key2, value2) {
      var removeOnChange = value2.onChange(function(latestValue) {
        latestValues[key2] = latestValue;
        props.onUpdate && es_default.update(update, false, true);
      });
      var removeOnRenderRequest = value2.onRenderRequest(element.scheduleRender);
      valueSubscriptions.set(key2, function() {
        removeOnChange();
        removeOnRenderRequest();
      });
    }
    var initialMotionValues = scrapeMotionValuesFromProps3(props);
    for (var key in initialMotionValues) {
      var value = initialMotionValues[key];
      if (latestValues[key] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key], false);
      }
    }
    var isControllingVariants = checkIfControllingVariants(props);
    var isVariantNode = checkIfVariantNode(props);
    var element = __assign(__assign({
      treeType,
      current: null,
      depth: parent ? parent.depth + 1 : 0,
      parent,
      children: new Set(),
      path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [],
      layoutTree: parent ? parent.layoutTree : new FlatTree(),
      presenceId: presenceId2,
      projection,
      variantChildren: isVariantNode ? new Set() : void 0,
      isVisible: void 0,
      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),
      blockInitialAnimation,
      isMounted: function() {
        return Boolean(instance);
      },
      mount: function(newInstance) {
        instance = element.current = newInstance;
        element.pointTo(element);
        if (isVariantNode && parent && !isControllingVariants) {
          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
        }
        parent === null || parent === void 0 ? void 0 : parent.children.add(element);
      },
      unmount: function() {
        cancelSync.update(update);
        cancelSync.render(render3);
        cancelSync.preRender(element.updateLayoutProjection);
        valueSubscriptions.forEach(function(remove) {
          return remove();
        });
        element.stopLayoutAnimation();
        element.layoutTree.remove(element);
        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);
        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
        lifecycles.clearAllListeners();
      },
      addVariantChild: function(child) {
        var _a3;
        var closestVariantNode = element.getClosestVariantNode();
        if (closestVariantNode) {
          (_a3 = closestVariantNode.variantChildren) === null || _a3 === void 0 ? void 0 : _a3.add(child);
          return function() {
            return closestVariantNode.variantChildren.delete(child);
          };
        }
      },
      sortNodePosition: function(other) {
        if (!sortNodePosition || treeType !== other.treeType)
          return 0;
        return sortNodePosition(element.getInstance(), other.getInstance());
      },
      getClosestVariantNode: function() {
        return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
      },
      scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function() {
        return es_default.preRender(element.updateTreeLayoutProjection, false, true);
      },
      getLayoutId: function() {
        return props.layoutId;
      },
      getInstance: function() {
        return instance;
      },
      getStaticValue: function(key2) {
        return latestValues[key2];
      },
      setStaticValue: function(key2, value2) {
        return latestValues[key2] = value2;
      },
      getLatestValues: function() {
        return latestValues;
      },
      setVisibility: function(visibility) {
        if (element.isVisible === visibility)
          return;
        element.isVisible = visibility;
        element.scheduleRender();
      },
      makeTargetAnimatable: function(target, canMutate) {
        if (canMutate === void 0) {
          canMutate = true;
        }
        return makeTargetAnimatable(element, target, props, canMutate);
      },
      addValue: function(key2, value2) {
        if (element.hasValue(key2))
          element.removeValue(key2);
        values.set(key2, value2);
        latestValues[key2] = value2.get();
        bindToMotionValue(key2, value2);
      },
      removeValue: function(key2) {
        var _a3;
        values.delete(key2);
        (_a3 = valueSubscriptions.get(key2)) === null || _a3 === void 0 ? void 0 : _a3();
        valueSubscriptions.delete(key2);
        delete latestValues[key2];
        removeValueFromRenderState(key2, renderState);
      },
      hasValue: function(key2) {
        return values.has(key2);
      },
      getValue: function(key2, defaultValue) {
        var value2 = values.get(key2);
        if (value2 === void 0 && defaultValue !== void 0) {
          value2 = motionValue(defaultValue);
          element.addValue(key2, value2);
        }
        return value2;
      },
      forEachValue: function(callback) {
        return values.forEach(callback);
      },
      readValue: function(key2) {
        var _a3;
        return (_a3 = latestValues[key2]) !== null && _a3 !== void 0 ? _a3 : readValueFromInstance(instance, key2, options);
      },
      setBaseTarget: function(key2, value2) {
        baseTarget[key2] = value2;
      },
      getBaseTarget: function(key2) {
        if (getBaseTarget) {
          var target = getBaseTarget(props, key2);
          if (target !== void 0 && !isMotionValue(target))
            return target;
        }
        return baseTarget[key2];
      }
    }, lifecycles), {
      build: function() {
        triggerBuild();
        return renderState;
      },
      scheduleRender: function() {
        es_default.render(render3, false, true);
      },
      syncRender: render3,
      setProps: function(newProps) {
        props = newProps;
        lifecycles.updatePropListeners(newProps);
        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps3(props), prevMotionValues);
      },
      getProps: function() {
        return props;
      },
      getVariant: function(name) {
        var _a3;
        return (_a3 = props.variants) === null || _a3 === void 0 ? void 0 : _a3[name];
      },
      getDefaultTransition: function() {
        return props.transition;
      },
      getVariantContext: function(startAtParent) {
        if (startAtParent === void 0) {
          startAtParent = false;
        }
        if (startAtParent)
          return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
        if (!isControllingVariants) {
          var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};
          if (props.initial !== void 0) {
            context_1.initial = props.initial;
          }
          return context_1;
        }
        var context = {};
        for (var i = 0; i < numVariantProps; i++) {
          var name_1 = variantProps[i];
          var prop = props[name_1];
          if (isVariantLabel(prop) || prop === false) {
            context[name_1] = prop;
          }
        }
        return context;
      },
      enableLayoutProjection: function() {
        projection.isEnabled = true;
        element.layoutTree.add(element);
      },
      lockProjectionTarget: function() {
        projection.isTargetLocked = true;
      },
      unlockProjectionTarget: function() {
        element.stopLayoutAnimation();
        projection.isTargetLocked = false;
      },
      getLayoutState: function() {
        return layoutState2;
      },
      setCrossfader: function(newCrossfader) {
        crossfader = newCrossfader;
      },
      isProjectionReady: function() {
        return projection.isEnabled && projection.isHydrated && layoutState2.isHydrated;
      },
      startLayoutAnimation: function(axis, transition3, isRelative) {
        if (isRelative === void 0) {
          isRelative = false;
        }
        var progress3 = element.getProjectionAnimationProgress()[axis];
        var _a3 = isRelative ? projection.relativeTarget[axis] : projection.target[axis], min = _a3.min, max = _a3.max;
        var length = max - min;
        progress3.clearListeners();
        progress3.set(min);
        progress3.set(min);
        progress3.onChange(function(v) {
          element.setProjectionTargetAxis(axis, v, v + length, isRelative);
        });
        return element.animateMotionValue(axis, progress3, 0, transition3);
      },
      stopLayoutAnimation: function() {
        eachAxis(function(axis) {
          return element.getProjectionAnimationProgress()[axis].stop();
        });
      },
      measureViewportBox: function(withTransform) {
        if (withTransform === void 0) {
          withTransform = true;
        }
        var viewportBox = measureViewportBox(instance, options);
        if (!withTransform)
          removeBoxTransforms(viewportBox, latestValues);
        return viewportBox;
      },
      getProjectionAnimationProgress: function() {
        projectionTargetProgress || (projectionTargetProgress = {
          x: motionValue(0),
          y: motionValue(0)
        });
        return projectionTargetProgress;
      },
      setProjectionTargetAxis: function(axis, min, max, isRelative) {
        if (isRelative === void 0) {
          isRelative = false;
        }
        var target;
        if (isRelative) {
          if (!projection.relativeTarget) {
            projection.relativeTarget = axisBox();
          }
          target = projection.relativeTarget[axis];
        } else {
          projection.relativeTarget = void 0;
          target = projection.target[axis];
        }
        projection.isHydrated = true;
        target.min = min;
        target.max = max;
        hasViewportBoxUpdated = true;
        lifecycles.notifySetAxisTarget();
      },
      rebaseProjectionTarget: function(force, box) {
        if (box === void 0) {
          box = layoutState2.layout;
        }
        var _a3 = element.getProjectionAnimationProgress(), x = _a3.x, y = _a3.y;
        var shouldRebase = !projection.relativeTarget && !projection.isTargetLocked && !x.isAnimating() && !y.isAnimating();
        if (force || shouldRebase) {
          eachAxis(function(axis) {
            var _a4 = box[axis], min = _a4.min, max = _a4.max;
            element.setProjectionTargetAxis(axis, min, max);
          });
        }
      },
      notifyLayoutReady: function(config2) {
        setCurrentViewportBox(element);
        element.notifyLayoutUpdate(layoutState2.layout, element.prevViewportBox || layoutState2.layout, config2);
      },
      resetTransform: function() {
        return resetTransform(element, instance, props);
      },
      restoreTransform: function() {
        return restoreTransform(instance, renderState);
      },
      updateLayoutProjection,
      updateTreeLayoutProjection: function() {
        element.layoutTree.forEach(fireResolveRelativeTargetBox);
        es_default.preRender(updateTreeLayoutProjection, false, true);
      },
      getProjectionParent: function() {
        if (projectionParent === void 0) {
          var foundParent = false;
          for (var i = element.path.length - 1; i >= 0; i--) {
            var ancestor = element.path[i];
            if (ancestor.projection.isEnabled) {
              foundParent = ancestor;
              break;
            }
          }
          projectionParent = foundParent;
        }
        return projectionParent;
      },
      resolveRelativeTargetBox: function() {
        var relativeParent = element.getProjectionParent();
        if (!projection.relativeTarget || !relativeParent)
          return;
        calcRelativeBox(projection, relativeParent.projection);
        if (isDraggable(relativeParent)) {
          var target = projection.target;
          applyBoxTransforms(target, target, relativeParent.getLatestValues());
        }
      },
      shouldResetTransform: function() {
        return Boolean(props._layoutResetTransform);
      },
      pointTo: function(newLead) {
        leadProjection = newLead.projection;
        leadLatestValues = newLead.getLatestValues();
        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
        unsubscribeFromLeadVisualElement = pipe2(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function() {
          var _a3;
          if (element.isPresent) {
            element.presence = Presence.Present;
          } else {
            (_a3 = element.layoutSafeToRemove) === null || _a3 === void 0 ? void 0 : _a3.call(element);
          }
        }));
      },
      isPresent: true,
      presence: Presence.Entering
    });
    return element;
  };
};
function fireResolveRelativeTargetBox(child) {
  child.resolveRelativeTargetBox();
}
function fireUpdateLayoutProjection(child) {
  child.updateLayoutProjection();
}
var variantProps = __spreadArray(["initial"], __read(variantPriorityOrder));
var numVariantProps = variantProps.length;

// node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js
var positionalKeys = new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y"
]);
var isPositionalKey = function(key) {
  return positionalKeys.has(key);
};
var hasPositionalKey = function(target) {
  return Object.keys(target).some(isPositionalKey);
};
var setAndResetVelocity = function(value, to) {
  value.set(to, false);
  value.set(to);
};
var isNumOrPxType = function(v) {
  return v === number || v === px2;
};
var BoundingBoxDimension;
(function(BoundingBoxDimension2) {
  BoundingBoxDimension2["width"] = "width";
  BoundingBoxDimension2["height"] = "height";
  BoundingBoxDimension2["left"] = "left";
  BoundingBoxDimension2["right"] = "right";
  BoundingBoxDimension2["top"] = "top";
  BoundingBoxDimension2["bottom"] = "bottom";
})(BoundingBoxDimension || (BoundingBoxDimension = {}));
var getPosFromMatrix = function(matrix, pos) {
  return parseFloat(matrix.split(", ")[pos]);
};
var getTranslateFromMatrix = function(pos2, pos3) {
  return function(_bbox, _a) {
    var transform3 = _a.transform;
    if (transform3 === "none" || !transform3)
      return 0;
    var matrix3d = transform3.match(/^matrix3d\((.+)\)$/);
    if (matrix3d) {
      return getPosFromMatrix(matrix3d[1], pos3);
    } else {
      var matrix = transform3.match(/^matrix\((.+)\)$/);
      if (matrix) {
        return getPosFromMatrix(matrix[1], pos2);
      } else {
        return 0;
      }
    }
  };
};
var transformKeys = new Set(["x", "y", "z"]);
var nonTranslationalTransformKeys = transformProps.filter(function(key) {
  return !transformKeys.has(key);
});
function removeNonTranslationalTransform(visualElement2) {
  var removedTransforms = [];
  nonTranslationalTransformKeys.forEach(function(key) {
    var value = visualElement2.getValue(key);
    if (value !== void 0) {
      removedTransforms.push([key, value.get()]);
      value.set(key.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement2.syncRender();
  return removedTransforms;
}
var positionalValues = {
  width: function(_a) {
    var x = _a.x;
    return x.max - x.min;
  },
  height: function(_a) {
    var y = _a.y;
    return y.max - y.min;
  },
  top: function(_bbox, _a) {
    var top2 = _a.top;
    return parseFloat(top2);
  },
  left: function(_bbox, _a) {
    var left2 = _a.left;
    return parseFloat(left2);
  },
  bottom: function(_a, _b) {
    var y = _a.y;
    var top2 = _b.top;
    return parseFloat(top2) + (y.max - y.min);
  },
  right: function(_a, _b) {
    var x = _a.x;
    var left2 = _b.left;
    return parseFloat(left2) + (x.max - x.min);
  },
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
var convertChangedValueTypes = function(target, visualElement2, changedKeys) {
  var originBbox = visualElement2.measureViewportBox();
  var element = visualElement2.getInstance();
  var elementComputedStyle = getComputedStyle(element);
  var display = elementComputedStyle.display, top2 = elementComputedStyle.top, left2 = elementComputedStyle.left, bottom2 = elementComputedStyle.bottom, right2 = elementComputedStyle.right, transform3 = elementComputedStyle.transform;
  var originComputedStyle = {top: top2, left: left2, bottom: bottom2, right: right2, transform: transform3};
  if (display === "none") {
    visualElement2.setStaticValue("display", target.display || "block");
  }
  visualElement2.syncRender();
  var targetBbox = visualElement2.measureViewportBox();
  changedKeys.forEach(function(key) {
    var value = visualElement2.getValue(key);
    setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));
    target[key] = positionalValues[key](targetBbox, elementComputedStyle);
  });
  return target;
};
var checkAndConvertChangedValueTypes = function(visualElement2, target, origin, transitionEnd) {
  if (origin === void 0) {
    origin = {};
  }
  if (transitionEnd === void 0) {
    transitionEnd = {};
  }
  target = __assign({}, target);
  transitionEnd = __assign({}, transitionEnd);
  var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
  var removedTransformValues = [];
  var hasAttemptedToRemoveTransformValues = false;
  var changedValueTypeKeys = [];
  targetPositionalKeys.forEach(function(key) {
    var value = visualElement2.getValue(key);
    if (!visualElement2.hasValue(key))
      return;
    var from = origin[key];
    var to = target[key];
    var fromType = findDimensionValueType(from);
    var toType;
    if (isKeyframesTarget(to)) {
      var numKeyframes = to.length;
      for (var i = to[0] === null ? 1 : 0; i < numKeyframes; i++) {
        if (!toType) {
          toType = findDimensionValueType(to[i]);
          invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
        } else {
          invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
        }
      }
    } else {
      toType = findDimensionValueType(to);
    }
    if (fromType !== toType) {
      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
        var current = value.get();
        if (typeof current === "string") {
          value.set(parseFloat(current));
        }
        if (typeof to === "string") {
          target[key] = parseFloat(to);
        } else if (Array.isArray(to) && toType === px2) {
          target[key] = to.map(parseFloat);
        }
      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
        if (from === 0) {
          value.set(toType.transform(from));
        } else {
          target[key] = fromType.transform(to);
        }
      } else {
        if (!hasAttemptedToRemoveTransformValues) {
          removedTransformValues = removeNonTranslationalTransform(visualElement2);
          hasAttemptedToRemoveTransformValues = true;
        }
        changedValueTypeKeys.push(key);
        transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
        setAndResetVelocity(value, to);
      }
    }
  });
  if (changedValueTypeKeys.length) {
    var convertedTarget = convertChangedValueTypes(target, visualElement2, changedValueTypeKeys);
    if (removedTransformValues.length) {
      removedTransformValues.forEach(function(_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        visualElement2.getValue(key).set(value);
      });
    }
    visualElement2.syncRender();
    return {target: convertedTarget, transitionEnd};
  } else {
    return {target, transitionEnd};
  }
};
function unitConversion(visualElement2, target, origin, transitionEnd) {
  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement2, target, origin, transitionEnd) : {target, transitionEnd};
}

// node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js
var parseDomVariant = function(visualElement2, target, origin, transitionEnd) {
  var resolved = resolveCSSVariables(visualElement2, target, transitionEnd);
  target = resolved.target;
  transitionEnd = resolved.transitionEnd;
  return unitConversion(visualElement2, target, origin, transitionEnd);
};

// node_modules/framer-motion/dist/es/render/html/visual-element.js
function getComputedStyle2(element) {
  return window.getComputedStyle(element);
}
var htmlConfig = {
  treeType: "dom",
  readValueFromInstance: function(domElement, key) {
    if (isTransformProp(key)) {
      var defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      var computedStyle = getComputedStyle2(domElement);
      return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
    }
  },
  sortNodePosition: function(a2, b2) {
    return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
  },
  getBaseTarget: function(props, key) {
    var _a;
    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];
  },
  measureViewportBox: function(element, _a) {
    var transformPagePoint = _a.transformPagePoint;
    return getBoundingBox(element, transformPagePoint);
  },
  resetTransform: function(element, domElement, props) {
    var transformTemplate = props.transformTemplate;
    domElement.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
    element.scheduleRender();
  },
  restoreTransform: function(instance, mutableState) {
    instance.style.transform = mutableState.style.transform;
  },
  removeValueFromRenderState: function(key, _a) {
    var vars = _a.vars, style = _a.style;
    delete vars[key];
    delete style[key];
  },
  makeTargetAnimatable: function(element, _a, _b, isMounted) {
    var transformValues = _b.transformValues;
    if (isMounted === void 0) {
      isMounted = true;
    }
    var transition3 = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, ["transition", "transitionEnd"]);
    var origin = getOrigin(target, transition3 || {}, element);
    if (transformValues) {
      if (transitionEnd)
        transitionEnd = transformValues(transitionEnd);
      if (target)
        target = transformValues(target);
      if (origin)
        origin = transformValues(origin);
    }
    if (isMounted) {
      checkTargetForNewValues(element, target, origin);
      var parsed = parseDomVariant(element, target, origin, transitionEnd);
      transitionEnd = parsed.transitionEnd;
      target = parsed.target;
    }
    return __assign({
      transition: transition3,
      transitionEnd
    }, target);
  },
  scrapeMotionValuesFromProps,
  build: function(element, renderState, latestValues, projection, layoutState2, options, props) {
    if (element.isVisible !== void 0) {
      renderState.style.visibility = element.isVisible ? "visible" : "hidden";
    }
    var isProjectionTranform = projection.isEnabled && layoutState2.isHydrated;
    buildHTMLStyles(renderState, latestValues, projection, layoutState2, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : void 0, isProjectionTranform ? buildLayoutProjectionTransformOrigin : void 0);
  },
  render: renderHTML
};
var htmlVisualElement = visualElement(htmlConfig);

// node_modules/framer-motion/dist/es/render/svg/visual-element.js
var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), {
  getBaseTarget: function(props, key) {
    return props[key];
  },
  readValueFromInstance: function(domElement, key) {
    var _a;
    if (isTransformProp(key)) {
      return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;
    }
    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
    return domElement.getAttribute(key);
  },
  scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
  build: function(_element, renderState, latestValues, projection, layoutState2, options, props) {
    var isProjectionTranform = projection.isEnabled && layoutState2.isHydrated;
    buildSVGAttrs(renderState, latestValues, projection, layoutState2, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : void 0, isProjectionTranform ? buildLayoutProjectionTransformOrigin : void 0);
  },
  render: renderSVG
}));

// node_modules/framer-motion/dist/es/render/dom/create-visual-element.js
var createDomVisualElement = function(Component4, options) {
  return isSVGComponent(Component4) ? svgVisualElement(options, {enableHardwareAcceleration: false}) : htmlVisualElement(options, {enableHardwareAcceleration: true});
};

// node_modules/framer-motion/dist/es/render/dom/motion.js
var featureBundle = __assign(__assign(__assign(__assign({}, animations), gestureAnimations), drag), layoutAnimations);
var motion = createMotionProxy(function(Component4, config2) {
  return createDomMotionConfig(Component4, config2, featureBundle, createDomVisualElement);
});

// node_modules/framer-motion/dist/es/render/dom/motion-minimal.js
var m = createMotionProxy(createDomMotionConfig);

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
var React29 = __toModule(require_react());
var import_react38 = __toModule(require_react());

// node_modules/framer-motion/dist/es/utils/use-force-update.js
var import_react36 = __toModule(require_react());
function useForceUpdate2() {
  var unloadingRef = (0, import_react36.useRef)(false);
  var _a = __read((0, import_react36.useState)(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];
  useUnmountEffect2(function() {
    return unloadingRef.current = true;
  });
  return (0, import_react36.useCallback)(function() {
    !unloadingRef.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js
var React28 = __toModule(require_react());
var import_react37 = __toModule(require_react());
var presenceId = 0;
function getPresenceId() {
  var id2 = presenceId;
  presenceId++;
  return id2;
}
var PresenceChild = function(_a) {
  var children = _a.children, initial = _a.initial, isPresent2 = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;
  var presenceChildren = useConstant(newChildrenMap);
  var id2 = useConstant(getPresenceId);
  var context = (0, import_react37.useMemo)(function() {
    return {
      id: id2,
      initial,
      isPresent: isPresent2,
      custom,
      onExitComplete: function(childId) {
        presenceChildren.set(childId, true);
        var allComplete = true;
        presenceChildren.forEach(function(isComplete) {
          if (!isComplete)
            allComplete = false;
        });
        allComplete && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
      },
      register: function(childId) {
        presenceChildren.set(childId, false);
        return function() {
          return presenceChildren.delete(childId);
        };
      }
    };
  }, presenceAffectsLayout ? void 0 : [isPresent2]);
  (0, import_react37.useMemo)(function() {
    presenceChildren.forEach(function(_, key) {
      return presenceChildren.set(key, false);
    });
  }, [isPresent2]);
  React28.useEffect(function() {
    !isPresent2 && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
  }, [isPresent2]);
  return React28.createElement(PresenceContext.Provider, {value: context}, children);
};
function newChildrenMap() {
  return new Map();
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
function getChildKey(child) {
  return child.key || "";
}
function updateChildLookup(children, allChildren) {
  var seenChildren = true ? new Set() : null;
  children.forEach(function(child) {
    var key = getChildKey(child);
    if (seenChildren) {
      if (seenChildren.has(key)) {
        console.warn('Children of AnimatePresence require unique keys. "' + key + '" is a duplicate.');
      }
      seenChildren.add(key);
    }
    allChildren.set(key, child);
  });
}
function onlyElements(children) {
  var filtered = [];
  import_react38.Children.forEach(children, function(child) {
    if ((0, import_react38.isValidElement)(child))
      filtered.push(child);
  });
  return filtered;
}
var AnimatePresence = function(_a) {
  var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;
  var forceRender = useForceUpdate2();
  var layoutContext = (0, import_react38.useContext)(SharedLayoutContext);
  if (isSharedLayout(layoutContext)) {
    forceRender = layoutContext.forceUpdate;
  }
  var isInitialRender = (0, import_react38.useRef)(true);
  var filteredChildren = onlyElements(children);
  var presentChildren = (0, import_react38.useRef)(filteredChildren);
  var allChildren = (0, import_react38.useRef)(new Map()).current;
  var exiting = (0, import_react38.useRef)(new Set()).current;
  updateChildLookup(filteredChildren, allChildren);
  if (isInitialRender.current) {
    isInitialRender.current = false;
    return React29.createElement(React29.Fragment, null, filteredChildren.map(function(child) {
      return React29.createElement(PresenceChild, {key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout}, child);
    }));
  }
  var childrenToRender = __spreadArray([], __read(filteredChildren));
  var presentKeys = presentChildren.current.map(getChildKey);
  var targetKeys = filteredChildren.map(getChildKey);
  var numPresent = presentKeys.length;
  for (var i = 0; i < numPresent; i++) {
    var key = presentKeys[i];
    if (targetKeys.indexOf(key) === -1) {
      exiting.add(key);
    } else {
      exiting.delete(key);
    }
  }
  if (exitBeforeEnter && exiting.size) {
    childrenToRender = [];
  }
  exiting.forEach(function(key2) {
    if (targetKeys.indexOf(key2) !== -1)
      return;
    var child = allChildren.get(key2);
    if (!child)
      return;
    var insertionIndex = presentKeys.indexOf(key2);
    var onExit = function() {
      allChildren.delete(key2);
      exiting.delete(key2);
      var removeIndex = presentChildren.current.findIndex(function(presentChild) {
        return presentChild.key === key2;
      });
      presentChildren.current.splice(removeIndex, 1);
      if (!exiting.size) {
        presentChildren.current = filteredChildren;
        forceRender();
        onExitComplete && onExitComplete();
      }
    };
    childrenToRender.splice(insertionIndex, 0, React29.createElement(PresenceChild, {key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout}, child));
  });
  childrenToRender = childrenToRender.map(function(child) {
    var key2 = child.key;
    return exiting.has(key2) ? child : React29.createElement(PresenceChild, {key: getChildKey(child), isPresent: true, presenceAffectsLayout}, child);
  });
  presentChildren.current = childrenToRender;
  if (exitBeforeEnter && childrenToRender.length > 1) {
    console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
  }
  return React29.createElement(React29.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
    return (0, import_react38.cloneElement)(child);
  }));
};

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout/index.js
var React30 = __toModule(require_react());

// node_modules/framer-motion/dist/es/animation/animate.js
function animate2(from, to, transition3) {
  if (transition3 === void 0) {
    transition3 = {};
  }
  var value = isMotionValue(from) ? from : motionValue(from);
  startAnimation("", value, to, transition3);
  return {
    stop: function() {
      return value.stop();
    }
  };
}

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/crossfader.js
function createCrossfader() {
  var progress3 = motionValue(1);
  var options = {
    lead: void 0,
    follow: void 0,
    crossfadeOpacity: false,
    preserveFollowOpacity: false
  };
  var prevOptions = __assign({}, options);
  var leadState = {};
  var followState = {};
  var isActive = false;
  var finalCrossfadeFrame = null;
  var prevUpdate = 0;
  function startCrossfadeAnimation(target, transition3) {
    var lead = options.lead, follow = options.follow;
    isActive = true;
    finalCrossfadeFrame = null;
    var hasUpdated = false;
    var onUpdate = function() {
      hasUpdated = true;
      lead && lead.scheduleRender();
      follow && follow.scheduleRender();
    };
    var onComplete = function() {
      isActive = false;
      finalCrossfadeFrame = getFrameData().timestamp;
    };
    transition3 = transition3 && getValueTransition(transition3, "crossfade");
    return animate2(progress3, target, __assign(__assign({}, transition3), {onUpdate, onComplete: function() {
      if (!hasUpdated) {
        progress3.set(target);
        es_default.read(onComplete);
      } else {
        onComplete();
      }
      onUpdate();
    }}));
  }
  function updateCrossfade() {
    var _a, _b;
    var timestamp = getFrameData().timestamp;
    var lead = options.lead, follow = options.follow;
    if (timestamp === prevUpdate || !lead)
      return;
    prevUpdate = timestamp;
    var latestLeadValues = lead.getLatestValues();
    Object.assign(leadState, latestLeadValues);
    var latestFollowValues = follow ? follow.getLatestValues() : options.prevValues;
    Object.assign(followState, latestFollowValues);
    var p = progress3.get();
    var leadTargetOpacity = (_a = latestLeadValues.opacity) !== null && _a !== void 0 ? _a : 1;
    var followTargetOpacity = (_b = latestFollowValues === null || latestFollowValues === void 0 ? void 0 : latestFollowValues.opacity) !== null && _b !== void 0 ? _b : 1;
    if (options.crossfadeOpacity && follow) {
      leadState.opacity = mix(follow.isVisible !== false ? 0 : followTargetOpacity, leadTargetOpacity, easeCrossfadeIn(p));
      followState.opacity = options.preserveFollowOpacity ? followTargetOpacity : mix(followTargetOpacity, 0, easeCrossfadeOut(p));
    } else if (!follow) {
      leadState.opacity = mix(followTargetOpacity, leadTargetOpacity, p);
    }
    mixValues(leadState, followState, latestLeadValues, latestFollowValues || {}, Boolean(follow), p);
  }
  return {
    isActive: function() {
      return leadState && (isActive || getFrameData().timestamp === finalCrossfadeFrame);
    },
    fromLead: function(transition3) {
      return startCrossfadeAnimation(0, transition3);
    },
    toLead: function(transition3) {
      var initialProgress = 0;
      if (!options.prevValues && !options.follow) {
        initialProgress = 1;
      } else if (prevOptions.lead === options.follow && prevOptions.follow === options.lead) {
        initialProgress = 1 - progress3.get();
      }
      progress3.set(initialProgress);
      return startCrossfadeAnimation(1, transition3);
    },
    reset: function() {
      return progress3.set(1);
    },
    stop: function() {
      return progress3.stop();
    },
    getCrossfadeState: function(element) {
      updateCrossfade();
      if (element === options.lead) {
        return leadState;
      } else if (element === options.follow) {
        return followState;
      }
    },
    setOptions: function(newOptions) {
      prevOptions = options;
      options = newOptions;
      leadState = {};
      followState = {};
    },
    getLatestValues: function() {
      return leadState;
    }
  };
}
var easeCrossfadeIn = compress(0, 0.5, circOut);
var easeCrossfadeOut = compress(0.5, 0.95, linear);
function compress(min, max, easing) {
  return function(p) {
    if (p < min)
      return 0;
    if (p > max)
      return 1;
    return easing(progress(min, max, p));
  };
}
var borders2 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var numBorders = borders2.length;
function mixValues(leadState, followState, latestLeadValues, latestFollowValues, hasFollowElement, p) {
  for (var i = 0; i < numBorders; i++) {
    var borderLabel = "border" + borders2[i] + "Radius";
    var followRadius = getRadius(latestFollowValues, borderLabel);
    var leadRadius = getRadius(latestLeadValues, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    if (typeof followRadius === "number" && typeof leadRadius === "number") {
      var radius = Math.max(mix(followRadius, leadRadius, p), 0);
      leadState[borderLabel] = followState[borderLabel] = radius;
    }
  }
  if (latestFollowValues.rotate || latestLeadValues.rotate) {
    var rotate2 = mix(latestFollowValues.rotate || 0, latestLeadValues.rotate || 0, p);
    leadState.rotate = followState.rotate = rotate2;
  }
  if (!hasFollowElement && latestLeadValues.backgroundColor && latestFollowValues.backgroundColor) {
    leadState.backgroundColor = followState.backgroundColor = mixColor(latestFollowValues.backgroundColor, latestLeadValues.backgroundColor)(p);
  }
}
function getRadius(values, radiusName) {
  var _a;
  return (_a = values[radiusName]) !== null && _a !== void 0 ? _a : values.borderRadius;
}

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/stack.js
function layoutStack() {
  var stack = new Set();
  var state = {leadIsExiting: false};
  var prevState = __assign({}, state);
  var prevValues;
  var prevViewportBox;
  var prevDragCursor;
  var crossfader = createCrossfader();
  var needsCrossfadeAnimation = false;
  function getFollowViewportBox() {
    return state.follow ? state.follow.prevViewportBox : prevViewportBox;
  }
  function getFollowLayout() {
    var _a;
    return (_a = state.follow) === null || _a === void 0 ? void 0 : _a.getLayoutState().layout;
  }
  return {
    add: function(element) {
      element.setCrossfader(crossfader);
      stack.add(element);
      if (prevDragCursor)
        element.prevDragCursor = prevDragCursor;
      if (!state.lead)
        state.lead = element;
    },
    remove: function(element) {
      stack.delete(element);
    },
    getLead: function() {
      return state.lead;
    },
    updateSnapshot: function() {
      if (!state.lead)
        return;
      prevValues = crossfader.isActive() ? crossfader.getLatestValues() : state.lead.getLatestValues();
      prevViewportBox = state.lead.prevViewportBox;
      var dragControls = elementDragControls.get(state.lead);
      if (dragControls && dragControls.isDragging) {
        prevDragCursor = dragControls.cursorProgress;
      }
    },
    clearSnapshot: function() {
      prevDragCursor = prevViewportBox = void 0;
    },
    updateLeadAndFollow: function() {
      var _a;
      prevState = __assign({}, state);
      var lead;
      var follow;
      var order3 = Array.from(stack);
      for (var i = order3.length; i--; i >= 0) {
        var element = order3[i];
        if (lead)
          follow !== null && follow !== void 0 ? follow : follow = element;
        lead !== null && lead !== void 0 ? lead : lead = element;
        if (lead && follow)
          break;
      }
      state.lead = lead;
      state.follow = follow;
      state.leadIsExiting = ((_a = state.lead) === null || _a === void 0 ? void 0 : _a.presence) === Presence.Exiting;
      crossfader.setOptions({
        lead,
        follow,
        prevValues,
        crossfadeOpacity: (follow === null || follow === void 0 ? void 0 : follow.isPresenceRoot) || (lead === null || lead === void 0 ? void 0 : lead.isPresenceRoot)
      });
      if (state.lead !== prevState.follow && (prevState.lead !== state.lead || prevState.leadIsExiting !== state.leadIsExiting)) {
        needsCrossfadeAnimation = true;
      }
    },
    animate: function(child, shouldCrossfade) {
      var _a;
      if (shouldCrossfade === void 0) {
        shouldCrossfade = false;
      }
      if (child === state.lead) {
        if (shouldCrossfade) {
          child.pointTo(state.lead);
        } else {
          child.setVisibility(true);
        }
        var config2 = {};
        var prevParent = (_a = state.follow) === null || _a === void 0 ? void 0 : _a.getProjectionParent();
        if (prevParent) {
          config2.prevParent = prevParent;
        }
        if (child.presence === Presence.Entering) {
          config2.originBox = getFollowViewportBox();
        } else if (child.presence === Presence.Exiting) {
          config2.targetBox = getFollowLayout();
        }
        if (needsCrossfadeAnimation) {
          needsCrossfadeAnimation = false;
          var transition3 = child.getDefaultTransition();
          child.presence === Presence.Entering ? crossfader.toLead(transition3) : crossfader.fromLead(transition3);
        }
        child.notifyLayoutReady(config2);
      } else {
        if (shouldCrossfade) {
          state.lead && child.pointTo(state.lead);
        } else {
          child.setVisibility(false);
        }
      }
    }
  };
}

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout/utils/rotate.js
function resetRotate(child) {
  var hasRotate = false;
  var resetValues = {};
  for (var i = 0; i < transformAxes.length; i++) {
    var axis = transformAxes[i];
    var key = "rotate" + axis;
    if (!child.hasValue(key) || child.getStaticValue(key) === 0)
      continue;
    hasRotate = true;
    resetValues[key] = child.getStaticValue(key);
    child.setStaticValue(key, 0);
  }
  if (!hasRotate)
    return;
  child.syncRender();
  for (var key in resetValues) {
    child.setStaticValue(key, resetValues[key]);
  }
  child.scheduleRender();
}

// node_modules/framer-motion/dist/es/components/AnimateSharedLayout/index.js
var AnimateSharedLayout = function(_super) {
  __extends(AnimateSharedLayout2, _super);
  function AnimateSharedLayout2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.children = new Set();
    _this.stacks = new Map();
    _this.hasMounted = false;
    _this.updateScheduled = false;
    _this.renderScheduled = false;
    _this.syncContext = __assign(__assign({}, createBatcher()), {syncUpdate: function(force) {
      return _this.scheduleUpdate(force);
    }, forceUpdate: function() {
      _this.syncContext = __assign({}, _this.syncContext);
      _this.scheduleUpdate(true);
    }, register: function(child) {
      return _this.addChild(child);
    }, remove: function(child) {
      return _this.removeChild(child);
    }});
    return _this;
  }
  AnimateSharedLayout2.prototype.componentDidMount = function() {
    this.hasMounted = true;
  };
  AnimateSharedLayout2.prototype.componentDidUpdate = function() {
    this.startLayoutAnimation();
  };
  AnimateSharedLayout2.prototype.shouldComponentUpdate = function() {
    this.renderScheduled = true;
    return true;
  };
  AnimateSharedLayout2.prototype.startLayoutAnimation = function() {
    var _this = this;
    this.renderScheduled = this.updateScheduled = false;
    var type = this.props.type;
    this.children.forEach(function(child) {
      if (!child.isPresent) {
        child.presence = Presence.Exiting;
      } else if (child.presence !== Presence.Entering) {
        child.presence = child.presence === Presence.Exiting ? Presence.Entering : Presence.Present;
      }
    });
    this.updateStacks();
    var handler = {
      layoutReady: function(child) {
        if (child.getLayoutId() !== void 0) {
          var stack = _this.getStack(child);
          stack.animate(child, type === "crossfade");
        } else {
          child.notifyLayoutReady();
        }
      },
      parent: this.context.visualElement
    };
    this.children.forEach(function(child) {
      return _this.syncContext.add(child);
    });
    this.syncContext.flush(handler);
    this.stacks.forEach(function(stack) {
      return stack.clearSnapshot();
    });
  };
  AnimateSharedLayout2.prototype.updateStacks = function() {
    this.stacks.forEach(function(stack) {
      return stack.updateLeadAndFollow();
    });
  };
  AnimateSharedLayout2.prototype.scheduleUpdate = function(force) {
    if (force === void 0) {
      force = false;
    }
    if (!(force || !this.updateScheduled))
      return;
    this.updateScheduled = true;
    this.children.forEach(function(child) {
      resetRotate(child);
      if (child.shouldResetTransform())
        child.resetTransform();
    });
    this.children.forEach(snapshotViewportBox);
    this.stacks.forEach(function(stack) {
      return stack.updateSnapshot();
    });
    if (force || !this.renderScheduled) {
      this.renderScheduled = true;
      this.forceUpdate();
    }
  };
  AnimateSharedLayout2.prototype.addChild = function(child) {
    this.children.add(child);
    this.addToStack(child);
    child.presence = this.hasMounted ? Presence.Entering : Presence.Present;
  };
  AnimateSharedLayout2.prototype.removeChild = function(child) {
    this.scheduleUpdate();
    this.children.delete(child);
    this.removeFromStack(child);
  };
  AnimateSharedLayout2.prototype.addToStack = function(child) {
    var stack = this.getStack(child);
    stack === null || stack === void 0 ? void 0 : stack.add(child);
  };
  AnimateSharedLayout2.prototype.removeFromStack = function(child) {
    var stack = this.getStack(child);
    stack === null || stack === void 0 ? void 0 : stack.remove(child);
  };
  AnimateSharedLayout2.prototype.getStack = function(child) {
    var id2 = child.getLayoutId();
    if (id2 === void 0)
      return;
    !this.stacks.has(id2) && this.stacks.set(id2, layoutStack());
    return this.stacks.get(id2);
  };
  AnimateSharedLayout2.prototype.render = function() {
    return React30.createElement(SharedLayoutContext.Provider, {value: this.syncContext}, this.props.children);
  };
  AnimateSharedLayout2.contextType = MotionContext;
  return AnimateSharedLayout2;
}(React30.Component);

// node_modules/framer-motion/dist/es/components/MotionConfig/index.js
var React31 = __toModule(require_react());
var import_react39 = __toModule(require_react());

// node_modules/framer-motion/dist/es/components/LazyMotion/index.js
var React32 = __toModule(require_react());
var import_react40 = __toModule(require_react());

// node_modules/framer-motion/dist/es/render/dom/features-animation.js
var domAnimation = __assign(__assign({renderer: createDomVisualElement}, animations), gestureAnimations);

// node_modules/framer-motion/dist/es/render/dom/features-max.js
var domMax = __assign(__assign(__assign({}, domAnimation), drag), layoutAnimations);

// node_modules/framer-motion/dist/es/value/use-motion-value.js
var import_react41 = __toModule(require_react());

// node_modules/framer-motion/dist/es/value/use-on-change.js
var import_react42 = __toModule(require_react());

// node_modules/framer-motion/dist/es/value/use-spring.js
var import_react43 = __toModule(require_react());

// node_modules/framer-motion/dist/es/value/use-velocity.js
var import_react44 = __toModule(require_react());

// node_modules/framer-motion/dist/es/utils/use-reduced-motion.js
var import_react45 = __toModule(require_react());

// node_modules/framer-motion/dist/es/animation/use-animation.js
var import_react46 = __toModule(require_react());

// node_modules/framer-motion/dist/es/utils/use-cycle.js
var import_react47 = __toModule(require_react());

// node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.js
var DragControls = function() {
  function DragControls2() {
    this.componentControls = new Set();
  }
  DragControls2.prototype.subscribe = function(controls) {
    var _this = this;
    this.componentControls.add(controls);
    return function() {
      return _this.componentControls.delete(controls);
    };
  };
  DragControls2.prototype.start = function(event, options) {
    this.componentControls.forEach(function(controls) {
      controls.start(event.nativeEvent || event, options);
    });
  };
  DragControls2.prototype.updateConstraints = function(flush) {
    if (flush === void 0) {
      flush = true;
    }
    this.componentControls.forEach(function(controls) {
      controls.updateConstraints();
    });
    flush && flushLayout();
  };
  return DragControls2;
}();

// node_modules/framer-motion/dist/es/animation/use-animated-state.js
var import_react48 = __toModule(require_react());
var createObject = function() {
  return {};
};
var stateVisualElement = visualElement({
  build: function() {
  },
  measureViewportBox: axisBox,
  resetTransform: function() {
  },
  restoreTransform: function() {
  },
  removeValueFromRenderState: function() {
  },
  render: function() {
  },
  scrapeMotionValuesFromProps: createObject,
  readValueFromInstance: function(_state, key, options) {
    return options.initialState[key] || 0;
  },
  makeTargetAnimatable: function(element, _a) {
    var transition3 = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, ["transition", "transitionEnd"]);
    var origin = getOrigin(target, transition3 || {}, element);
    checkTargetForNewValues(element, target, origin);
    return __assign({transition: transition3, transitionEnd}, target);
  }
});
var useVisualState = makeUseVisualState({
  scrapeMotionValuesFromProps: createObject,
  createRenderState: createObject
});

// node_modules/@chakra-ui/transition/dist/esm/collapse.js
var React33 = __toModule(require_react());

// node_modules/@chakra-ui/transition/dist/esm/transition-utils.js
function _extends19() {
  _extends19 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends19.apply(this, arguments);
}
var TransitionEasings = {
  ease: [0.25, 0.1, 0.25, 1],
  easeIn: [0.4, 0, 1, 1],
  easeOut: [0, 0, 0.2, 1],
  easeInOut: [0.4, 0, 0.2, 1]
};
var TransitionVariants = {
  scale: {
    enter: {
      scale: 1
    },
    exit: {
      scale: 0.95
    }
  },
  fade: {
    enter: {
      opacity: 1
    },
    exit: {
      opacity: 0
    }
  },
  pushLeft: {
    enter: {
      x: "100%"
    },
    exit: {
      x: "-30%"
    }
  },
  pushRight: {
    enter: {
      x: "-100%"
    },
    exit: {
      x: "30%"
    }
  },
  pushUp: {
    enter: {
      y: "100%"
    },
    exit: {
      y: "-30%"
    }
  },
  pushDown: {
    enter: {
      y: "-100%"
    },
    exit: {
      y: "30%"
    }
  },
  slideLeft: {
    position: {
      left: 0,
      top: 0,
      bottom: 0,
      width: "100%"
    },
    enter: {
      x: 0
    },
    exit: {
      x: "-100%"
    }
  },
  slideRight: {
    position: {
      right: 0,
      top: 0,
      bottom: 0,
      width: "100%"
    },
    enter: {
      x: 0
    },
    exit: {
      x: "100%"
    }
  },
  slideUp: {
    position: {
      top: 0,
      left: 0,
      right: 0,
      maxWidth: "100vw"
    },
    enter: {
      y: 0
    },
    exit: {
      y: "-100%"
    }
  },
  slideDown: {
    position: {
      bottom: 0,
      left: 0,
      right: 0,
      maxWidth: "100vw"
    },
    enter: {
      y: 0
    },
    exit: {
      y: "100%"
    }
  }
};
function slideTransition(options) {
  var _options$direction;
  var side = (_options$direction = options == null ? void 0 : options.direction) != null ? _options$direction : "right";
  switch (side) {
    case "right":
      return TransitionVariants.slideRight;
    case "left":
      return TransitionVariants.slideLeft;
    case "bottom":
      return TransitionVariants.slideDown;
    case "top":
      return TransitionVariants.slideUp;
    default:
      return TransitionVariants.slideRight;
  }
}
var TransitionDefaults = {
  enter: {
    duration: 0.2,
    ease: TransitionEasings.easeOut
  },
  exit: {
    duration: 0.1,
    ease: TransitionEasings.easeIn
  }
};
var withDelay = {
  enter: (transition3, delay) => _extends19({}, transition3, {
    delay: isNumber(delay) ? delay : delay == null ? void 0 : delay["enter"]
  }),
  exit: (transition3, delay) => _extends19({}, transition3, {
    delay: isNumber(delay) ? delay : delay == null ? void 0 : delay["exit"]
  })
};

// node_modules/@chakra-ui/transition/dist/esm/collapse.js
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends20() {
  _extends20 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends20.apply(this, arguments);
}
var isNumeric = (value) => value != null && parseInt(value.toString(), 10) > 0;
var defaultTransitions2 = {
  exit: {
    height: {
      duration: 0.2,
      ease: TransitionEasings.ease
    },
    opacity: {
      duration: 0.3,
      ease: TransitionEasings.ease
    }
  },
  enter: {
    height: {
      duration: 0.3,
      ease: TransitionEasings.ease
    },
    opacity: {
      duration: 0.4,
      ease: TransitionEasings.ease
    }
  }
};
var variants13 = {
  exit: (_ref2) => {
    var _transition$exit;
    var {
      animateOpacity,
      startingHeight,
      transition: transition3,
      transitionEnd,
      delay
    } = _ref2;
    return _extends20({}, animateOpacity && {
      opacity: isNumeric(startingHeight) ? 1 : 0
    }, {
      overflow: "hidden",
      height: startingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit,
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(defaultTransitions2.exit, delay)
    });
  },
  enter: (_ref2) => {
    var _transition$enter;
    var {
      animateOpacity,
      endingHeight,
      transition: transition3,
      transitionEnd,
      delay
    } = _ref2;
    return _extends20({}, animateOpacity && {
      opacity: 1
    }, {
      height: endingHeight,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter,
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(defaultTransitions2.enter, delay)
    });
  }
};
var Collapse = React33.forwardRef((props, ref) => {
  var {
    in: isOpen,
    unmountOnExit,
    animateOpacity = true,
    startingHeight = 0,
    endingHeight = "auto",
    style,
    className,
    transition: transition3,
    transitionEnd
  } = props, rest = _objectWithoutPropertiesLoose3(props, ["in", "unmountOnExit", "animateOpacity", "startingHeight", "endingHeight", "style", "className", "transition", "transitionEnd", "onAnimationComplete"]);
  var [mounted, setMounted] = React33.useState(false);
  React33.useEffect(() => {
    var timeout = setTimeout(() => {
      setMounted(true);
    });
    return () => clearTimeout(timeout);
  }, []);
  var hasStartingHeight = parseFloat(startingHeight.toString()) > 0;
  warn({
    condition: Boolean(startingHeight > 0 && unmountOnExit),
    message: "startingHeight and unmountOnExit are mutually exclusive. You can't use them together"
  });
  var custom = {
    startingHeight,
    endingHeight,
    animateOpacity,
    transition: !mounted ? {
      enter: {
        duration: 0
      }
    } : transition3,
    transitionEnd: (0, import_lodash.default)(transitionEnd, {
      enter: {
        overflow: "initial"
      },
      exit: {
        display: hasStartingHeight ? "block" : "none"
      }
    })
  };
  var show = unmountOnExit ? isOpen : true;
  var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
  return React33.createElement(AnimatePresence, {
    initial: false,
    custom
  }, show && React33.createElement(motion.div, _extends20({
    ref
  }, rest, {
    className: cx("chakra-collapse", className),
    style: _extends20({
      overflow: "hidden",
      display: "block"
    }, style),
    custom,
    variants: variants13,
    initial: unmountOnExit ? "exit" : false,
    animate: animate3,
    exit: "exit"
  })));
});
if (__DEV__) {
  Collapse.displayName = "Collapse";
}

// node_modules/@chakra-ui/transition/dist/esm/fade.js
var React34 = __toModule(require_react());
function _extends21() {
  _extends21 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends21.apply(this, arguments);
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var variants14 = {
  enter: function enter(_temp) {
    var _transition$enter;
    var {
      transition: transition3,
      transitionEnd,
      delay
    } = _temp === void 0 ? {} : _temp;
    return {
      opacity: 1,
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: function exit(_temp2) {
    var _transition$exit;
    var {
      transition: transition3,
      transitionEnd,
      delay
    } = _temp2 === void 0 ? {} : _temp2;
    return {
      opacity: 0,
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  }
};
var fadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants14
};
var Fade = React34.forwardRef((props, ref) => {
  var {
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition3,
    transitionEnd,
    delay
  } = props, rest = _objectWithoutPropertiesLoose4(props, ["unmountOnExit", "in", "className", "transition", "transitionEnd", "delay"]);
  var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var custom = {
    transition: transition3,
    transitionEnd,
    delay
  };
  return React34.createElement(AnimatePresence, {
    custom
  }, show && React34.createElement(motion.div, _extends21({
    ref,
    className: cx("chakra-fade", className),
    custom
  }, fadeConfig, {
    animate: animate3
  }, rest)));
});
if (__DEV__) {
  Fade.displayName = "Fade";
}

// node_modules/@chakra-ui/transition/dist/esm/scale-fade.js
var React35 = __toModule(require_react());
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends22() {
  _extends22 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends22.apply(this, arguments);
}
var variants15 = {
  exit: (_ref2) => {
    var _transition$exit;
    var {
      reverse,
      initialScale,
      transition: transition3,
      transitionEnd,
      delay
    } = _ref2;
    return _extends22({
      opacity: 0
    }, reverse ? {
      scale: initialScale,
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    } : {
      transitionEnd: _extends22({
        scale: initialScale
      }, transitionEnd == null ? void 0 : transitionEnd.exit)
    }, {
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay)
    });
  },
  enter: (_ref2) => {
    var _transition$enter;
    var {
      transitionEnd,
      transition: transition3,
      delay
    } = _ref2;
    return {
      opacity: 1,
      scale: 1,
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  }
};
var scaleFadeConfig = {
  initial: "exit",
  animate: "enter",
  exit: "exit",
  variants: variants15
};
var ScaleFade = React35.forwardRef((props, ref) => {
  var {
    unmountOnExit,
    in: isOpen,
    reverse = true,
    initialScale = 0.95,
    className,
    transition: transition3,
    transitionEnd,
    delay
  } = props, rest = _objectWithoutPropertiesLoose5(props, ["unmountOnExit", "in", "reverse", "initialScale", "className", "transition", "transitionEnd", "delay"]);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    initialScale,
    reverse,
    transition: transition3,
    transitionEnd,
    delay
  };
  return React35.createElement(AnimatePresence, {
    custom
  }, show && React35.createElement(motion.div, _extends22({
    ref,
    className: cx("chakra-offset-slide", className)
  }, scaleFadeConfig, {
    animate: animate3,
    custom
  }, rest)));
});
if (__DEV__) {
  ScaleFade.displayName = "ScaleFade";
}

// node_modules/@chakra-ui/transition/dist/esm/slide.js
var React36 = __toModule(require_react());
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends23() {
  _extends23 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends23.apply(this, arguments);
}
var defaultTransition = {
  exit: {
    duration: 0.15,
    ease: TransitionEasings.easeInOut
  },
  enter: {
    type: "spring",
    damping: 25,
    stiffness: 180
  }
};
var variants16 = {
  exit: (_ref2) => {
    var _transition$exit;
    var {
      direction: direction2,
      transition: transition3,
      transitionEnd,
      delay
    } = _ref2;
    var {
      exit: exitStyles
    } = slideTransition({
      direction: direction2
    });
    return _extends23({}, exitStyles, {
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(defaultTransition.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    });
  },
  enter: (_ref2) => {
    var _transition$enter;
    var {
      direction: direction2,
      transitionEnd,
      transition: transition3,
      delay
    } = _ref2;
    var {
      enter: enterStyles
    } = slideTransition({
      direction: direction2
    });
    return _extends23({}, enterStyles, {
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(defaultTransition.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    });
  }
};
var Slide = React36.forwardRef((props, ref) => {
  var {
    direction: direction2 = "right",
    style,
    unmountOnExit,
    in: isOpen,
    className,
    transition: transition3,
    transitionEnd,
    delay
  } = props, rest = _objectWithoutPropertiesLoose6(props, ["direction", "style", "unmountOnExit", "in", "className", "transition", "transitionEnd", "delay"]);
  var transitionStyles = slideTransition({
    direction: direction2
  });
  var computedStyle = Object.assign({
    position: "fixed"
  }, transitionStyles.position, style);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    transitionEnd,
    transition: transition3,
    direction: direction2,
    delay
  };
  return React36.createElement(AnimatePresence, {
    custom
  }, show && React36.createElement(motion.div, _extends23({
    ref,
    initial: "exit",
    className: cx("chakra-slide", className),
    animate: animate3,
    exit: "exit",
    custom,
    variants: variants16,
    style: computedStyle
  }, rest)));
});
if (__DEV__) {
  Slide.displayName = "Slide";
}

// node_modules/@chakra-ui/transition/dist/esm/slide-fade.js
var React37 = __toModule(require_react());
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends24() {
  _extends24 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends24.apply(this, arguments);
}
var variants17 = {
  initial: (_ref2) => {
    var _transition$exit;
    var {
      offsetX,
      offsetY,
      transition: transition3,
      transitionEnd,
      delay
    } = _ref2;
    return {
      opacity: 0,
      x: offsetX,
      y: offsetY,
      transition: (_transition$exit = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit : withDelay.exit(TransitionDefaults.exit, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    };
  },
  enter: (_ref2) => {
    var _transition$enter;
    var {
      transition: transition3,
      transitionEnd,
      delay
    } = _ref2;
    return {
      opacity: 1,
      x: 0,
      y: 0,
      transition: (_transition$enter = transition3 == null ? void 0 : transition3.enter) != null ? _transition$enter : withDelay.enter(TransitionDefaults.enter, delay),
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.enter
    };
  },
  exit: (_ref3) => {
    var _transition$exit2;
    var {
      offsetY,
      offsetX,
      transition: transition3,
      transitionEnd,
      reverse,
      delay
    } = _ref3;
    var offset2 = {
      x: offsetX,
      y: offsetY
    };
    return _extends24({
      opacity: 0,
      transition: (_transition$exit2 = transition3 == null ? void 0 : transition3.exit) != null ? _transition$exit2 : withDelay.exit(TransitionDefaults.exit, delay)
    }, reverse ? _extends24({}, offset2, {
      transitionEnd: transitionEnd == null ? void 0 : transitionEnd.exit
    }) : {
      transitionEnd: _extends24({}, offset2, transitionEnd == null ? void 0 : transitionEnd.exit)
    });
  }
};
var slideFadeConfig = {
  initial: "initial",
  animate: "enter",
  exit: "exit",
  variants: variants17
};
var SlideFade = React37.forwardRef((props, ref) => {
  var {
    unmountOnExit,
    in: isOpen,
    reverse = true,
    className,
    offsetX = 0,
    offsetY = 8,
    transition: transition3,
    transitionEnd,
    delay
  } = props, rest = _objectWithoutPropertiesLoose7(props, ["unmountOnExit", "in", "reverse", "className", "offsetX", "offsetY", "transition", "transitionEnd", "delay"]);
  var show = unmountOnExit ? isOpen && unmountOnExit : true;
  var animate3 = isOpen || unmountOnExit ? "enter" : "exit";
  var custom = {
    offsetX,
    offsetY,
    reverse,
    transition: transition3,
    transitionEnd,
    delay
  };
  return React37.createElement(AnimatePresence, {
    custom
  }, show && React37.createElement(motion.div, _extends24({
    ref,
    className: cx("chakra-offset-slide", className),
    custom
  }, slideFadeConfig, {
    animate: animate3
  }, rest)));
});
if (__DEV__) {
  SlideFade.displayName = "SlideFade";
}

// node_modules/@chakra-ui/accordion/dist/esm/accordion.js
var React38 = __toModule(require_react());

// node_modules/@chakra-ui/descendant/dist/esm/use-descendant.js
var import_react50 = __toModule(require_react());

// node_modules/@chakra-ui/descendant/dist/esm/utils.js
var import_react49 = __toModule(require_react());
function sortNodes(nodes) {
  return nodes.sort((a2, b2) => {
    var compare = a2.compareDocumentPosition(b2);
    if (compare & Node.DOCUMENT_POSITION_FOLLOWING || compare & Node.DOCUMENT_POSITION_CONTAINED_BY) {
      return -1;
    }
    if (compare & Node.DOCUMENT_POSITION_PRECEDING || compare & Node.DOCUMENT_POSITION_CONTAINS) {
      return 1;
    }
    if (compare & Node.DOCUMENT_POSITION_DISCONNECTED || compare & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC) {
      throw Error("Cannot sort the given nodes.");
    } else {
      return 0;
    }
  });
}
var isElement = (el) => typeof el == "object" && "nodeType" in el && el.nodeType === Node.ELEMENT_NODE;
function getNextIndex(current, max, loop) {
  var next = current + 1;
  if (loop && next >= max)
    next = 0;
  return next;
}
function getPrevIndex(current, max, loop) {
  var next = current - 1;
  if (loop && next < 0)
    next = max;
  return next;
}
var useSafeLayoutEffect2 = typeof window !== "undefined" ? import_react49.useLayoutEffect : import_react49.useEffect;
var cast = (value) => value;

// node_modules/@chakra-ui/descendant/dist/esm/descendant.js
function _extends25() {
  _extends25 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends25.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var DescendantsManager = class {
  constructor() {
    var _this = this;
    _defineProperty(this, "descendants", new Map());
    _defineProperty(this, "register", (nodeOrOptions) => {
      if (nodeOrOptions == null)
        return;
      if (isElement(nodeOrOptions)) {
        return this.registerNode(nodeOrOptions);
      }
      return (node2) => {
        this.registerNode(node2, nodeOrOptions);
      };
    });
    _defineProperty(this, "unregister", (node2) => {
      this.descendants.delete(node2);
      var sorted = sortNodes(Array.from(this.descendants.keys()));
      this.assignIndex(sorted);
    });
    _defineProperty(this, "destroy", () => {
      this.descendants.clear();
    });
    _defineProperty(this, "assignIndex", (descendants) => {
      this.descendants.forEach((descendant) => {
        var index2 = descendants.indexOf(descendant.node);
        descendant.index = index2;
        descendant.node.dataset.index = descendant.index.toString();
      });
    });
    _defineProperty(this, "count", () => this.descendants.size);
    _defineProperty(this, "enabledCount", () => this.enabledValues().length);
    _defineProperty(this, "values", () => {
      var values = Array.from(this.descendants.values());
      return values.sort((a2, b2) => a2.index - b2.index);
    });
    _defineProperty(this, "enabledValues", () => {
      return this.values().filter((descendant) => !descendant.disabled);
    });
    _defineProperty(this, "item", (index2) => {
      if (this.count() === 0)
        return void 0;
      return this.values()[index2];
    });
    _defineProperty(this, "enabledItem", (index2) => {
      if (this.enabledCount() === 0)
        return void 0;
      return this.enabledValues()[index2];
    });
    _defineProperty(this, "first", () => this.item(0));
    _defineProperty(this, "firstEnabled", () => this.enabledItem(0));
    _defineProperty(this, "last", () => this.item(this.descendants.size - 1));
    _defineProperty(this, "lastEnabled", () => {
      var lastIndex = this.enabledValues().length - 1;
      return this.enabledItem(lastIndex);
    });
    _defineProperty(this, "indexOf", (node2) => {
      var _this$descendants$get, _this$descendants$get2;
      if (!node2)
        return -1;
      return (_this$descendants$get = (_this$descendants$get2 = this.descendants.get(node2)) == null ? void 0 : _this$descendants$get2.index) != null ? _this$descendants$get : -1;
    });
    _defineProperty(this, "enabledIndexOf", (node2) => {
      if (node2 == null)
        return -1;
      return this.enabledValues().findIndex((i) => i.node.isSameNode(node2));
    });
    _defineProperty(this, "next", function(index2, loop) {
      if (loop === void 0) {
        loop = true;
      }
      var next = getNextIndex(index2, _this.count(), loop);
      return _this.item(next);
    });
    _defineProperty(this, "nextEnabled", function(index2, loop) {
      if (loop === void 0) {
        loop = true;
      }
      var item = _this.item(index2);
      if (!item)
        return;
      var enabledIndex = _this.enabledIndexOf(item.node);
      var nextEnabledIndex = getNextIndex(enabledIndex, _this.enabledCount(), loop);
      return _this.enabledItem(nextEnabledIndex);
    });
    _defineProperty(this, "prev", function(index2, loop) {
      if (loop === void 0) {
        loop = true;
      }
      var prev = getPrevIndex(index2, _this.count() - 1, loop);
      return _this.item(prev);
    });
    _defineProperty(this, "prevEnabled", function(index2, loop) {
      if (loop === void 0) {
        loop = true;
      }
      var item = _this.item(index2);
      if (!item)
        return;
      var enabledIndex = _this.enabledIndexOf(item.node);
      var prevEnabledIndex = getPrevIndex(enabledIndex, _this.enabledCount() - 1, loop);
      return _this.enabledItem(prevEnabledIndex);
    });
    _defineProperty(this, "registerNode", (node2, options) => {
      if (!node2 || this.descendants.has(node2))
        return;
      var keys2 = Array.from(this.descendants.keys()).concat(node2);
      var sorted = sortNodes(keys2);
      if (options != null && options.disabled) {
        options.disabled = !!options.disabled;
      }
      var descendant = _extends25({
        node: node2,
        index: -1
      }, options);
      this.descendants.set(node2, descendant);
      this.assignIndex(sorted);
    });
  }
};

// node_modules/@chakra-ui/descendant/dist/esm/use-descendant.js
function useDescendants() {
  var [descendants] = (0, import_react50.useState)(() => new DescendantsManager());
  useSafeLayoutEffect2(() => {
    return () => descendants.destroy();
  });
  return descendants;
}
var [DescendantsContextProvider, useDescendantsContext] = createContext({
  name: "DescendantsProvider",
  errorMessage: "useDescendantsContext must be used within DescendantsProvider"
});
function useDescendant(options) {
  var descendants = useDescendantsContext();
  var [index2, setIndex] = (0, import_react50.useState)(-1);
  var ref = (0, import_react50.useRef)(null);
  useSafeLayoutEffect2(() => {
    return () => {
      if (!ref.current)
        return;
      descendants.unregister(ref.current);
    };
  }, []);
  useSafeLayoutEffect2(() => {
    if (!ref.current)
      return;
    var dataIndex = Number(ref.current.dataset.index);
    if (index2 != dataIndex && !Number.isNaN(dataIndex)) {
      setIndex(dataIndex);
    }
  });
  var refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);
  return {
    descendants,
    index: index2,
    enabledIndex: descendants.enabledIndexOf(ref.current),
    register: mergeRefs(refCallback, ref)
  };
}
function createDescendantContext() {
  var ContextProvider = cast(DescendantsContextProvider);
  var _useDescendantsContext = () => cast(useDescendantsContext());
  var _useDescendant = (options) => useDescendant(options);
  var _useDescendants = () => useDescendants();
  return [
    ContextProvider,
    _useDescendantsContext,
    _useDescendants,
    _useDescendant
  ];
}

// node_modules/@chakra-ui/accordion/dist/esm/use-accordion.js
var import_react51 = __toModule(require_react());
function _extends26() {
  _extends26 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends26.apply(this, arguments);
}
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [AccordionDescendantsProvider, useAccordionDescendantsContext, useAccordionDescendants, useAccordionDescendant] = createDescendantContext();
function useAccordion(props) {
  var {
    onChange,
    defaultIndex,
    index: indexProp,
    allowMultiple,
    allowToggle
  } = props, htmlProps = _objectWithoutPropertiesLoose8(props, ["onChange", "defaultIndex", "index", "allowMultiple", "allowToggle"]);
  allowMultipleWarning(props);
  allowMultipleAndAllowToggleWarning(props);
  var descendants = useAccordionDescendants();
  var [focusedIndex, setFocusedIndex] = (0, import_react51.useState)(-1);
  useUnmountEffect(() => {
    setFocusedIndex(-1);
  });
  var [index2, setIndex] = useControllableState({
    value: indexProp,
    defaultValue() {
      if (allowMultiple)
        return defaultIndex != null ? defaultIndex : [];
      return defaultIndex != null ? defaultIndex : -1;
    },
    onChange
  });
  var getAccordionItemProps = (idx) => {
    var isOpen = false;
    if (idx !== null) {
      isOpen = isArray(index2) ? index2.includes(idx) : index2 === idx;
    }
    var onChange2 = (isOpen2) => {
      if (idx === null)
        return;
      if (allowMultiple && isArray(index2)) {
        var nextState = isOpen2 ? addItem(index2, idx) : removeItem(index2, idx);
        setIndex(nextState);
      } else if (isOpen2) {
        setIndex(idx);
      } else if (allowToggle) {
        setIndex(-1);
      }
    };
    return {
      isOpen,
      onChange: onChange2
    };
  };
  return {
    index: index2,
    setIndex,
    htmlProps,
    getAccordionItemProps,
    focusedIndex,
    setFocusedIndex,
    descendants
  };
}
var [AccordionProvider, useAccordionContext] = createContext({
  name: "AccordionContext",
  errorMessage: "useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`"
});
function useAccordionItem(props) {
  var {
    isDisabled,
    isFocusable,
    id: id2
  } = props, htmlProps = _objectWithoutPropertiesLoose8(props, ["isDisabled", "isFocusable", "id"]);
  var {
    getAccordionItemProps,
    setFocusedIndex
  } = useAccordionContext();
  var buttonRef = (0, import_react51.useRef)(null);
  var [buttonId, panelId] = useIds(id2, "accordion-button", "accordion-panel");
  focusableNotDisabledWarning(props);
  var {
    register,
    index: index2,
    descendants
  } = useAccordionDescendant({
    disabled: isDisabled && !isFocusable
  });
  var {
    isOpen,
    onChange
  } = getAccordionItemProps(index2 === -1 ? null : index2);
  warnIfOpenAndDisabled({
    isOpen,
    isDisabled
  });
  var onOpen = () => {
    onChange == null ? void 0 : onChange(true);
  };
  var onClose = () => {
    onChange == null ? void 0 : onChange(false);
  };
  var onClick = (0, import_react51.useCallback)(() => {
    onChange == null ? void 0 : onChange(!isOpen);
    setFocusedIndex(index2);
  }, [index2, setFocusedIndex, isOpen, onChange]);
  var onKeyDown = (0, import_react51.useCallback)((event) => {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      ArrowDown: () => {
        var next = descendants.nextEnabled(index2);
        if (next)
          focus(next.node);
      },
      ArrowUp: () => {
        var prev = descendants.prevEnabled(index2);
        if (prev)
          focus(prev.node);
      },
      Home: () => {
        var first = descendants.firstEnabled();
        if (first)
          focus(first.node);
      },
      End: () => {
        var last = descendants.lastEnabled();
        if (last)
          focus(last.node);
      }
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [descendants, index2]);
  var onFocus3 = (0, import_react51.useCallback)(() => {
    setFocusedIndex(index2);
  }, [setFocusedIndex, index2]);
  var getButtonProps = (0, import_react51.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends26({}, props2, {
      type: "button",
      ref: mergeRefs(register, buttonRef, ref),
      id: buttonId,
      disabled: !!isDisabled,
      "aria-expanded": !!isOpen,
      "aria-controls": panelId,
      onClick: callAllHandlers(props2.onClick, onClick),
      onFocus: callAllHandlers(props2.onFocus, onFocus3),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown)
    });
  }, [buttonId, isDisabled, isOpen, onClick, onFocus3, onKeyDown, panelId, register]);
  var getPanelProps = (0, import_react51.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends26({}, props2, {
      ref,
      role: "region",
      id: panelId,
      "aria-labelledby": buttonId,
      hidden: !isOpen
    });
  }, [buttonId, isOpen, panelId]);
  return {
    isOpen,
    isDisabled,
    isFocusable,
    onOpen,
    onClose,
    getButtonProps,
    getPanelProps,
    htmlProps
  };
}
function allowMultipleWarning(props) {
  var index2 = props.index || props.defaultIndex;
  var condition = !isUndefined(index2) && !isArray(index2) && props.allowMultiple;
  warn({
    condition: !!condition,
    message: "If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: " + typeof index2 + ","
  });
}
function allowMultipleAndAllowToggleWarning(props) {
  warn({
    condition: !!(props.allowMultiple && props.allowToggle),
    message: "If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not"
  });
}
function focusableNotDisabledWarning(props) {
  warn({
    condition: !!(props.isFocusable && !props.isDisabled),
    message: "Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\n    "
  });
}
function warnIfOpenAndDisabled(props) {
  warn({
    condition: props.isOpen && !!props.isDisabled,
    message: "Cannot open a disabled accordion item"
  });
}

// node_modules/@chakra-ui/accordion/dist/esm/accordion.js
function _extends27() {
  _extends27 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends27.apply(this, arguments);
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Accordion = forwardRef((_ref2, ref) => {
  var {
    children,
    reduceMotion
  } = _ref2, props = _objectWithoutPropertiesLoose9(_ref2, ["children", "reduceMotion"]);
  var styles2 = useMultiStyleConfig("Accordion", props);
  var ownProps = omitThemingProps(props);
  var _useAccordion = useAccordion(ownProps), {
    htmlProps,
    descendants
  } = _useAccordion, context = _objectWithoutPropertiesLoose9(_useAccordion, ["htmlProps", "descendants"]);
  var ctx = React38.useMemo(() => _extends27({}, context, {
    reduceMotion: !!reduceMotion
  }), [context, reduceMotion]);
  return React38.createElement(AccordionDescendantsProvider, {
    value: descendants
  }, React38.createElement(AccordionProvider, {
    value: ctx
  }, React38.createElement(StylesProvider, {
    value: styles2
  }, React38.createElement(chakra.div, _extends27({
    ref
  }, htmlProps, {
    className: cx("chakra-accordion", props.className)
  }), children))));
});
if (__DEV__) {
  Accordion.displayName = "Accordion";
}
var [AccordionItemProvider, useAccordionItemContext] = createContext({
  name: "AccordionItemContext",
  errorMessage: "useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` "
});
var AccordionItem = forwardRef((props, ref) => {
  var {
    children,
    className
  } = props;
  var _useAccordionItem = useAccordionItem(props), {
    htmlProps
  } = _useAccordionItem, context = _objectWithoutPropertiesLoose9(_useAccordionItem, ["htmlProps"]);
  var styles2 = useStyles();
  var containerStyles = _extends27({}, styles2.container, {
    overflowAnchor: "none"
  });
  var ctx = React38.useMemo(() => context, [context]);
  return React38.createElement(AccordionItemProvider, {
    value: ctx
  }, React38.createElement(chakra.div, _extends27({
    ref
  }, htmlProps, {
    className: cx("chakra-accordion__item", className),
    __css: containerStyles
  }), runIfFn(children, {
    isExpanded: !!context.isOpen,
    isDisabled: !!context.isDisabled
  })));
});
if (__DEV__) {
  AccordionItem.displayName = "AccordionItem";
}
function useAccordionItemState() {
  var {
    isOpen,
    isDisabled,
    onClose,
    onOpen
  } = useAccordionItemContext();
  return {
    isOpen,
    onClose,
    isDisabled,
    onOpen
  };
}
var AccordionButton = forwardRef((props, ref) => {
  var {
    getButtonProps
  } = useAccordionItemContext();
  var buttonProps = getButtonProps(props, ref);
  var styles2 = useStyles();
  var buttonStyles = _extends27({
    display: "flex",
    alignItems: "center",
    width: "100%",
    transition: "all 0.2s",
    outline: 0
  }, styles2.button);
  return React38.createElement(chakra.button, _extends27({}, buttonProps, {
    className: cx("chakra-accordion__button", props.className),
    __css: buttonStyles
  }));
});
if (__DEV__) {
  AccordionButton.displayName = "AccordionButton";
}
var AccordionPanel = forwardRef((props, ref) => {
  var {
    reduceMotion
  } = useAccordionContext();
  var {
    getPanelProps,
    isOpen
  } = useAccordionItemContext();
  var panelProps = getPanelProps(props, ref);
  var _className = cx("chakra-accordion__panel", props.className);
  var styles2 = useStyles();
  if (!reduceMotion) {
    delete panelProps.hidden;
  }
  var child = React38.createElement(chakra.div, _extends27({}, panelProps, {
    __css: styles2.panel,
    className: _className
  }));
  if (!reduceMotion) {
    return React38.createElement(Collapse, {
      in: isOpen
    }, child);
  }
  return child;
});
if (__DEV__) {
  AccordionPanel.displayName = "AccordionPanel";
}
var AccordionIcon = (props) => {
  var {
    isOpen,
    isDisabled
  } = useAccordionItemContext();
  var {
    reduceMotion
  } = useAccordionContext();
  var _className = cx("chakra-accordion__icon", props.className);
  var styles2 = useStyles();
  var iconStyles = _extends27({
    opacity: isDisabled ? 0.4 : 1,
    transform: isOpen ? "rotate(-180deg)" : void 0,
    transition: reduceMotion ? void 0 : "transform 0.2s",
    transformOrigin: "center"
  }, styles2.icon);
  return React38.createElement(Icon, _extends27({
    viewBox: "0 0 24 24",
    "aria-hidden": true,
    className: _className,
    __css: iconStyles
  }, props), React38.createElement("path", {
    fill: "currentColor",
    d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }));
};
if (__DEV__) {
  AccordionIcon.displayName = "AccordionIcon";
}

// node_modules/@chakra-ui/alert/dist/esm/alert.js
var React40 = __toModule(require_react());

// node_modules/@chakra-ui/alert/dist/esm/icons.js
var React39 = __toModule(require_react());
function _extends28() {
  _extends28 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends28.apply(this, arguments);
}
var CheckIcon = (props) => React39.createElement(Icon, _extends28({
  viewBox: "0 0 24 24"
}, props), React39.createElement("path", {
  fill: "currentColor",
  d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
}));
var InfoIcon = (props) => React39.createElement(Icon, _extends28({
  viewBox: "0 0 24 24"
}, props), React39.createElement("path", {
  fill: "currentColor",
  d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
}));
var WarningIcon = (props) => React39.createElement(Icon, _extends28({
  viewBox: "0 0 24 24"
}, props), React39.createElement("path", {
  fill: "currentColor",
  d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
}));

// node_modules/@chakra-ui/alert/dist/esm/alert.js
function _extends29() {
  _extends29 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends29.apply(this, arguments);
}
function _objectWithoutPropertiesLoose10(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var STATUSES = {
  info: {
    icon: InfoIcon,
    colorScheme: "blue"
  },
  warning: {
    icon: WarningIcon,
    colorScheme: "orange"
  },
  success: {
    icon: CheckIcon,
    colorScheme: "green"
  },
  error: {
    icon: WarningIcon,
    colorScheme: "red"
  }
};
var [AlertProvider, useAlertContext] = createContext({
  name: "AlertContext",
  errorMessage: "useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`"
});
var Alert = forwardRef((props, ref) => {
  var _props$colorScheme;
  var _omitThemingProps = omitThemingProps(props), {
    status = "info"
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose10(_omitThemingProps, ["status"]);
  var colorScheme = (_props$colorScheme = props.colorScheme) != null ? _props$colorScheme : STATUSES[status].colorScheme;
  var styles2 = useMultiStyleConfig("Alert", _extends29({}, props, {
    colorScheme
  }));
  var alertStyles = _extends29({
    width: "100%",
    display: "flex",
    alignItems: "center",
    position: "relative",
    overflow: "hidden"
  }, styles2.container);
  return React40.createElement(AlertProvider, {
    value: {
      status
    }
  }, React40.createElement(StylesProvider, {
    value: styles2
  }, React40.createElement(chakra.div, _extends29({
    role: "alert",
    ref
  }, rest, {
    className: cx("chakra-alert", props.className),
    __css: alertStyles
  }))));
});
var AlertTitle = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React40.createElement(chakra.div, _extends29({
    ref
  }, props, {
    className: cx("chakra-alert__title", props.className),
    __css: styles2.title
  }));
});
var AlertDescription = forwardRef((props, ref) => {
  var styles2 = useStyles();
  var descriptionStyles = _extends29({
    display: "inline"
  }, styles2.description);
  return React40.createElement(chakra.div, _extends29({
    ref
  }, props, {
    className: cx("chakra-alert__desc", props.className),
    __css: descriptionStyles
  }));
});
var AlertIcon = (props) => {
  var {
    status
  } = useAlertContext();
  var {
    icon: BaseIcon
  } = STATUSES[status];
  var styles2 = useStyles();
  return React40.createElement(chakra.span, _extends29({
    display: "inherit"
  }, props, {
    className: cx("chakra-alert__icon", props.className),
    __css: styles2.icon
  }), React40.createElement(BaseIcon, {
    w: "100%",
    h: "100%"
  }));
};

// node_modules/@chakra-ui/image/dist/esm/image.js
var React41 = __toModule(require_react());

// node_modules/@chakra-ui/image/dist/esm/use-image.js
var import_react52 = __toModule(require_react());
function useImage(props) {
  var {
    src,
    srcSet,
    onLoad,
    onError,
    crossOrigin,
    sizes: sizes23,
    ignoreFallback
  } = props;
  var [status, setStatus] = (0, import_react52.useState)("pending");
  (0, import_react52.useEffect)(() => {
    setStatus(src ? "loading" : "pending");
  }, [src]);
  var imageRef = (0, import_react52.useRef)();
  var load = (0, import_react52.useCallback)(() => {
    if (!src)
      return;
    flush();
    var img = new Image();
    img.src = src;
    if (crossOrigin) {
      img.crossOrigin = crossOrigin;
    }
    if (srcSet) {
      img.srcset = srcSet;
    }
    if (sizes23) {
      img.sizes = sizes23;
    }
    img.onload = (event) => {
      flush();
      setStatus("loaded");
      onLoad == null ? void 0 : onLoad(event);
    };
    img.onerror = (error) => {
      flush();
      setStatus("failed");
      onError == null ? void 0 : onError(error);
    };
    imageRef.current = img;
  }, [src, crossOrigin, srcSet, sizes23, onLoad, onError]);
  var flush = () => {
    if (imageRef.current) {
      imageRef.current.onload = null;
      imageRef.current.onerror = null;
      imageRef.current = null;
    }
  };
  useSafeLayoutEffect(() => {
    if (ignoreFallback)
      return void 0;
    if (status === "loading") {
      load();
    }
    return () => {
      flush();
    };
  }, [status, load, ignoreFallback]);
  return ignoreFallback ? "loaded" : status;
}

// node_modules/@chakra-ui/image/dist/esm/image.js
function _extends30() {
  _extends30 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends30.apply(this, arguments);
}
function _objectWithoutPropertiesLoose11(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var NativeImage = React41.forwardRef((props, ref) => {
  var {
    htmlWidth,
    htmlHeight,
    alt
  } = props, rest = _objectWithoutPropertiesLoose11(props, ["htmlWidth", "htmlHeight", "alt"]);
  return React41.createElement("img", _extends30({
    width: htmlWidth,
    height: htmlHeight,
    ref,
    alt
  }, rest));
});
var Image2 = forwardRef((props, ref) => {
  var {
    fallbackSrc,
    fallback,
    src,
    align,
    fit,
    loading,
    ignoreFallback,
    crossOrigin
  } = props, rest = _objectWithoutPropertiesLoose11(props, ["fallbackSrc", "fallback", "src", "align", "fit", "loading", "ignoreFallback", "crossOrigin"]);
  var shouldIgnore = loading != null || ignoreFallback;
  var status = useImage(_extends30({}, props, {
    ignoreFallback: shouldIgnore
  }));
  var shared = _extends30({
    ref,
    objectFit: fit,
    objectPosition: align
  }, shouldIgnore ? rest : omit(rest, ["onError", "onLoad"]));
  if (status !== "loaded") {
    if (fallback)
      return fallback;
    return React41.createElement(chakra.img, _extends30({
      as: NativeImage,
      className: "chakra-image__placeholder",
      src: fallbackSrc
    }, shared));
  }
  return React41.createElement(chakra.img, _extends30({
    as: NativeImage,
    src,
    crossOrigin,
    loading,
    className: "chakra-image"
  }, shared));
});
var Img = forwardRef((props, ref) => React41.createElement(chakra.img, _extends30({
  ref,
  as: NativeImage,
  className: "chakra-image"
}, props)));
if (__DEV__) {
  Image2.displayName = "Image";
}

// node_modules/@chakra-ui/avatar/dist/esm/avatar.js
var React42 = __toModule(require_react());
function _objectWithoutPropertiesLoose12(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends31() {
  _extends31 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends31.apply(this, arguments);
}
var AvatarBadge = forwardRef((props, ref) => {
  var styles2 = useStyles();
  var badgeStyles = _extends31({
    position: "absolute",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    insetEnd: "0",
    bottom: "0"
  }, styles2.badge);
  return React42.createElement(chakra.div, _extends31({
    ref
  }, props, {
    className: cx("chakra-avatar__badge", props.className),
    __css: badgeStyles
  }));
});
if (__DEV__) {
  AvatarBadge.displayName = "AvatarBadge";
}
function initials(name) {
  var [firstName, lastName] = name.split(" ");
  return firstName && lastName ? "" + firstName.charAt(0) + lastName.charAt(0) : firstName.charAt(0);
}
var AvatarName = (props) => {
  var {
    name,
    getInitials
  } = props, rest = _objectWithoutPropertiesLoose12(props, ["name", "getInitials"]);
  var styles2 = useStyles();
  return React42.createElement(chakra.div, _extends31({
    role: "img",
    "aria-label": name
  }, rest, {
    __css: styles2.label
  }), name ? getInitials == null ? void 0 : getInitials(name) : null);
};
var DefaultIcon = (props) => React42.createElement(chakra.svg, _extends31({
  viewBox: "0 0 128 128",
  color: "#fff",
  width: "100%",
  height: "100%",
  className: "chakra-avatar__svg"
}, props), React42.createElement("path", {
  fill: "currentColor",
  d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
}), React42.createElement("path", {
  fill: "currentColor",
  d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
}));
var baseStyle41 = {
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  textAlign: "center",
  textTransform: "uppercase",
  fontWeight: "medium",
  position: "relative",
  flexShrink: 0
};
var Avatar = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Avatar", props);
  var _omitThemingProps = omitThemingProps(props), {
    src,
    name,
    showBorder,
    borderRadius = "full",
    onError,
    getInitials = initials,
    icon = React42.createElement(DefaultIcon, null),
    iconLabel = " avatar",
    loading,
    children,
    borderColor
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose12(_omitThemingProps, ["src", "name", "showBorder", "borderRadius", "onError", "getInitials", "icon", "iconLabel", "loading", "children", "borderColor"]);
  var avatarStyles = _extends31({
    borderRadius,
    borderWidth: showBorder ? "2px" : void 0
  }, baseStyle41, styles2.container);
  if (borderColor) {
    avatarStyles.borderColor = borderColor;
  }
  return React42.createElement(chakra.span, _extends31({
    ref
  }, rest, {
    className: cx("chakra-avatar", props.className),
    __css: avatarStyles
  }), React42.createElement(StylesProvider, {
    value: styles2
  }, React42.createElement(AvatarImage, {
    src,
    loading,
    onError,
    getInitials,
    name,
    borderRadius,
    icon,
    iconLabel
  }), children));
});
if (__DEV__) {
  Avatar.displayName = "Avatar";
}
var AvatarImage = (props) => {
  var {
    src,
    onError,
    getInitials,
    name,
    borderRadius,
    loading,
    iconLabel,
    icon = React42.createElement(DefaultIcon, null)
  } = props;
  var status = useImage({
    src,
    onError
  });
  var hasLoaded = status === "loaded";
  var showFallback = !src || !hasLoaded;
  if (showFallback) {
    return name ? React42.createElement(AvatarName, {
      className: "chakra-avatar__initials",
      getInitials,
      name
    }) : React42.cloneElement(icon, {
      role: "img",
      "aria-label": iconLabel
    });
  }
  return React42.createElement(chakra.img, {
    src,
    alt: name,
    className: "chakra-avatar__img",
    loading,
    __css: {
      width: "100%",
      height: "100%",
      objectFit: "cover",
      borderRadius
    }
  });
};
if (__DEV__) {
  AvatarImage.displayName = "AvatarImage";
}

// node_modules/@chakra-ui/avatar/dist/esm/avatar-group.js
var React43 = __toModule(require_react());
function _extends32() {
  _extends32 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends32.apply(this, arguments);
}
function _objectWithoutPropertiesLoose13(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var AvatarGroup = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Avatar", props);
  var _omitThemingProps = omitThemingProps(props), {
    children,
    borderColor,
    max,
    spacing: spacing2 = "-0.75rem",
    borderRadius = "full"
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose13(_omitThemingProps, ["children", "borderColor", "max", "spacing", "borderRadius"]);
  var validChildren = getValidChildren(children);
  var childrenWithinMax = max ? validChildren.slice(0, max) : validChildren;
  var excess = max != null && validChildren.length - max;
  var reversedChildren = childrenWithinMax.reverse();
  var clones = reversedChildren.map((child, index2) => {
    var _child$props$borderCo;
    var isFirstAvatar = index2 === 0;
    var childProps = {
      marginEnd: isFirstAvatar ? 0 : spacing2,
      size: props.size,
      borderColor: (_child$props$borderCo = child.props.borderColor) != null ? _child$props$borderCo : borderColor,
      showBorder: true
    };
    return React43.cloneElement(child, filterUndefined(childProps));
  });
  var groupStyles = {
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end",
    flexDirection: "row-reverse"
  };
  var excessStyles = _extends32({
    borderRadius,
    marginStart: spacing2
  }, baseStyle41, styles2.excessLabel);
  return React43.createElement(chakra.div, _extends32({
    ref,
    role: "group",
    __css: groupStyles
  }, rest, {
    className: cx("chakra-avatar__group", props.className)
  }), excess > 0 && React43.createElement(chakra.span, {
    className: "chakra-avatar__excess",
    __css: excessStyles
  }, "+" + excess), clones);
});
if (__DEV__) {
  AvatarGroup.displayName = "AvatarGroup";
}

// node_modules/@chakra-ui/breadcrumb/dist/esm/breadcrumb.js
var React44 = __toModule(require_react());
function _extends33() {
  _extends33 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends33.apply(this, arguments);
}
function _objectWithoutPropertiesLoose14(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var BreadcrumbSeparator = forwardRef((props, ref) => {
  var {
    spacing: spacing2
  } = props, rest = _objectWithoutPropertiesLoose14(props, ["spacing"]);
  var styles2 = useStyles();
  var separatorStyles = _extends33({
    mx: spacing2
  }, styles2.separator);
  return React44.createElement(chakra.span, _extends33({
    ref,
    role: "presentation"
  }, rest, {
    __css: separatorStyles
  }));
});
if (__DEV__) {
  BreadcrumbSeparator.displayName = "BreadcrumbSeparator";
}
var BreadcrumbLink = forwardRef((props, ref) => {
  var {
    isCurrentPage,
    as,
    className
  } = props, rest = _objectWithoutPropertiesLoose14(props, ["isCurrentPage", "as", "className"]);
  var styles2 = useStyles();
  var sharedProps = _extends33({
    ref,
    as,
    className: cx("chakra-breadcrumb__link", className)
  }, rest);
  if (isCurrentPage) {
    return React44.createElement(chakra.span, _extends33({
      "aria-current": "page",
      __css: styles2.link
    }, sharedProps));
  }
  return React44.createElement(chakra.a, _extends33({
    __css: styles2.link
  }, sharedProps));
});
if (__DEV__) {
  BreadcrumbLink.displayName = "BreadcrumbLink";
}
var BreadcrumbItem = forwardRef((props, ref) => {
  var {
    isCurrentPage,
    separator,
    isLastChild,
    spacing: spacing2,
    children,
    className
  } = props, rest = _objectWithoutPropertiesLoose14(props, ["isCurrentPage", "separator", "isLastChild", "spacing", "children", "className"]);
  var validChildren = getValidChildren(children);
  var clones = validChildren.map((child) => {
    if (child.type === BreadcrumbLink) {
      return React44.cloneElement(child, {
        isCurrentPage
      });
    }
    if (child.type === BreadcrumbSeparator) {
      return React44.cloneElement(child, {
        spacing: spacing2,
        children: child.props.children || separator
      });
    }
    return child;
  });
  var styles2 = useStyles();
  var itemStyles = _extends33({
    display: "inline-flex",
    alignItems: "center"
  }, styles2.item);
  var _className = cx("chakra-breadcrumb__list-item", className);
  return React44.createElement(chakra.li, _extends33({
    ref,
    className: _className
  }, rest, {
    __css: itemStyles
  }), clones, !isLastChild && React44.createElement(BreadcrumbSeparator, {
    spacing: spacing2
  }, separator));
});
if (__DEV__) {
  BreadcrumbItem.displayName = "BreadcrumbItem";
}
var Breadcrumb = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Breadcrumb", props);
  var ownProps = omitThemingProps(props);
  var {
    children,
    spacing: spacing2 = "0.5rem",
    separator = "/",
    className
  } = ownProps, rest = _objectWithoutPropertiesLoose14(ownProps, ["children", "spacing", "separator", "className"]);
  var validChildren = getValidChildren(children);
  var count = validChildren.length;
  var clones = validChildren.map((child, index2) => React44.cloneElement(child, {
    separator,
    spacing: spacing2,
    isLastChild: count === index2 + 1
  }));
  var _className = cx("chakra-breadcrumb", className);
  return React44.createElement(chakra.nav, _extends33({
    ref,
    "aria-label": "breadcrumb",
    className: _className,
    __css: styles2.container
  }, rest), React44.createElement(StylesProvider, {
    value: styles2
  }, React44.createElement(chakra.ol, {
    className: "chakra-breadcrumb__list"
  }, clones)));
});
if (__DEV__) {
  Breadcrumb.displayName = "Breadcrumb";
}

// node_modules/@chakra-ui/checkbox/dist/esm/checkbox-group.js
var React45 = __toModule(require_react());

// node_modules/@chakra-ui/checkbox/dist/esm/use-checkbox-group.js
var import_react53 = __toModule(require_react());
function _extends34() {
  _extends34 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends34.apply(this, arguments);
}
function useCheckboxGroup(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    defaultValue,
    value: valueProp,
    onChange,
    isDisabled,
    isNative
  } = props;
  var onChangeProp = useCallbackRef(onChange);
  var [value, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue || [],
    onChange: onChangeProp
  });
  var handleChange = (0, import_react53.useCallback)((eventOrValue) => {
    if (!value)
      return;
    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);
    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);
    setValue(nextValue);
  }, [setValue, value]);
  var getCheckboxProps = (0, import_react53.useCallback)(function(props2) {
    if (props2 === void 0) {
      props2 = {};
    }
    var checkedKey = isNative ? "checked" : "isChecked";
    return _extends34({}, props2, {
      [checkedKey]: value.includes(props2.value),
      onChange: handleChange
    });
  }, [handleChange, isNative, value]);
  return {
    value,
    isDisabled,
    onChange: handleChange,
    setValue,
    getCheckboxProps
  };
}

// node_modules/@chakra-ui/checkbox/dist/esm/checkbox-group.js
var [CheckboxGroupProvider, useCheckboxGroupContext] = createContext({
  name: "CheckboxGroupContext",
  strict: false
});
var CheckboxGroup = (props) => {
  var {
    colorScheme,
    size: size2,
    variant,
    children,
    isDisabled
  } = props;
  var {
    value,
    onChange
  } = useCheckboxGroup(props);
  var group = React45.useMemo(() => ({
    size: size2,
    onChange,
    colorScheme,
    value,
    variant,
    isDisabled
  }), [size2, onChange, colorScheme, value, variant, isDisabled]);
  return React45.createElement(CheckboxGroupProvider, {
    value: group
  }, children);
};
if (__DEV__) {
  CheckboxGroup.displayName = "CheckboxGroup";
}

// node_modules/@chakra-ui/checkbox/dist/esm/checkbox.js
var React47 = __toModule(require_react());

// node_modules/@chakra-ui/checkbox/dist/esm/checkbox-icon.js
var React46 = __toModule(require_react());
function _objectWithoutPropertiesLoose15(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends35() {
  _extends35 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends35.apply(this, arguments);
}
var MotionSvg = "custom" in motion ? motion.custom(chakra.svg) : motion(chakra.svg);
var CheckIcon2 = (props) => React46.createElement(MotionSvg, _extends35({
  width: "1.2em",
  viewBox: "0 0 12 10",
  variants: {
    unchecked: {
      opacity: 0,
      strokeDashoffset: 16
    },
    checked: {
      opacity: 1,
      strokeDashoffset: 0,
      transition: {
        duration: 0.2
      }
    }
  },
  style: {
    fill: "none",
    strokeWidth: 2,
    stroke: "currentColor",
    strokeDasharray: 16
  }
}, props), React46.createElement("polyline", {
  points: "1.5 6 4.5 9 10.5 1"
}));
var IndeterminateIcon = (props) => React46.createElement(MotionSvg, _extends35({
  width: "1.2em",
  viewBox: "0 0 24 24",
  variants: {
    unchecked: {
      scaleX: 0.65,
      opacity: 0
    },
    checked: {
      scaleX: 1,
      opacity: 1,
      transition: {
        scaleX: {
          duration: 0
        },
        opacity: {
          duration: 0.02
        }
      }
    }
  },
  style: {
    stroke: "currentColor",
    strokeWidth: 4
  }
}, props), React46.createElement("line", {
  x1: "21",
  x2: "3",
  y1: "12",
  y2: "12"
}));
var CheckboxTransition = (_ref2) => {
  var {
    open,
    children
  } = _ref2;
  return React46.createElement(AnimatePresence, {
    initial: false
  }, open && React46.createElement(motion.div, {
    variants: {
      unchecked: {
        scale: 0.5
      },
      checked: {
        scale: 1
      }
    },
    initial: "unchecked",
    animate: "checked",
    exit: "unchecked",
    style: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      height: "100%"
    }
  }, children));
};
var CheckboxIcon = (props) => {
  var {
    isIndeterminate,
    isChecked
  } = props, rest = _objectWithoutPropertiesLoose15(props, ["isIndeterminate", "isChecked"]);
  var IconEl = isIndeterminate ? IndeterminateIcon : CheckIcon2;
  return React46.createElement(CheckboxTransition, {
    open: isChecked || isIndeterminate
  }, React46.createElement(IconEl, rest));
};

// node_modules/@chakra-ui/checkbox/dist/esm/use-checkbox.js
var import_react54 = __toModule(require_react());
function _extends36() {
  _extends36 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends36.apply(this, arguments);
}
function _objectWithoutPropertiesLoose16(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useCheckbox(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    defaultIsChecked,
    defaultChecked = defaultIsChecked,
    isChecked: checkedProp,
    isFocusable,
    isDisabled,
    isReadOnly,
    isRequired,
    onChange,
    isIndeterminate,
    isInvalid,
    name,
    value,
    id: id2,
    onBlur: onBlur3,
    onFocus: onFocus3,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-invalid": ariaInvalid,
    "aria-describedby": ariaDescribedBy
  } = props, htmlProps = _objectWithoutPropertiesLoose16(props, ["defaultIsChecked", "defaultChecked", "isChecked", "isFocusable", "isDisabled", "isReadOnly", "isRequired", "onChange", "isIndeterminate", "isInvalid", "name", "value", "id", "onBlur", "onFocus", "aria-label", "aria-labelledby", "aria-invalid", "aria-describedby"]);
  var onChangeProp = useCallbackRef(onChange);
  var onBlurProp = useCallbackRef(onBlur3);
  var onFocusProp = useCallbackRef(onFocus3);
  var [isFocused, setFocused] = useBoolean();
  var [isHovered, setHovered] = useBoolean();
  var [isActive, setActive] = useBoolean();
  var inputRef = (0, import_react54.useRef)(null);
  var [rootIsLabelElement, setRootIsLabelElement] = (0, import_react54.useState)(true);
  var [checkedState, setCheckedState] = (0, import_react54.useState)(!!defaultChecked);
  var [isControlled, isChecked] = useControllableProp(checkedProp, checkedState);
  warn({
    condition: !!defaultIsChecked,
    message: 'The "defaultIsChecked" prop has been deprecated and will be removed in a future version. Please use the "defaultChecked" prop instead, which mirrors default React checkbox behavior.'
  });
  var handleChange = (0, import_react54.useCallback)((event) => {
    if (isReadOnly || isDisabled) {
      event.preventDefault();
      return;
    }
    if (!isControlled) {
      if (isChecked) {
        setCheckedState(event.target.checked);
      } else {
        setCheckedState(isIndeterminate ? true : event.target.checked);
      }
    }
    onChangeProp == null ? void 0 : onChangeProp(event);
  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);
  useSafeLayoutEffect(() => {
    if (inputRef.current) {
      inputRef.current.indeterminate = Boolean(isIndeterminate);
    }
  }, [isIndeterminate]);
  var trulyDisabled = isDisabled && !isFocusable;
  var onKeyDown = (0, import_react54.useCallback)((event) => {
    if (event.key === " ") {
      setActive.on();
    }
  }, [setActive]);
  var onKeyUp = (0, import_react54.useCallback)((event) => {
    if (event.key === " ") {
      setActive.off();
    }
  }, [setActive]);
  useSafeLayoutEffect(() => {
    if (!inputRef.current)
      return;
    var notInSync = inputRef.current.checked !== isChecked;
    if (notInSync) {
      setCheckedState(inputRef.current.checked);
    }
  }, [inputRef.current]);
  var getCheckboxProps = (0, import_react54.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    var onPressDown = (event) => {
      event.preventDefault();
      setActive.on();
    };
    return _extends36({}, props2, {
      ref: forwardedRef,
      "data-active": dataAttr(isActive),
      "data-hover": dataAttr(isHovered),
      "data-checked": dataAttr(isChecked),
      "data-focus": dataAttr(isFocused),
      "data-indeterminate": dataAttr(isIndeterminate),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      "aria-hidden": true,
      onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),
      onMouseUp: callAllHandlers(props2.onMouseUp, setActive.off),
      onMouseEnter: callAllHandlers(props2.onMouseEnter, setHovered.on),
      onMouseLeave: callAllHandlers(props2.onMouseLeave, setHovered.off)
    });
  }, [isActive, isChecked, isDisabled, isFocused, isHovered, isIndeterminate, isInvalid, isReadOnly, setActive, setHovered.off, setHovered.on]);
  var getRootProps = (0, import_react54.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends36({}, htmlProps, props2, {
      ref: mergeRefs(forwardedRef, (node2) => {
        if (!node2)
          return;
        setRootIsLabelElement(node2.tagName === "LABEL");
      }),
      onClick: callAllHandlers(props2.onClick, () => {
        if (!rootIsLabelElement) {
          var _inputRef$current;
          (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.click();
          focus(inputRef.current, {
            nextTick: true
          });
        }
      }),
      "data-disabled": dataAttr(isDisabled)
    });
  }, [htmlProps, isDisabled, rootIsLabelElement]);
  var getInputProps = (0, import_react54.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    var onFocus4 = () => {
      scheduleMicrotask(setFocused.on);
    };
    return _extends36({}, props2, {
      ref: mergeRefs(inputRef, forwardedRef),
      type: "checkbox",
      name,
      value,
      id: id2,
      onChange: callAllHandlers(props2.onChange, handleChange),
      onBlur: callAllHandlers(props2.onBlur, onBlurProp, setFocused.off),
      onFocus: callAllHandlers(props2.onFocus, onFocusProp, onFocus4),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
      required: isRequired,
      checked: isChecked,
      disabled: trulyDisabled,
      readOnly: isReadOnly,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-invalid": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,
      "aria-describedby": ariaDescribedBy,
      "aria-disabled": isDisabled,
      style: visuallyHiddenStyle
    });
  }, [name, value, id2, handleChange, setFocused.off, setFocused.on, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled]);
  var getLabelProps = (0, import_react54.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends36({}, props2, {
      ref: forwardedRef,
      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),
      onTouchStart: callAllHandlers(props2.onTouchStart, stopEvent),
      "data-disabled": dataAttr(isDisabled),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    });
  }, [isChecked, isDisabled, isInvalid]);
  return {
    state: {
      isInvalid,
      isFocused,
      isChecked,
      isActive,
      isHovered,
      isIndeterminate,
      isDisabled,
      isReadOnly,
      isRequired
    },
    getRootProps,
    getCheckboxProps,
    getInputProps,
    getLabelProps,
    htmlProps
  };
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}

// node_modules/@chakra-ui/checkbox/dist/esm/checkbox.js
function _objectWithoutPropertiesLoose17(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends37() {
  _extends37 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends37.apply(this, arguments);
}
var CheckboxControl = chakra("span", {
  baseStyle: {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    verticalAlign: "top",
    userSelect: "none",
    flexShrink: 0
  }
});
var Label = chakra("label", {
  baseStyle: {
    cursor: "pointer",
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    position: "relative",
    _disabled: {
      cursor: "not-allowed"
    }
  }
});
var Checkbox = forwardRef((props, ref) => {
  var group = useCheckboxGroupContext();
  var mergedProps = _extends37({}, group, props);
  var styles2 = useMultiStyleConfig("Checkbox", mergedProps);
  var ownProps = omitThemingProps(props);
  var {
    spacing: spacing2 = "0.5rem",
    className,
    children,
    iconColor,
    iconSize,
    icon = React47.createElement(CheckboxIcon, null),
    isChecked: isCheckedProp,
    isDisabled = group == null ? void 0 : group.isDisabled,
    onChange: onChangeProp
  } = ownProps, rest = _objectWithoutPropertiesLoose17(ownProps, ["spacing", "className", "children", "iconColor", "iconSize", "icon", "isChecked", "isDisabled", "onChange"]);
  var isChecked = isCheckedProp;
  if (group != null && group.value && ownProps.value) {
    isChecked = group.value.includes(ownProps.value);
  }
  var onChange = onChangeProp;
  if (group != null && group.onChange && ownProps.value) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  var {
    state,
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps
  } = useCheckbox(_extends37({}, rest, {
    isDisabled,
    isChecked,
    onChange
  }));
  var iconStyles = React47.useMemo(() => _extends37({
    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,
    transform: state.isChecked || state.isIndeterminate ? "scale(1)" : "scale(0.95)",
    transition: "transform 200ms",
    fontSize: iconSize,
    color: iconColor
  }, styles2.icon), [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles2.icon]);
  var clonedIcon = React47.cloneElement(icon, {
    __css: iconStyles,
    isIndeterminate: state.isIndeterminate,
    isChecked: state.isChecked
  });
  return React47.createElement(Label, _extends37({
    __css: styles2.container,
    className: cx("chakra-checkbox", className)
  }, getRootProps()), React47.createElement("input", _extends37({
    className: "chakra-checkbox__input"
  }, getInputProps({}, ref))), React47.createElement(CheckboxControl, _extends37({
    __css: styles2.control,
    className: "chakra-checkbox__control"
  }, getCheckboxProps()), clonedIcon), children && React47.createElement(chakra.span, _extends37({
    className: "chakra-checkbox__label"
  }, getLabelProps(), {
    __css: _extends37({
      marginStart: spacing2
    }, styles2.label)
  }), children));
});
if (__DEV__) {
  Checkbox.displayName = "Checkbox";
}

// node_modules/@chakra-ui/close-button/dist/esm/close-button.js
var React48 = __toModule(require_react());
function _objectWithoutPropertiesLoose18(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends38() {
  _extends38 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends38.apply(this, arguments);
}
var CloseIcon = (props) => React48.createElement(Icon, _extends38({
  focusable: "false",
  "aria-hidden": true
}, props), React48.createElement("path", {
  fill: "currentColor",
  d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
}));
var CloseButton = forwardRef((props, ref) => {
  var styles2 = useStyleConfig("CloseButton", props);
  var _omitThemingProps = omitThemingProps(props), {
    children,
    isDisabled,
    __css
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose18(_omitThemingProps, ["children", "isDisabled", "__css"]);
  var baseStyle42 = {
    outline: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0
  };
  return React48.createElement(chakra.button, _extends38({
    type: "button",
    "aria-label": "Close",
    ref,
    disabled: isDisabled,
    __css: _extends38({}, baseStyle42, styles2, __css)
  }, rest), children || React48.createElement(CloseIcon, {
    width: "1em",
    height: "1em"
  }));
});
if (__DEV__) {
  CloseButton.displayName = "CloseButton";
}

// node_modules/@chakra-ui/counter/dist/esm/use-counter.js
var import_react55 = __toModule(require_react());
function useCounter(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    onChange,
    precision: precisionProp,
    defaultValue,
    value: valueProp,
    step: stepProp = 1,
    min = minSafeInteger,
    max = maxSafeInteger,
    keepWithinRange = true
  } = props;
  var onChangeProp = useCallbackRef(onChange);
  var [valueState, setValue] = (0, import_react55.useState)(() => {
    var _cast;
    if (defaultValue == null)
      return "";
    return (_cast = cast2(defaultValue, stepProp, precisionProp)) != null ? _cast : "";
  });
  var [isControlled, value] = useControllableProp(valueProp, valueState);
  var decimalPlaces = getDecimalPlaces(parse2(value), stepProp);
  var precision = precisionProp != null ? precisionProp : decimalPlaces;
  var update = (0, import_react55.useCallback)((next) => {
    if (next === value)
      return;
    if (!isControlled) {
      setValue(next.toString());
    }
    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse2(next));
  }, [onChangeProp, isControlled, value]);
  var clamp3 = (0, import_react55.useCallback)((value2) => {
    var nextValue = value2;
    if (keepWithinRange) {
      nextValue = clampValue(nextValue, min, max);
    }
    return toPrecision(nextValue, precision);
  }, [precision, keepWithinRange, max, min]);
  var increment = (0, import_react55.useCallback)(function(step) {
    if (step === void 0) {
      step = stepProp;
    }
    var next;
    if (value === "") {
      next = parse2(step);
    } else {
      next = parse2(value) + step;
    }
    next = clamp3(next);
    update(next);
  }, [clamp3, stepProp, update, value]);
  var decrement = (0, import_react55.useCallback)(function(step) {
    if (step === void 0) {
      step = stepProp;
    }
    var next;
    if (value === "") {
      next = parse2(-step);
    } else {
      next = parse2(value) - step;
    }
    next = clamp3(next);
    update(next);
  }, [clamp3, stepProp, update, value]);
  var reset = (0, import_react55.useCallback)(() => {
    var next;
    if (defaultValue == null) {
      next = "";
    } else {
      var _cast2;
      next = (_cast2 = cast2(defaultValue, stepProp, precisionProp)) != null ? _cast2 : min;
    }
    update(next);
  }, [defaultValue, precisionProp, stepProp, update, min]);
  var castValue = (0, import_react55.useCallback)((value2) => {
    var _cast3;
    var nextValue = (_cast3 = cast2(value2, stepProp, precision)) != null ? _cast3 : min;
    update(nextValue);
  }, [precision, stepProp, update, min]);
  var valueAsNumber = parse2(value);
  var isOutOfRange = valueAsNumber > max || valueAsNumber < min;
  var isAtMax = valueAsNumber === max;
  var isAtMin = valueAsNumber === min;
  return {
    isOutOfRange,
    isAtMax,
    isAtMin,
    precision,
    value,
    valueAsNumber,
    update,
    reset,
    increment,
    decrement,
    clamp: clamp3,
    cast: castValue,
    setValue
  };
}
function parse2(value) {
  return parseFloat(value.toString().replace(/[^\w.-]+/g, ""));
}
function getDecimalPlaces(value, step) {
  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));
}
function cast2(value, step, precision) {
  var parsedValue = parse2(value);
  if (Number.isNaN(parsedValue))
    return void 0;
  var decimalPlaces = getDecimalPlaces(parsedValue, step);
  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);
}

// node_modules/@chakra-ui/editable/dist/esm/editable.js
var React49 = __toModule(require_react());

// node_modules/@chakra-ui/editable/dist/esm/use-editable.js
var import_react56 = __toModule(require_react());
function _extends39() {
  _extends39 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends39.apply(this, arguments);
}
function _objectWithoutPropertiesLoose19(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useEditable(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    onChange: onChangeProp,
    onCancel: onCancelProp,
    onSubmit: onSubmitProp,
    value: valueProp,
    isDisabled,
    defaultValue,
    startWithEditView,
    isPreviewFocusable = true,
    submitOnBlur = true,
    selectAllOnFocus = true,
    placeholder,
    onEdit: onEditProp
  } = props, htmlProps = _objectWithoutPropertiesLoose19(props, ["onChange", "onCancel", "onSubmit", "value", "isDisabled", "defaultValue", "startWithEditView", "isPreviewFocusable", "submitOnBlur", "selectAllOnFocus", "placeholder", "onEdit"]);
  var defaultIsEditing = Boolean(startWithEditView && !isDisabled);
  var [isEditing, setIsEditing] = (0, import_react56.useState)(defaultIsEditing);
  var [value, setValue] = useControllableState({
    defaultValue: defaultValue || "",
    value: valueProp,
    onChange: onChangeProp
  });
  var [prevValue, setPrevValue] = (0, import_react56.useState)(value);
  var inputRef = (0, import_react56.useRef)(null);
  var previewRef = (0, import_react56.useRef)(null);
  var editButtonRef = (0, import_react56.useRef)(null);
  var cancelButtonRef = (0, import_react56.useRef)(null);
  var submitButtonRef = (0, import_react56.useRef)(null);
  useFocusOnPointerDown({
    ref: inputRef,
    enabled: isEditing,
    elements: [cancelButtonRef, submitButtonRef]
  });
  var isInteractive = !isEditing || !isDisabled;
  useUpdateEffect(() => {
    if (!isEditing) {
      focus(editButtonRef.current);
      return;
    }
    focus(inputRef.current, {
      selectTextIfInput: selectAllOnFocus
    });
    onEditProp == null ? void 0 : onEditProp();
  }, [isEditing, onEditProp, selectAllOnFocus]);
  var onEdit = (0, import_react56.useCallback)(() => {
    if (isInteractive) {
      setIsEditing(true);
    }
  }, [isInteractive]);
  var onCancel = (0, import_react56.useCallback)(() => {
    setIsEditing(false);
    setValue(prevValue);
    onCancelProp == null ? void 0 : onCancelProp(prevValue);
  }, [onCancelProp, setValue, prevValue]);
  var onSubmit = (0, import_react56.useCallback)(() => {
    setIsEditing(false);
    setPrevValue(value);
    onSubmitProp == null ? void 0 : onSubmitProp(value);
  }, [value, onSubmitProp]);
  var onChange = (0, import_react56.useCallback)((event) => {
    setValue(event.target.value);
  }, [setValue]);
  var onKeyDown = (0, import_react56.useCallback)((event) => {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      Escape: onCancel,
      Enter: (event2) => {
        if (!event2.shiftKey && !event2.metaKey) {
          onSubmit();
        }
      }
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [onCancel, onSubmit]);
  var isValueEmpty = isEmpty(value);
  var onBlur3 = (0, import_react56.useCallback)((event) => {
    var relatedTarget = getRelatedTarget(event);
    var targetIsCancel = contains(cancelButtonRef.current, relatedTarget);
    var targetIsSubmit = contains(submitButtonRef.current, relatedTarget);
    var isValidBlur = !targetIsCancel && !targetIsSubmit;
    if (isValidBlur && submitOnBlur) {
      onSubmit();
    }
  }, [submitOnBlur, onSubmit]);
  var getPreviewProps = (0, import_react56.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;
    return _extends39({}, props2, {
      ref: mergeRefs(ref, previewRef),
      children: isValueEmpty ? placeholder : value,
      hidden: isEditing,
      "aria-disabled": ariaAttr(isDisabled),
      tabIndex,
      onFocus: callAllHandlers(props2.onFocus, onEdit)
    });
  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, placeholder, value]);
  var getInputProps = (0, import_react56.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends39({}, props2, {
      hidden: !isEditing,
      placeholder,
      ref: mergeRefs(ref, inputRef),
      disabled: isDisabled,
      "aria-disabled": ariaAttr(isDisabled),
      value,
      onBlur: callAllHandlers(props2.onBlur, onBlur3),
      onChange: callAllHandlers(props2.onChange, onChange),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown)
    });
  }, [isDisabled, isEditing, onBlur3, onChange, onKeyDown, placeholder, value]);
  var getEditButtonProps = (0, import_react56.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends39({
      "aria-label": "Edit"
    }, props2, {
      type: "button",
      onClick: callAllHandlers(props2.onClick, onEdit),
      ref: mergeRefs(ref, editButtonRef)
    });
  }, [onEdit]);
  var getSubmitButtonProps = (0, import_react56.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends39({}, props2, {
      "aria-label": "Submit",
      ref: mergeRefs(submitButtonRef, ref),
      type: "button",
      onClick: callAllHandlers(props2.onClick, onSubmit)
    });
  }, [onSubmit]);
  var getCancelButtonProps = (0, import_react56.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends39({
      "aria-label": "Cancel",
      id: "cancel"
    }, props2, {
      ref: mergeRefs(cancelButtonRef, ref),
      type: "button",
      onClick: callAllHandlers(props2.onClick, onCancel)
    });
  }, [onCancel]);
  return {
    isEditing,
    isDisabled,
    isValueEmpty,
    value,
    onEdit,
    onCancel,
    onSubmit,
    getPreviewProps,
    getInputProps,
    getEditButtonProps,
    getSubmitButtonProps,
    getCancelButtonProps,
    htmlProps
  };
}

// node_modules/@chakra-ui/editable/dist/esm/editable.js
function _extends40() {
  _extends40 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends40.apply(this, arguments);
}
function _objectWithoutPropertiesLoose20(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [EditableProvider, useEditableContext] = createContext({
  name: "EditableContext",
  errorMessage: "useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`"
});
var Editable = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Editable", props);
  var ownProps = omitThemingProps(props);
  var _useEditable = useEditable(ownProps), {
    htmlProps
  } = _useEditable, context = _objectWithoutPropertiesLoose20(_useEditable, ["htmlProps"]);
  var {
    isEditing,
    onSubmit,
    onCancel,
    onEdit
  } = context;
  var _className = cx("chakra-editable", props.className);
  var children = runIfFn(props.children, {
    isEditing,
    onSubmit,
    onCancel,
    onEdit
  });
  return React49.createElement(EditableProvider, {
    value: context
  }, React49.createElement(StylesProvider, {
    value: styles2
  }, React49.createElement(chakra.div, _extends40({
    ref
  }, htmlProps, {
    className: _className
  }), children)));
});
if (__DEV__) {
  Editable.displayName = "Editable";
}
var commonStyles = {
  fontSize: "inherit",
  fontWeight: "inherit",
  textAlign: "inherit",
  bg: "transparent"
};
var EditablePreview = forwardRef((props, ref) => {
  var {
    getPreviewProps
  } = useEditableContext();
  var styles2 = useStyles();
  var previewProps = getPreviewProps(props, ref);
  var _className = cx("chakra-editable__preview", props.className);
  return React49.createElement(chakra.span, _extends40({}, previewProps, {
    __css: _extends40({
      cursor: "text",
      display: "inline-block"
    }, commonStyles, styles2.preview),
    className: _className
  }));
});
if (__DEV__) {
  EditablePreview.displayName = "EditablePreview";
}
var EditableInput = forwardRef((props, ref) => {
  var {
    getInputProps
  } = useEditableContext();
  var styles2 = useStyles();
  var inputProps = getInputProps(props, ref);
  var _className = cx("chakra-editable__input", props.className);
  return React49.createElement(chakra.input, _extends40({}, inputProps, {
    __css: _extends40({
      outline: 0
    }, commonStyles, styles2.input),
    className: _className
  }));
});
if (__DEV__) {
  EditableInput.displayName = "EditableInput";
}
function useEditableState() {
  var {
    isEditing,
    onSubmit,
    onCancel,
    onEdit,
    isDisabled
  } = useEditableContext();
  return {
    isEditing,
    onSubmit,
    onCancel,
    onEdit,
    isDisabled
  };
}
function useEditableControls() {
  var {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  } = useEditableContext();
  return {
    isEditing,
    getEditButtonProps,
    getCancelButtonProps,
    getSubmitButtonProps
  };
}

// node_modules/@chakra-ui/form-control/dist/esm/form-control.js
var React50 = __toModule(require_react());
function _extends41() {
  _extends41 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends41.apply(this, arguments);
}
function _objectWithoutPropertiesLoose21(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [FormControlProvider, useFormControlContext] = createContext({
  strict: false,
  name: "FormControlContext"
});
function useFormControlProvider(props) {
  var {
    id: idProp,
    isRequired,
    isInvalid,
    isDisabled,
    isReadOnly
  } = props, htmlProps = _objectWithoutPropertiesLoose21(props, ["id", "isRequired", "isInvalid", "isDisabled", "isReadOnly"]);
  var uuid = useId();
  var id2 = idProp || "field-" + uuid;
  var labelId = id2 + "-label";
  var feedbackId = id2 + "-feedback";
  var helpTextId = id2 + "-helptext";
  var [hasFeedbackText, setHasFeedbackText] = React50.useState(false);
  var [hasHelpText, setHasHelpText] = React50.useState(false);
  var [isFocused, setFocus2] = useBoolean();
  var getHelpTextProps = React50.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends41({
      id: helpTextId
    }, props2, {
      ref: mergeRefs(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasHelpText(true);
      })
    });
  }, [helpTextId]);
  var getLabelProps = React50.useCallback(function(props2, forwardedRef) {
    var _props$id, _props$htmlFor;
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends41({}, props2, {
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: (_props$id = props2.id) != null ? _props$id : labelId,
      htmlFor: (_props$htmlFor = props2.htmlFor) != null ? _props$htmlFor : id2
    });
  }, [id2, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);
  var getErrorMessageProps = React50.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends41({
      id: feedbackId
    }, props2, {
      ref: mergeRefs(forwardedRef, (node2) => {
        if (!node2)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    });
  }, [feedbackId]);
  var getRootProps = React50.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends41({}, props2, htmlProps, {
      ref: forwardedRef,
      role: "group"
    });
  }, [htmlProps]);
  var getRequiredIndicatorProps = React50.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends41({}, props2, {
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    });
  }, []);
  var onFocus3 = React50.useCallback(() => {
    scheduleMicrotask(setFocus2.on);
  }, [setFocus2]);
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled,
    isFocused: !!isFocused,
    onFocus: onFocus3,
    onBlur: setFocus2.off,
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id: id2,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Form", props);
  var ownProps = omitThemingProps(props);
  var _useFormControlProvid = useFormControlProvider(ownProps), {
    getRootProps
  } = _useFormControlProvid, context = _objectWithoutPropertiesLoose21(_useFormControlProvid, ["getRootProps", "htmlProps"]);
  var className = cx("chakra-form-control", props.className);
  var contextValue = React50.useMemo(() => context, [context]);
  return React50.createElement(FormControlProvider, {
    value: contextValue
  }, React50.createElement(StylesProvider, {
    value: styles2
  }, React50.createElement(chakra.div, _extends41({}, getRootProps({}, ref), {
    className,
    __css: {
      width: "100%",
      position: "relative"
    }
  }))));
});
if (__DEV__) {
  FormControl.displayName = "FormControl";
}
var FormHelperText = forwardRef((props, ref) => {
  var field = useFormControlContext();
  var styles2 = useStyles();
  var className = cx("chakra-form__helper-text", props.className);
  return React50.createElement(chakra.div, _extends41({}, field == null ? void 0 : field.getHelpTextProps(props, ref), {
    __css: styles2.helperText,
    className
  }));
});
if (__DEV__) {
  FormHelperText.displayName = "FormHelperText";
}

// node_modules/@chakra-ui/form-control/dist/esm/use-form-control.js
function _extends42() {
  _extends42 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends42.apply(this, arguments);
}
function _objectWithoutPropertiesLoose22(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useFormControl(props) {
  var _useFormControlProps = useFormControlProps(props), {
    isDisabled,
    isInvalid,
    isReadOnly,
    isRequired
  } = _useFormControlProps, rest = _objectWithoutPropertiesLoose22(_useFormControlProps, ["isDisabled", "isInvalid", "isReadOnly", "isRequired"]);
  return _extends42({}, rest, {
    disabled: isDisabled,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  });
}
function useFormControlProps(props) {
  var _ref2, _ref22, _ref3;
  var field = useFormControlContext();
  var {
    id: id2,
    disabled,
    readOnly,
    required,
    isRequired,
    isInvalid,
    isReadOnly,
    isDisabled,
    onFocus: onFocus3,
    onBlur: onBlur3
  } = props, rest = _objectWithoutPropertiesLoose22(props, ["id", "disabled", "readOnly", "required", "isRequired", "isInvalid", "isReadOnly", "isDisabled", "onFocus", "onBlur"]);
  var labelIds = [];
  if (field != null && field.hasFeedbackText && field != null && field.isInvalid) {
    labelIds.push(field.feedbackId);
  }
  if (field != null && field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return _extends42({}, rest, {
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id2 != null ? id2 : field == null ? void 0 : field.id,
    isDisabled: (_ref2 = disabled != null ? disabled : isDisabled) != null ? _ref2 : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_ref22 = readOnly != null ? readOnly : isReadOnly) != null ? _ref22 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_ref3 = required != null ? required : isRequired) != null ? _ref3 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus3),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur3)
  });
}

// node_modules/@chakra-ui/form-control/dist/esm/form-error.js
var React51 = __toModule(require_react());
function _extends43() {
  _extends43 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends43.apply(this, arguments);
}
var FormErrorMessage = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("FormError", props);
  var ownProps = omitThemingProps(props);
  var field = useFormControlContext();
  if (!(field != null && field.isInvalid))
    return null;
  return React51.createElement(StylesProvider, {
    value: styles2
  }, React51.createElement(chakra.div, _extends43({}, field == null ? void 0 : field.getErrorMessageProps(ownProps, ref), {
    className: cx("chakra-form__error-message", props.className),
    __css: _extends43({
      display: "flex",
      alignItems: "center"
    }, styles2.text)
  })));
});
if (__DEV__) {
  FormErrorMessage.displayName = "FormErrorMessage";
}
var FormErrorIcon = forwardRef((props, ref) => {
  var styles2 = useStyles();
  var field = useFormControlContext();
  if (!(field != null && field.isInvalid))
    return null;
  var _className = cx("chakra-form__error-icon", props.className);
  return React51.createElement(icon_default, _extends43({
    ref,
    "aria-hidden": true
  }, props, {
    __css: styles2.icon,
    className: _className
  }), React51.createElement("path", {
    fill: "currentColor",
    d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
  }));
});
if (__DEV__) {
  FormErrorIcon.displayName = "FormErrorIcon";
}

// node_modules/@chakra-ui/form-control/dist/esm/form-label.js
var React52 = __toModule(require_react());
function _extends44() {
  _extends44 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends44.apply(this, arguments);
}
function _objectWithoutPropertiesLoose23(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var FormLabel = forwardRef((passedProps, ref) => {
  var styles2 = useStyleConfig("FormLabel", passedProps);
  var props = omitThemingProps(passedProps);
  var {
    children,
    requiredIndicator = React52.createElement(RequiredIndicator, null)
  } = props, rest = _objectWithoutPropertiesLoose23(props, ["className", "children", "requiredIndicator"]);
  var field = useFormControlContext();
  return React52.createElement(chakra.label, _extends44({}, field == null ? void 0 : field.getLabelProps(rest, ref), {
    className: cx("chakra-form__label", props.className),
    __css: _extends44({
      display: "block",
      textAlign: "start"
    }, styles2)
  }), children, field != null && field.isRequired ? requiredIndicator : null);
});
if (__DEV__) {
  FormLabel.displayName = "FormLabel";
}
var RequiredIndicator = forwardRef((props, ref) => {
  var field = useFormControlContext();
  var styles2 = useStyles();
  if (!(field != null && field.isRequired))
    return null;
  var className = cx("chakra-form__required-indicator", props.className);
  return React52.createElement(chakra.span, _extends44({}, field == null ? void 0 : field.getRequiredIndicatorProps(props, ref), {
    __css: styles2.requiredIndicator,
    className
  }));
});
if (__DEV__) {
  RequiredIndicator.displayName = "RequiredIndicator";
}

// node_modules/@chakra-ui/control-box/dist/esm/control-box.js
var React53 = __toModule(require_react());
function _extends45() {
  _extends45 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends45.apply(this, arguments);
}
function _objectWithoutPropertiesLoose24(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var ControlBox = (props) => {
  var {
    type = "checkbox",
    _hover,
    _invalid,
    _disabled,
    _focus,
    _checked,
    _child = {
      opacity: 0
    },
    _checkedAndChild = {
      opacity: 1
    },
    _checkedAndDisabled,
    _checkedAndFocus,
    _checkedAndHover,
    children
  } = props, rest = _objectWithoutPropertiesLoose24(props, ["type", "_hover", "_invalid", "_disabled", "_focus", "_checked", "_child", "_checkedAndChild", "_checkedAndDisabled", "_checkedAndFocus", "_checkedAndHover", "children"]);
  var checkedAndDisabled = "input[type=" + type + "]:checked:disabled + &";
  var checkedAndHover = "input[type=" + type + "]:checked:hover:not(:disabled) + &";
  var checkedAndFocus = "input[type=" + type + "]:checked:focus + &";
  var disabled = "input[type=" + type + "]:disabled + &";
  var focus2 = "input[type=" + type + "]:focus + &";
  var hover = "input[type=" + type + "]:hover:not(:disabled):not(:checked) + &";
  var checked = "input[type=" + type + "]:checked + &, input[type=" + type + "][aria-checked=mixed] + &";
  var invalid = "input[type=" + type + "][aria-invalid=true] + &";
  var child = "& > *";
  return React53.createElement(chakra.div, _extends45({}, rest, {
    "aria-hidden": true,
    __css: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      transition: "all 120ms",
      flexShrink: 0,
      [focus2]: _focus,
      [hover]: _hover,
      [disabled]: _disabled,
      [invalid]: _invalid,
      [checkedAndDisabled]: _checkedAndDisabled,
      [checkedAndFocus]: _checkedAndFocus,
      [checkedAndHover]: _checkedAndHover,
      [child]: _child,
      [checked]: _extends45({}, _checked, {
        [child]: _checkedAndChild
      })
    }
  }), children);
};
if (__DEV__) {
  ControlBox.displayName = "ControlBox";
}

// node_modules/@chakra-ui/input/dist/esm/input.js
var React54 = __toModule(require_react());
function _extends46() {
  _extends46 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends46.apply(this, arguments);
}
var Input = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Input", props);
  var ownProps = omitThemingProps(props);
  var input = useFormControl(ownProps);
  var _className = cx("chakra-input", props.className);
  return React54.createElement(chakra.input, _extends46({}, input, {
    __css: styles2.field,
    ref,
    className: _className
  }));
});
if (__DEV__) {
  Input.displayName = "Input";
}
Input.id = "Input";

// node_modules/@chakra-ui/input/dist/esm/input-addon.js
var React55 = __toModule(require_react());
function _extends47() {
  _extends47 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends47.apply(this, arguments);
}
function _objectWithoutPropertiesLoose25(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var placements = {
  left: {
    marginEnd: "-1px",
    borderEndRadius: 0,
    borderEndColor: "transparent"
  },
  right: {
    marginStart: "-1px",
    borderStartRadius: 0,
    borderStartColor: "transparent"
  }
};
var StyledAddon = chakra("div", {
  baseStyle: {
    flex: "0 0 auto",
    width: "auto",
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap"
  }
});
var InputAddon = forwardRef((props, ref) => {
  var _placements$placement;
  var {
    placement = "left"
  } = props, rest = _objectWithoutPropertiesLoose25(props, ["placement"]);
  var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {};
  var styles2 = useStyles();
  return React55.createElement(StyledAddon, _extends47({
    ref
  }, rest, {
    __css: _extends47({}, styles2.addon, placementStyles)
  }));
});
if (__DEV__) {
  InputAddon.displayName = "InputAddon";
}
var InputLeftAddon = forwardRef((props, ref) => React55.createElement(InputAddon, _extends47({
  ref,
  placement: "left"
}, props, {
  className: cx("chakra-input__left-addon", props.className)
})));
if (__DEV__) {
  InputLeftAddon.displayName = "InputLeftAddon";
}
InputLeftAddon.id = "InputLeftAddon";
var InputRightAddon = forwardRef((props, ref) => React55.createElement(InputAddon, _extends47({
  ref,
  placement: "right"
}, props, {
  className: cx("chakra-input__right-addon", props.className)
})));
if (__DEV__) {
  InputRightAddon.displayName = "InputRightAddon";
}
InputRightAddon.id = "InputRightAddon";

// node_modules/@chakra-ui/input/dist/esm/input-group.js
var React56 = __toModule(require_react());
function _extends48() {
  _extends48 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends48.apply(this, arguments);
}
function _objectWithoutPropertiesLoose26(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var InputGroup = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Input", props);
  var _omitThemingProps = omitThemingProps(props), {
    children,
    className
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose26(_omitThemingProps, ["children", "className"]);
  var _className = cx("chakra-input__group", className);
  var groupStyles = {};
  var validChildren = getValidChildren(children);
  var input = styles2.field;
  validChildren.forEach((child) => {
    if (!styles2)
      return;
    if (input && child.type.id === "InputLeftElement") {
      var _input$height;
      groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;
    }
    if (input && child.type.id === "InputRightElement") {
      var _input$height2;
      groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;
    }
    if (child.type.id === "InputRightAddon") {
      groupStyles.borderEndRadius = 0;
    }
    if (child.type.id === "InputLeftAddon") {
      groupStyles.borderStartRadius = 0;
    }
  });
  var clones = validChildren.map((child) => {
    var _child$props, _child$props2;
    var theming = {
      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,
      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant
    };
    return child.type.id !== "Input" ? React56.cloneElement(child, theming) : React56.cloneElement(child, Object.assign(theming, groupStyles, child.props));
  });
  return React56.createElement(chakra.div, _extends48({
    className: _className,
    ref,
    __css: {
      width: "100%",
      display: "flex",
      position: "relative"
    }
  }, rest), React56.createElement(StylesProvider, {
    value: styles2
  }, clones));
});
if (__DEV__) {
  InputGroup.displayName = "InputGroup";
}

// node_modules/@chakra-ui/input/dist/esm/input-element.js
var React57 = __toModule(require_react());
function _extends49() {
  _extends49 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends49.apply(this, arguments);
}
function _objectWithoutPropertiesLoose27(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var StyledElement = chakra("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "0",
    zIndex: 2
  }
});
var InputElement = forwardRef((props, ref) => {
  var _input$height, _input$height2;
  var {
    placement = "left"
  } = props, rest = _objectWithoutPropertiesLoose27(props, ["placement"]);
  var styles2 = useStyles();
  var input = styles2.field;
  var attr = placement === "left" ? "insetStart" : "insetEnd";
  var elementStyles = {
    [attr]: "0",
    width: (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h,
    height: (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h,
    fontSize: input == null ? void 0 : input.fontSize
  };
  return React57.createElement(StyledElement, _extends49({
    ref,
    __css: elementStyles
  }, rest));
});
InputElement.id = "InputElement";
if (__DEV__) {
  InputElement.displayName = "InputElement";
}
var InputLeftElement = forwardRef((props, ref) => {
  var {
    className
  } = props, rest = _objectWithoutPropertiesLoose27(props, ["className"]);
  var _className = cx("chakra-input__left-element", className);
  return React57.createElement(InputElement, _extends49({
    ref,
    placement: "left",
    className: _className
  }, rest));
});
InputLeftElement.id = "InputLeftElement";
if (__DEV__) {
  InputLeftElement.displayName = "InputLeftElement";
}
var InputRightElement = forwardRef((props, ref) => {
  var {
    className
  } = props, rest = _objectWithoutPropertiesLoose27(props, ["className"]);
  var _className = cx("chakra-input__right-element", className);
  return React57.createElement(InputElement, _extends49({
    ref,
    placement: "right",
    className: _className
  }, rest));
});
InputRightElement.id = "InputRightElement";
if (__DEV__) {
  InputRightElement.displayName = "InputRightElement";
}

// node_modules/@chakra-ui/media-query/dist/esm/media-query.js
var React59 = __toModule(require_react());

// node_modules/@chakra-ui/media-query/dist/esm/use-media-query.js
var React58 = __toModule(require_react());
var useSafeLayoutEffect3 = isBrowser ? React58.useLayoutEffect : React58.useEffect;
function useMediaQuery(query) {
  var queries = Array.isArray(query) ? query : [query];
  var isSupported = isBrowser && "matchMedia" in window;
  var [matches, setMatches] = React58.useState(queries.map((query2) => isSupported ? !!window.matchMedia(query2).matches : false));
  useSafeLayoutEffect3(() => {
    if (!isSupported)
      return void 0;
    var mediaQueryList = queries.map((query2) => window.matchMedia(query2));
    var listenerList = mediaQueryList.map((mediaQuery, index2) => {
      var listener = () => setMatches((prev) => prev.map((prevValue, idx) => index2 === idx ? !!mediaQuery.matches : prevValue));
      mediaQuery.addListener(listener);
      return listener;
    });
    return () => {
      mediaQueryList.forEach((mediaQuery, index2) => {
        mediaQuery.removeListener(listenerList[index2]);
      });
    };
  }, [query]);
  return matches;
}

// node_modules/@chakra-ui/media-query/dist/esm/media-query.js
var Visibility = (props) => {
  var {
    breakpoint,
    hide: hide2,
    children
  } = props;
  var [show] = useMediaQuery(breakpoint);
  var isVisible2 = hide2 ? !show : show;
  var rendered = isVisible2 ? children : null;
  return rendered;
};
var Hide = (props) => {
  var {
    children
  } = props;
  var query = useQuery(props);
  return React59.createElement(Visibility, {
    breakpoint: query,
    hide: true
  }, children);
};
if (__DEV__) {
  Hide.displayName = "Hide";
}
var Show = (props) => {
  var {
    children
  } = props;
  var query = useQuery(props);
  return React59.createElement(Visibility, {
    breakpoint: query
  }, children);
};
if (__DEV__) {
  Show.displayName = "Show";
}
var getBreakpoint = (theme2, value) => memoizedGet(theme2, "breakpoints." + value, value);
function useQuery(props) {
  var {
    breakpoint = "",
    below,
    above
  } = props;
  var theme2 = useTheme();
  var bpBelow = getBreakpoint(theme2, below);
  var bpAbove = getBreakpoint(theme2, above);
  var query = breakpoint;
  if (bpBelow) {
    query = "(max-width: " + bpBelow + ")";
  } else if (bpAbove) {
    query = "(min-width: " + bpAbove + ")";
  }
  return query;
}

// node_modules/@chakra-ui/media-query/dist/esm/media-query.hook.js
function usePrefersReducedMotion() {
  var [prefersReducedMotion] = useMediaQuery("(prefers-reduced-motion: reduce)");
  return prefersReducedMotion;
}
function useColorModePreference() {
  var [isDark2, isLight] = useMediaQuery(["(prefers-color-scheme: light)", "(prefers-color-scheme: dark)"]);
  if (isLight)
    return "light";
  if (isDark2)
    return "dark";
  return void 0;
}

// node_modules/@chakra-ui/media-query/dist/esm/use-breakpoint.js
var import_react57 = __toModule(require_react());

// node_modules/@chakra-ui/media-query/dist/esm/create-media-query.js
function createMediaQueries(breakpoints3) {
  return Object.entries(breakpoints3).sort((a2, b2) => Number.parseInt(a2[1], 10) > Number.parseInt(b2[1], 10) ? 1 : -1).map((_ref2, index2, arr) => {
    var [breakpoint, minWidth] = _ref2;
    var next = arr[index2 + 1];
    var maxWidth = next ? next[1] : void 0;
    var query = createMediaQueryString(minWidth, maxWidth);
    return {
      minWidth,
      maxWidth,
      breakpoint,
      query
    };
  });
}
function createMediaQueryString(minWidth, maxWidth) {
  var hasMinWidth = parseInt(minWidth, 10) >= 0;
  if (!hasMinWidth && !maxWidth) {
    return "";
  }
  var query = "(min-width: " + toMediaString(minWidth) + ")";
  if (!maxWidth) {
    return query;
  }
  if (query) {
    query += " and ";
  }
  query += "(max-width: " + toMediaString(subtract(maxWidth)) + ")";
  return query;
}
var measurementRegex = /([0-9]+\.?[0-9]*)/;
var calculateMeasurement = (value, modifier) => {
  if (typeof value === "number") {
    return "" + (value + modifier);
  }
  return value.replace(measurementRegex, (match) => "" + (parseFloat(match) + modifier));
};
function subtract(value) {
  return calculateMeasurement(value, value.endsWith("px") ? -1 : -0.01);
}
function toMediaString(value) {
  return isNumber(value) ? value + "px" : value;
}

// node_modules/@chakra-ui/media-query/dist/esm/use-breakpoint.js
function _objectWithoutPropertiesLoose28(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends50() {
  _extends50 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends50.apply(this, arguments);
}
function useBreakpoint(defaultBreakpoint) {
  var {
    breakpoints: breakpoints3
  } = useTheme();
  var mediaQueries = import_react57.default.useMemo(() => createMediaQueries(_extends50({
    base: "0px"
  }, breakpoints3)), [breakpoints3]);
  var [currentBreakpoint, setCurrentBreakpoint] = import_react57.default.useState(() => {
    if (!defaultBreakpoint) {
      return void 0;
    }
    var mediaQuery = mediaQueries.find((_ref2) => {
      var {
        breakpoint: breakpoint2
      } = _ref2;
      return breakpoint2 === defaultBreakpoint;
    });
    if (mediaQuery) {
      var breakpoint = _objectWithoutPropertiesLoose28(mediaQuery, ["query"]);
      return breakpoint;
    }
    return void 0;
  });
  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;
  var update = import_react57.default.useCallback((query, breakpoint) => {
    if (query.matches && current !== breakpoint.breakpoint) {
      setCurrentBreakpoint(breakpoint);
    }
  }, [current]);
  import_react57.default.useEffect(() => {
    var listeners = new Set();
    mediaQueries.forEach((_ref2) => {
      var {
        query
      } = _ref2, breakpoint = _objectWithoutPropertiesLoose28(_ref2, ["query"]);
      var mediaQuery = window.matchMedia(query);
      update(mediaQuery, breakpoint);
      var handleChange = () => {
        update(mediaQuery, breakpoint);
      };
      mediaQuery.addListener(handleChange);
      listeners.add({
        mediaQuery,
        handleChange
      });
      return () => {
        mediaQuery.removeListener(handleChange);
      };
    });
    return () => {
      listeners.forEach((_ref3) => {
        var {
          mediaQuery,
          handleChange
        } = _ref3;
        mediaQuery.removeListener(handleChange);
      });
      listeners.clear();
    };
  }, [mediaQueries, breakpoints3, update]);
  return current;
}

// node_modules/@chakra-ui/media-query/dist/esm/media-query.utils.js
function getClosestValue(values, breakpoint, breakpoints3) {
  if (breakpoints3 === void 0) {
    breakpoints3 = breakpoints;
  }
  var index2 = Object.keys(values).indexOf(breakpoint);
  if (index2 !== -1) {
    return values[breakpoint];
  }
  var stopIndex = breakpoints3.indexOf(breakpoint);
  while (stopIndex >= 0) {
    var key = breakpoints3[stopIndex];
    if (values[key] != null) {
      index2 = stopIndex;
      break;
    }
    stopIndex -= 1;
  }
  if (index2 !== -1) {
    var _key = breakpoints3[index2];
    return values[_key];
  }
  return void 0;
}

// node_modules/@chakra-ui/media-query/dist/esm/use-breakpoint-value.js
function useBreakpointValue(values) {
  var breakpoint = useBreakpoint();
  var theme2 = useTheme();
  if (!breakpoint)
    return void 0;
  var breakpoints3 = Object.keys(theme2.breakpoints);
  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints3)).map((_ref2) => {
    var [key, value] = _ref2;
    return [key, value];
  })) : values;
  return getClosestValue(obj, breakpoint, breakpoints3);
}

// node_modules/@chakra-ui/table/dist/esm/table.js
var React61 = __toModule(require_react());
function _extends51() {
  _extends51 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends51.apply(this, arguments);
}
function _objectWithoutPropertiesLoose29(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var TableContainer = forwardRef((props, ref) => {
  var _ref2;
  var {
    overflow,
    overflowX,
    className
  } = props, rest = _objectWithoutPropertiesLoose29(props, ["overflow", "overflowX", "className"]);
  return React61.createElement(chakra.div, _extends51({
    ref,
    className: cx("chakra-table__container", className)
  }, rest, {
    __css: {
      display: "block",
      whiteSpace: "nowrap",
      WebkitOverflowScrolling: "touch",
      overflowX: (_ref2 = overflow != null ? overflow : overflowX) != null ? _ref2 : "auto",
      overflowY: "hidden",
      maxWidth: "100%"
    }
  }));
});
var Table = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Table", props);
  var _omitThemingProps = omitThemingProps(props), {
    className
  } = _omitThemingProps, tableProps = _objectWithoutPropertiesLoose29(_omitThemingProps, ["className"]);
  return React61.createElement(StylesProvider, {
    value: styles2
  }, React61.createElement(chakra.table, _extends51({
    role: "table",
    ref,
    __css: styles2.table,
    className: cx("chakra-table", className)
  }, tableProps)));
});
if (__DEV__) {
  Table.displayName = "Table";
}
var TableCaption = forwardRef((props, ref) => {
  var {
    placement = "bottom"
  } = props, rest = _objectWithoutPropertiesLoose29(props, ["placement"]);
  var styles2 = useStyles();
  return React61.createElement(chakra.caption, _extends51({}, rest, {
    ref,
    __css: _extends51({}, styles2.caption, {
      captionSide: placement
    })
  }));
});
if (__DEV__) {
  TableCaption.displayName = "TableCaption";
}
var Thead = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React61.createElement(chakra.thead, _extends51({}, props, {
    ref,
    __css: styles2.thead
  }));
});
var Tbody = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React61.createElement(chakra.tbody, _extends51({}, props, {
    ref,
    __css: styles2.tbody
  }));
});
var Tfoot = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React61.createElement(chakra.tfoot, _extends51({}, props, {
    ref,
    __css: styles2.tfoot
  }));
});
var Th = forwardRef((_ref2, ref) => {
  var {
    isNumeric: isNumeric2
  } = _ref2, rest = _objectWithoutPropertiesLoose29(_ref2, ["isNumeric"]);
  var styles2 = useStyles();
  return React61.createElement(chakra.th, _extends51({}, rest, {
    ref,
    __css: styles2.th,
    "data-is-numeric": isNumeric2
  }));
});
var Tr = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React61.createElement(chakra.tr, _extends51({
    role: "row"
  }, props, {
    ref,
    __css: styles2.tr
  }));
});
var Td = forwardRef((_ref3, ref) => {
  var {
    isNumeric: isNumeric2
  } = _ref3, rest = _objectWithoutPropertiesLoose29(_ref3, ["isNumeric"]);
  var styles2 = useStyles();
  return React61.createElement(chakra.td, _extends51({
    role: "gridcell"
  }, rest, {
    ref,
    __css: styles2.td,
    "data-is-numeric": isNumeric2
  }));
});

// node_modules/@chakra-ui/menu/dist/esm/menu.js
var React65 = __toModule(require_react());

// node_modules/@chakra-ui/clickable/dist/esm/use-clickable.js
var React63 = __toModule(require_react());

// node_modules/@chakra-ui/clickable/dist/esm/use-event-listeners.js
var React62 = __toModule(require_react());
function useEventListeners() {
  var listeners = React62.useRef(new Map());
  var currentListeners = listeners.current;
  var add = React62.useCallback((el, type, listener, options) => {
    listeners.current.set(listener, {
      type,
      el,
      options
    });
    el.addEventListener(type, listener, options);
  }, []);
  var remove = React62.useCallback((el, type, listener, options) => {
    el.removeEventListener(type, listener, options);
    listeners.current.delete(listener);
  }, []);
  React62.useEffect(() => () => {
    currentListeners.forEach((value, key) => {
      remove(value.el, value.type, key, value.options);
    });
  }, [remove, currentListeners]);
  return {
    add,
    remove
  };
}

// node_modules/@chakra-ui/clickable/dist/esm/use-clickable.js
function _extends52() {
  _extends52 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends52.apply(this, arguments);
}
function _objectWithoutPropertiesLoose30(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isValidElement2(event) {
  var element = event.target;
  var {
    tagName,
    isContentEditable
  } = element;
  return tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable !== true;
}
function useClickable(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    ref: htmlRef,
    isDisabled,
    isFocusable,
    clickOnEnter = true,
    clickOnSpace = true,
    onMouseDown,
    onMouseUp,
    onClick,
    onKeyDown,
    onKeyUp,
    tabIndex: tabIndexProp,
    onMouseOver,
    onMouseLeave
  } = props, htmlProps = _objectWithoutPropertiesLoose30(props, ["ref", "isDisabled", "isFocusable", "clickOnEnter", "clickOnSpace", "onMouseDown", "onMouseUp", "onClick", "onKeyDown", "onKeyUp", "tabIndex", "onMouseOver", "onMouseLeave"]);
  var [isButton, setIsButton] = React63.useState(true);
  var [isPressed, setIsPressed] = React63.useState(false);
  var listeners = useEventListeners();
  var refCallback = (node2) => {
    if (!node2)
      return;
    if (node2.tagName !== "BUTTON") {
      setIsButton(false);
    }
  };
  var tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;
  var trulyDisabled = isDisabled && !isFocusable;
  var handleClick = React63.useCallback((event) => {
    if (isDisabled) {
      event.stopPropagation();
      event.preventDefault();
      return;
    }
    var self2 = event.currentTarget;
    self2.focus();
    onClick == null ? void 0 : onClick(event);
  }, [isDisabled, onClick]);
  var onDocumentKeyUp = React63.useCallback((e) => {
    if (isPressed && isValidElement2(e)) {
      e.preventDefault();
      e.stopPropagation();
      setIsPressed(false);
      listeners.remove(document, "keyup", onDocumentKeyUp, false);
    }
  }, [isPressed, listeners]);
  var handleKeyDown = React63.useCallback((event) => {
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (isDisabled || event.defaultPrevented || event.metaKey) {
      return;
    }
    if (!isValidElement2(event.nativeEvent) || isButton)
      return;
    var shouldClickOnEnter = clickOnEnter && event.key === "Enter";
    var shouldClickOnSpace = clickOnSpace && event.key === " ";
    if (shouldClickOnSpace) {
      event.preventDefault();
      setIsPressed(true);
    }
    if (shouldClickOnEnter) {
      event.preventDefault();
      var self2 = event.currentTarget;
      self2.click();
    }
    listeners.add(document, "keyup", onDocumentKeyUp, false);
  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace, listeners, onDocumentKeyUp]);
  var handleKeyUp = React63.useCallback((event) => {
    onKeyUp == null ? void 0 : onKeyUp(event);
    if (isDisabled || event.defaultPrevented || event.metaKey)
      return;
    if (!isValidElement2(event.nativeEvent) || isButton)
      return;
    var shouldClickOnSpace = clickOnSpace && event.key === " ";
    if (shouldClickOnSpace) {
      event.preventDefault();
      setIsPressed(false);
      var self2 = event.currentTarget;
      self2.click();
    }
  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);
  var onDocumentMouseUp = React63.useCallback((event) => {
    if (event.button !== 0)
      return;
    setIsPressed(false);
    listeners.remove(document, "mouseup", onDocumentMouseUp, false);
  }, [listeners]);
  var handleMouseDown = React63.useCallback((event) => {
    if (isRightClick(event))
      return;
    if (isDisabled) {
      event.stopPropagation();
      event.preventDefault();
      return;
    }
    if (!isButton) {
      setIsPressed(true);
    }
    var target = event.currentTarget;
    target.focus({
      preventScroll: true
    });
    listeners.add(document, "mouseup", onDocumentMouseUp, false);
    onMouseDown == null ? void 0 : onMouseDown(event);
  }, [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]);
  var handleMouseUp = React63.useCallback((event) => {
    if (isRightClick(event))
      return;
    if (!isButton) {
      setIsPressed(false);
    }
    onMouseUp == null ? void 0 : onMouseUp(event);
  }, [onMouseUp, isButton]);
  var handleMouseOver = React63.useCallback((event) => {
    if (isDisabled) {
      event.preventDefault();
      return;
    }
    onMouseOver == null ? void 0 : onMouseOver(event);
  }, [isDisabled, onMouseOver]);
  var handleMouseLeave = React63.useCallback((event) => {
    if (isPressed) {
      event.preventDefault();
      setIsPressed(false);
    }
    onMouseLeave == null ? void 0 : onMouseLeave(event);
  }, [isPressed, onMouseLeave]);
  var ref = mergeRefs(htmlRef, refCallback);
  if (isButton) {
    return _extends52({}, htmlProps, {
      ref,
      type: "button",
      "aria-disabled": trulyDisabled ? void 0 : isDisabled,
      disabled: trulyDisabled,
      onClick: handleClick,
      onMouseDown,
      onMouseUp,
      onKeyUp,
      onKeyDown,
      onMouseOver,
      onMouseLeave
    });
  }
  return _extends52({}, htmlProps, {
    ref,
    role: "button",
    "data-active": dataAttr(isPressed),
    "aria-disabled": isDisabled ? "true" : void 0,
    tabIndex: trulyDisabled ? void 0 : tabIndex,
    onClick: handleClick,
    onMouseDown: handleMouseDown,
    onMouseUp: handleMouseUp,
    onKeyUp: handleKeyUp,
    onKeyDown: handleKeyDown,
    onMouseOver: handleMouseOver,
    onMouseLeave: handleMouseLeave
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node2) {
  if (node2.toString() !== "[object Window]") {
    var ownerDocument = node2.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView : window;
  }
  return node2;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node2) {
  var win2 = getWindow(node2);
  var scrollLeft = win2.pageXOffset;
  var scrollTop = win2.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement2(node2) {
  var OwnElement = getWindow(node2).Element;
  return node2 instanceof OwnElement || node2 instanceof Element;
}
function isHTMLElement(node2) {
  var OwnElement = getWindow(node2).HTMLElement;
  return node2 instanceof OwnElement || node2 instanceof HTMLElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node2) {
  if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
    return getWindowScroll(node2);
  } else {
    return getHTMLElementScroll(node2);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return (isElement2(element) ? element.ownerDocument : element.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle3(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle3(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement);
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return element.assignedSlot || element.parentNode || element.host || getDocumentElement(element);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node2) {
  if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
    return node2.ownerDocument.body;
  }
  if (isHTMLElement(node2) && isScrollParent(node2)) {
    return node2;
  }
  return getScrollParent(getParentNode(node2));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list2) {
  if (list2 === void 0) {
    list2 = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = getNodeName(scrollParent) === "body";
  var win2 = getWindow(scrollParent);
  var target = isBody ? [win2].concat(win2.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list2.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle3(element).position === "fixed") {
    return null;
  }
  var offsetParent = element.offsetParent;
  if (offsetParent) {
    var html = getDocumentElement(offsetParent);
    if (getNodeName(offsetParent) === "body" && getComputedStyle3(offsetParent).position === "static" && getComputedStyle3(html).position !== "static") {
      return html;
    }
  }
  return offsetParent;
}
function getContainingBlock(element) {
  var currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css2 = getComputedStyle3(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.willChange && css2.willChange !== "auto") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle3(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && getNodeName(offsetParent) === "body" && getComputedStyle3(offsetParent).position === "static") {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto2 = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements2 = [].concat(basePlacements, [auto2]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order2(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order2(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c2) {
    return p.replace(/%s/, c2);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    Object.keys(modifier).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (!Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {}, {
      options: Object.assign(Object.assign({}, existing.options), current.options),
      data: Object.assign(Object.assign({}, existing.data), current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element) {
  var win2 = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win2.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = element.ownerDocument.body;
  var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle3(body || html).direction === "rtl") {
    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains2(parent, child) {
  var isShadow = Boolean(child.getRootNode && child.getRootNode().host);
  if (parent.contains(child)) {
    return true;
  } else if (isShadow) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign(Object.assign({}, rect), {}, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle3(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement2(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement2(clippingParent) && contains2(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = Math.max(rect.top, accRect.top);
    accRect.right = Math.min(rect.right, accRect.right);
    accRect.bottom = Math.min(rect.bottom, accRect.bottom);
    accRect.left = Math.max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref2) {
  var reference2 = _ref2.reference, element = _ref2.element, placement = _ref2.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys2) {
  return keys2.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement2(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(referenceElement);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/index.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper3(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions2;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions2),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(options2) {
        cleanupModifierEffects();
        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions2), state.options), options2);
        state.scrollParents = {
          reference: isElement2(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m2) {
          return m2.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref2) {
            var name = _ref2.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto2) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle3(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index2 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index2], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect(_ref2) {
  var state = _ref2.state, instance = _ref2.instance, options = _ref2.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref2) {
  var state = _ref2.state, name = _ref2.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsets(_ref2) {
  var x = _ref2.x, y = _ref2.y;
  var win2 = window;
  var dpr = win2.devicePixelRatio || 1;
  return {
    x: Math.round(x * dpr) / dpr || 0,
    y: Math.round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive;
  var _roundOffsets = roundOffsets(offsets), x = _roundOffsets.x, y = _roundOffsets.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win2 = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
    }
    if (placement === top) {
      sideY = bottom;
      y -= offsetParent.clientHeight - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left) {
      sideX = right;
      x -= offsetParent.clientWidth - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles2 = Object.assign({
    position: position2
  }, adaptive && unsetSides);
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign(Object.assign({}, commonStyles2), {}, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win2.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign(Object.assign({}, commonStyles2), {}, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref3) {
  var state = _ref3.state, options = _ref3.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive;
  if (true) {
    var transitionProperty2 = getComputedStyle3(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty2.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles2 = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles2), {}, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles2), {}, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false
    })));
  }
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref2) {
  var state = _ref2.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect2,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref2 = typeof offset2 === "function" ? offset2(Object.assign(Object.assign({}, rects), {}, {
    placement
  })) : offset2, skidding = _ref2[0], distance2 = _ref2[1];
  skidding = skidding || 0;
  distance2 = (distance2 || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance2,
    y: skidding
  } : {
    x: skidding,
    y: distance2
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements2.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements2 : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements3 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements3.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements3;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a2, b2) {
    return overflows[a2] - overflows[b2];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto2) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements3 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto2 ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements3[0];
  for (var i = 0; i < placements3.length; i++) {
    var placement = placements3[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements3.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min, value, max) {
  return Math.max(min, Math.min(value, max));
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign(Object.assign({}, state.rects), {}, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min = popperOffsets2[mainAxis] + overflow[mainSide];
    var max = popperOffsets2[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets2[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets2[mainAxis] + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset2, tether ? Math.max(max, tetherMax) : max);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var _preventedOffset = within(_min, _offset, _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/modifiers/arrow.js
function arrow(_ref2) {
  var _state$modifiersData$;
  var state = _ref2.state, name = _ref2.name;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = state.modifiersData[name + "#persistent"].padding;
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min, center, max);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect3(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element, _options$padding = options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains2(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
  state.modifiersData[name + "#persistent"] = {
    padding: mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements))
  };
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect3,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref2) {
  var state = _ref2.state, name = _ref2.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@chakra-ui/popper/dist/esm/use-popper.js
var import_react58 = __toModule(require_react());

// node_modules/@chakra-ui/popper/dist/esm/utils.js
function _extends53() {
  _extends53 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends53.apply(this, arguments);
}
var toVar = (value, fallback) => ({
  var: value,
  varRef: fallback ? "var(" + value + ", " + fallback + ")" : "var(" + value + ")"
});
var cssVars = {
  arrowShadowColor: toVar("--popper-arrow-shadow-color"),
  arrowSize: toVar("--popper-arrow-size", "8px"),
  arrowSizeHalf: toVar("--popper-arrow-size-half"),
  arrowBg: toVar("--popper-arrow-bg"),
  transformOrigin: toVar("--popper-transform-origin"),
  arrowOffset: toVar("--popper-arrow-offset")
};
function getBoxShadow(placement) {
  if (placement.includes("top"))
    return "1px 1px 1px 0 var(--popper-arrow-shadow-color)";
  if (placement.includes("bottom"))
    return "-1px -1px 1px 0 var(--popper-arrow-shadow-color)";
  if (placement.includes("right"))
    return "-1px 1px 1px 0 var(--popper-arrow-shadow-color)";
  if (placement.includes("left"))
    return "1px -1px 1px 0 var(--popper-arrow-shadow-color)";
}
var transforms = {
  top: "bottom center",
  "top-start": "bottom left",
  "top-end": "bottom right",
  bottom: "top center",
  "bottom-start": "top left",
  "bottom-end": "top right",
  left: "right center",
  "left-start": "right top",
  "left-end": "right bottom",
  right: "left center",
  "right-start": "left top",
  "right-end": "left bottom"
};
var toTransformOrigin = (placement) => transforms[placement];
var defaultEventListeners = {
  scroll: true,
  resize: true
};
function getEventListenerOptions(value) {
  var eventListeners;
  if (typeof value === "object") {
    eventListeners = {
      enabled: true,
      options: _extends53({}, defaultEventListeners, value)
    };
  } else {
    eventListeners = {
      enabled: value,
      options: defaultEventListeners
    };
  }
  return eventListeners;
}

// node_modules/@chakra-ui/popper/dist/esm/modifiers.js
var matchWidth = {
  name: "matchWidth",
  enabled: true,
  phase: "beforeWrite",
  requires: ["computeStyles"],
  fn: (_ref2) => {
    var {
      state
    } = _ref2;
    state.styles.popper.width = state.rects.reference.width + "px";
  },
  effect: (_ref2) => {
    var {
      state
    } = _ref2;
    return () => {
      var reference2 = state.elements.reference;
      state.elements.popper.style.width = reference2.offsetWidth + "px";
    };
  }
};
var transformOrigin = {
  name: "transformOrigin",
  enabled: true,
  phase: "write",
  fn: (_ref3) => {
    var {
      state
    } = _ref3;
    setTransformOrigin(state);
  },
  effect: (_ref4) => {
    var {
      state
    } = _ref4;
    return () => {
      setTransformOrigin(state);
    };
  }
};
var setTransformOrigin = (state) => {
  state.elements.popper.style.setProperty(cssVars.transformOrigin.var, toTransformOrigin(state.placement));
};
var positionArrow = {
  name: "positionArrow",
  enabled: true,
  phase: "afterWrite",
  fn: (_ref5) => {
    var {
      state
    } = _ref5;
    setArrowStyles(state);
  }
};
var setArrowStyles = (state) => {
  var _state$elements;
  if (!state.placement)
    return;
  var overrides = getArrowStyle(state.placement);
  if ((_state$elements = state.elements) != null && _state$elements.arrow && overrides) {
    Object.assign(state.elements.arrow.style, {
      [overrides.property]: overrides.value,
      width: cssVars.arrowSize.varRef,
      height: cssVars.arrowSize.varRef,
      zIndex: -1
    });
    var vars = {
      [cssVars.arrowSizeHalf.var]: "calc(" + cssVars.arrowSize.varRef + " / 2)",
      [cssVars.arrowOffset.var]: "calc(" + cssVars.arrowSizeHalf.varRef + " * -1)"
    };
    for (var property in vars) {
      state.elements.arrow.style.setProperty(property, vars[property]);
    }
  }
};
var getArrowStyle = (placement) => {
  if (placement.startsWith("top")) {
    return {
      property: "bottom",
      value: cssVars.arrowOffset.varRef
    };
  }
  if (placement.startsWith("bottom")) {
    return {
      property: "top",
      value: cssVars.arrowOffset.varRef
    };
  }
  if (placement.startsWith("left")) {
    return {
      property: "right",
      value: cssVars.arrowOffset.varRef
    };
  }
  if (placement.startsWith("right")) {
    return {
      property: "left",
      value: cssVars.arrowOffset.varRef
    };
  }
};
var innerArrow = {
  name: "innerArrow",
  enabled: true,
  phase: "main",
  requires: ["arrow"],
  fn: (_ref6) => {
    var {
      state
    } = _ref6;
    setInnerArrowStyles(state);
  },
  effect: (_ref7) => {
    var {
      state
    } = _ref7;
    return () => {
      setInnerArrowStyles(state);
    };
  }
};
var setInnerArrowStyles = (state) => {
  if (!state.elements.arrow)
    return;
  var inner = state.elements.arrow.querySelector("[data-popper-arrow-inner]");
  if (!inner)
    return;
  Object.assign(inner.style, {
    transform: "rotate(45deg)",
    background: cssVars.arrowBg.varRef,
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    position: "absolute",
    zIndex: "inherit",
    boxShadow: getBoxShadow(state.placement)
  });
};

// node_modules/@chakra-ui/popper/dist/esm/use-popper.js
function _objectWithoutPropertiesLoose31(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends54() {
  _extends54 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends54.apply(this, arguments);
}
function usePopper(props) {
  var _instance$current2, _instance$current3;
  if (props === void 0) {
    props = {};
  }
  var {
    modifiers = [],
    placement: placementProp = "bottom",
    strategy = "absolute",
    arrowPadding = 8,
    eventListeners = true,
    offset: offset2,
    gutter = 8,
    flip: flip2 = true,
    boundary = "clippingParents",
    preventOverflow: preventOverflow2 = true,
    matchWidth: matchWidth2
  } = props;
  var reference2 = (0, import_react58.useRef)(null);
  var popper2 = (0, import_react58.useRef)(null);
  var instance = (0, import_react58.useRef)(null);
  var cleanup = (0, import_react58.useRef)(() => {
  });
  var setupPopper = (0, import_react58.useCallback)(() => {
    if (!reference2.current || !popper2.current)
      return;
    cleanup.current == null ? void 0 : cleanup.current();
    instance.current = createPopper2(reference2.current, popper2.current, {
      placement: placementProp,
      modifiers: [
        innerArrow,
        positionArrow,
        transformOrigin,
        _extends54({}, matchWidth, {
          enabled: !!matchWidth2
        }),
        _extends54({
          name: "eventListeners"
        }, getEventListenerOptions(eventListeners)),
        {
          name: "arrow",
          options: {
            padding: arrowPadding
          }
        },
        {
          name: "offset",
          options: {
            offset: offset2 != null ? offset2 : [0, gutter]
          }
        },
        {
          name: "flip",
          enabled: !!flip2,
          options: {
            padding: 8
          }
        },
        {
          name: "preventOverflow",
          enabled: !!preventOverflow2,
          options: {
            boundary
          }
        },
        ...modifiers
      ],
      strategy
    });
    instance.current.forceUpdate();
    cleanup.current = instance.current.destroy;
  }, [placementProp, modifiers, matchWidth2, eventListeners, arrowPadding, offset2, gutter, flip2, preventOverflow2, boundary, strategy]);
  (0, import_react58.useEffect)(() => {
    return () => {
      if (!reference2.current && !popper2.current) {
        var _instance$current;
        (_instance$current = instance.current) == null ? void 0 : _instance$current.destroy();
        instance.current = null;
      }
    };
  }, []);
  var referenceRef = (0, import_react58.useCallback)((node2) => {
    reference2.current = node2;
    setupPopper();
  }, [setupPopper]);
  var getReferenceProps = (0, import_react58.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends54({}, props2, {
      ref: mergeRefs(referenceRef, ref)
    });
  }, [referenceRef]);
  var popperRef = (0, import_react58.useCallback)((node2) => {
    popper2.current = node2;
    setupPopper();
  }, [setupPopper]);
  var getPopperProps = (0, import_react58.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends54({}, props2, {
      ref: mergeRefs(popperRef, ref),
      style: _extends54({}, props2.style, {
        position: strategy,
        minWidth: "max-content"
      })
    });
  }, [strategy, popperRef]);
  var getArrowProps = (0, import_react58.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var rest = _objectWithoutPropertiesLoose31(props2, ["size", "shadowColor", "bg", "style"]);
    return _extends54({}, rest, {
      ref,
      "data-popper-arrow": "",
      style: getArrowStyle2(props2)
    });
  }, []);
  var getArrowInnerProps = (0, import_react58.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends54({}, props2, {
      ref,
      "data-popper-arrow-inner": ""
    });
  }, []);
  return {
    update: (_instance$current2 = instance.current) == null ? void 0 : _instance$current2.update,
    forceUpdate: (_instance$current3 = instance.current) == null ? void 0 : _instance$current3.forceUpdate,
    transformOrigin: cssVars.transformOrigin.varRef,
    referenceRef,
    popperRef,
    getPopperProps,
    getArrowProps,
    getArrowInnerProps,
    getReferenceProps
  };
}
function getArrowStyle2(props) {
  var {
    size: size2,
    shadowColor,
    bg,
    style
  } = props;
  var computedStyle = _extends54({}, style, {
    position: "absolute"
  });
  if (size2) {
    computedStyle["--popper-arrow-size"] = size2;
  }
  if (shadowColor) {
    computedStyle["--popper-arrow-shadow-color"] = shadowColor;
  }
  if (bg) {
    computedStyle["--popper-arrow-bg"] = bg;
  }
  return computedStyle;
}

// node_modules/@chakra-ui/menu/dist/esm/use-menu.js
var React64 = __toModule(require_react());
function _extends55() {
  _extends55 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends55.apply(this, arguments);
}
function _objectWithoutPropertiesLoose32(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant] = createDescendantContext();
var [MenuProvider, useMenuContext] = createContext({
  strict: false,
  name: "MenuContext"
});
function useMenu(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    id: id2,
    closeOnSelect = true,
    closeOnBlur = true,
    autoSelect = true,
    isLazy,
    isOpen: isOpenProp,
    defaultIsOpen,
    onClose: onCloseProp,
    onOpen: onOpenProp,
    placement = "bottom-start",
    lazyBehavior = "unmount"
  } = props, popperProps = _objectWithoutPropertiesLoose32(props, ["id", "closeOnSelect", "closeOnBlur", "autoSelect", "isLazy", "isOpen", "defaultIsOpen", "onClose", "onOpen", "placement", "lazyBehavior"]);
  var {
    isOpen,
    onOpen,
    onClose,
    onToggle
  } = useDisclosure({
    isOpen: isOpenProp,
    defaultIsOpen,
    onClose: onCloseProp,
    onOpen: onOpenProp
  });
  var menuRef = React64.useRef(null);
  var buttonRef = React64.useRef(null);
  useOutsideClick({
    ref: menuRef,
    handler: (event) => {
      var _buttonRef$current;
      if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {
        onClose();
      }
    }
  });
  var popper2 = usePopper(_extends55({}, popperProps, {
    placement
  }));
  var [focusedIndex, setFocusedIndex] = React64.useState(-1);
  var descendants = useMenuDescendants();
  useUpdateEffect(() => {
    if (!isOpen) {
      setFocusedIndex(-1);
    }
  }, [isOpen]);
  useFocusOnHide(menuRef, {
    focusRef: buttonRef,
    visible: isOpen,
    shouldFocus: true
  });
  var [buttonId, menuId] = useIds(id2, "menu-button", "menu-list");
  var openAndFocusMenu = React64.useCallback(() => {
    onOpen();
    focus(menuRef.current, {
      nextTick: true
    });
  }, [onOpen, menuRef]);
  var openAndFocusFirstItem = React64.useCallback(() => {
    onOpen();
    var first = descendants.firstEnabled();
    if (first)
      setFocusedIndex(first.index);
  }, [onOpen, setFocusedIndex, descendants]);
  var openAndFocusLastItem = React64.useCallback(() => {
    onOpen();
    var last = descendants.lastEnabled();
    if (last)
      setFocusedIndex(last.index);
  }, [onOpen, setFocusedIndex, descendants]);
  var refocus = React64.useCallback(() => {
    var _menuRef$current, _descendants$item;
    var doc2 = getOwnerDocument(menuRef.current);
    var hasFocusWithin2 = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(doc2.activeElement);
    var shouldRefocus = isOpen && !hasFocusWithin2;
    if (!shouldRefocus)
      return;
    var el = (_descendants$item = descendants.item(focusedIndex)) == null ? void 0 : _descendants$item.node;
    if (el)
      focus(el);
  }, [isOpen, focusedIndex, descendants]);
  return {
    openAndFocusMenu,
    openAndFocusFirstItem,
    openAndFocusLastItem,
    onTransitionEnd: refocus,
    descendants,
    popper: popper2,
    buttonId,
    menuId,
    forceUpdate: popper2.forceUpdate,
    orientation: "vertical",
    isOpen,
    onToggle,
    onOpen,
    onClose,
    menuRef,
    buttonRef,
    focusedIndex,
    closeOnSelect,
    closeOnBlur,
    autoSelect,
    setFocusedIndex,
    isLazy,
    lazyBehavior
  };
}
function useMenuButton(props, externalRef) {
  if (props === void 0) {
    props = {};
  }
  if (externalRef === void 0) {
    externalRef = null;
  }
  var menu = useMenuContext();
  var {
    isOpen,
    onClose,
    autoSelect,
    popper: popper2,
    openAndFocusFirstItem,
    openAndFocusLastItem,
    openAndFocusMenu
  } = menu;
  var onClick = React64.useCallback(() => {
    if (isOpen) {
      onClose();
    } else {
      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;
      action();
    }
  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);
  var onKeyDown = React64.useCallback((event) => {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      Enter: openAndFocusFirstItem,
      ArrowDown: openAndFocusFirstItem,
      ArrowUp: openAndFocusLastItem
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      event.stopPropagation();
      action(event);
    }
  }, [openAndFocusFirstItem, openAndFocusLastItem]);
  return _extends55({}, props, {
    ref: mergeRefs(menu.buttonRef, externalRef, popper2.referenceRef),
    id: menu.buttonId,
    "data-active": dataAttr(menu.isOpen),
    "aria-expanded": menu.isOpen,
    "aria-haspopup": "menu",
    "aria-controls": menu.menuId,
    onClick: callAllHandlers(props.onClick, onClick),
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  });
}
function isTargetMenuItem(event) {
  var _target$getAttribute;
  var target = event.currentTarget;
  return !!((_target$getAttribute = target.getAttribute("role")) != null && _target$getAttribute.startsWith("menuitem"));
}
function useMenuList(props, ref) {
  if (props === void 0) {
    props = {};
  }
  if (ref === void 0) {
    ref = null;
  }
  var menu = useMenuContext();
  if (!menu) {
    throw new Error("useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>");
  }
  var {
    focusedIndex,
    setFocusedIndex,
    menuRef,
    isOpen,
    onClose,
    menuId,
    isLazy,
    lazyBehavior
  } = menu;
  var descendants = useMenuDescendantsContext();
  var createTypeaheadHandler = useShortcut({
    preventDefault: (event) => {
      var isMenuItem = isTargetMenuItem(event);
      return event.key !== " " && isMenuItem;
    }
  });
  var onKeyDown = React64.useCallback((event) => {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      Tab: (event2) => event2.preventDefault(),
      Escape: onClose,
      ArrowDown: () => {
        var next = descendants.nextEnabled(focusedIndex);
        if (next)
          setFocusedIndex(next.index);
      },
      ArrowUp: () => {
        var prev = descendants.prevEnabled(focusedIndex);
        if (prev)
          setFocusedIndex(prev.index);
      }
    };
    var fn2 = keyMap[eventKey];
    if (fn2) {
      event.preventDefault();
      fn2(event);
      return;
    }
    var onTypeahead = createTypeaheadHandler((character) => {
      var nextItem = getNextItemFromSearch(descendants.values(), character, (item) => {
        var _item$node$textConten, _item$node;
        return (_item$node$textConten = item == null ? void 0 : (_item$node = item.node) == null ? void 0 : _item$node.textContent) != null ? _item$node$textConten : "";
      }, descendants.item(focusedIndex));
      if (nextItem) {
        var index2 = descendants.indexOf(nextItem.node);
        setFocusedIndex(index2);
      }
    });
    onTypeahead(event);
  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);
  var hasBeenOpened = React64.useRef(false);
  if (isOpen) {
    hasBeenOpened.current = true;
  }
  var shouldRenderChildren = determineLazyBehavior({
    hasBeenSelected: hasBeenOpened.current,
    isLazy,
    lazyBehavior,
    isSelected: isOpen
  });
  return _extends55({}, props, {
    ref: mergeRefs(menuRef, ref),
    children: shouldRenderChildren ? props.children : null,
    tabIndex: -1,
    role: "menu",
    id: menuId,
    style: _extends55({}, props.style, {
      transformOrigin: "var(--popper-transform-origin)"
    }),
    "aria-orientation": "vertical",
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  });
}
function useMenuPositioner(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    popper: popper2,
    isOpen
  } = useMenuContext();
  return popper2.getPopperProps(_extends55({}, props, {
    style: _extends55({
      visibility: isOpen ? "visible" : "hidden"
    }, props.style)
  }));
}
function useMenuItem(props, externalRef) {
  if (props === void 0) {
    props = {};
  }
  if (externalRef === void 0) {
    externalRef = null;
  }
  var {
    onMouseEnter: onMouseEnterProp,
    onMouseMove: onMouseMoveProp,
    onMouseLeave: onMouseLeaveProp,
    onClick: onClickProp,
    isDisabled,
    isFocusable,
    closeOnSelect
  } = props, htmlProps = _objectWithoutPropertiesLoose32(props, ["onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "isDisabled", "isFocusable", "closeOnSelect"]);
  var menu = useMenuContext();
  var {
    setFocusedIndex,
    focusedIndex,
    closeOnSelect: menuCloseOnSelect,
    onClose,
    menuRef,
    isOpen,
    menuId
  } = menu;
  var ref = React64.useRef(null);
  var id2 = menuId + "-menuitem-" + useId();
  var {
    index: index2,
    register
  } = useMenuDescendant({
    disabled: isDisabled && !isFocusable
  });
  var onMouseEnter = React64.useCallback((event) => {
    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
    if (isDisabled)
      return;
    setFocusedIndex(index2);
  }, [setFocusedIndex, index2, isDisabled, onMouseEnterProp]);
  var onMouseMove = React64.useCallback((event) => {
    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
    if (ref.current && !isActiveElement(ref.current)) {
      onMouseEnter(event);
    }
  }, [onMouseEnter, onMouseMoveProp]);
  var onMouseLeave = React64.useCallback((event) => {
    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
    if (isDisabled)
      return;
    setFocusedIndex(-1);
  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);
  var onClick = React64.useCallback((event) => {
    onClickProp == null ? void 0 : onClickProp(event);
    if (!isTargetMenuItem(event))
      return;
    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {
      onClose();
    }
  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);
  var isFocused = index2 === focusedIndex;
  var trulyDisabled = isDisabled && !isFocusable;
  useUpdateEffect(() => {
    if (!isOpen)
      return;
    if (isFocused && !trulyDisabled && ref.current) {
      focus(ref.current, {
        nextTick: true
      });
    } else if (menuRef.current && !isActiveElement(menuRef.current)) {
      focus(menuRef.current);
    }
  }, [isFocused, trulyDisabled, menuRef, isOpen]);
  var clickableProps = useClickable({
    onClick,
    onMouseEnter,
    onMouseMove,
    onMouseLeave,
    ref: mergeRefs(register, ref, externalRef),
    isDisabled,
    isFocusable
  });
  return _extends55({}, htmlProps, clickableProps, {
    id: id2,
    role: "menuitem",
    tabIndex: isFocused ? 0 : -1
  });
}
function useMenuOption(props, ref) {
  if (props === void 0) {
    props = {};
  }
  if (ref === void 0) {
    ref = null;
  }
  var {
    type = "radio",
    isChecked
  } = props, rest = _objectWithoutPropertiesLoose32(props, ["type", "isChecked"]);
  var ownProps = useMenuItem(rest, ref);
  return _extends55({}, ownProps, {
    role: "menuitem" + type,
    "aria-checked": isChecked
  });
}
function useMenuOptionGroup(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    children,
    type = "radio",
    value: valueProp,
    defaultValue,
    onChange: onChangeProp
  } = props, htmlProps = _objectWithoutPropertiesLoose32(props, ["children", "type", "value", "defaultValue", "onChange"]);
  var isRadio2 = type === "radio";
  var fallback = isRadio2 ? "" : [];
  var [value, setValue] = useControllableState({
    defaultValue: defaultValue != null ? defaultValue : fallback,
    value: valueProp,
    onChange: onChangeProp
  });
  var onChange = React64.useCallback((selectedValue) => {
    if (type === "radio" && isString(value)) {
      setValue(selectedValue);
    }
    if (type === "checkbox" && isArray(value)) {
      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);
      setValue(nextValue);
    }
  }, [value, setValue, type]);
  var validChildren = getValidChildren(children);
  var clones = validChildren.map((child) => {
    if (child.type.id !== "MenuItemOption")
      return child;
    var onClick = (event) => {
      onChange(child.props.value);
      child.props.onClick == null ? void 0 : child.props.onClick(event);
    };
    var isChecked = type === "radio" ? child.props.value === value : value.includes(child.props.value);
    return React64.cloneElement(child, {
      type,
      onClick,
      isChecked
    });
  });
  return _extends55({}, htmlProps, {
    children: clones
  });
}
function useMenuState() {
  var {
    isOpen,
    onClose
  } = useMenuContext();
  return {
    isOpen,
    onClose
  };
}

// node_modules/@chakra-ui/menu/dist/esm/menu.js
function _extends56() {
  _extends56 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends56.apply(this, arguments);
}
function _objectWithoutPropertiesLoose33(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Menu = (props) => {
  var {
    children
  } = props;
  var styles2 = useMultiStyleConfig("Menu", props);
  var ownProps = omitThemingProps(props);
  var _useMenu = useMenu(ownProps), {
    descendants
  } = _useMenu, ctx = _objectWithoutPropertiesLoose33(_useMenu, ["descendants"]);
  var context = React65.useMemo(() => ctx, [ctx]);
  var {
    isOpen,
    onClose,
    forceUpdate
  } = context;
  return React65.createElement(MenuDescendantsProvider, {
    value: descendants
  }, React65.createElement(MenuProvider, {
    value: context
  }, React65.createElement(StylesProvider, {
    value: styles2
  }, runIfFn(children, {
    isOpen,
    onClose,
    forceUpdate
  }))));
};
if (__DEV__) {
  Menu.displayName = "Menu";
}
var StyledMenuButton = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React65.createElement(chakra.button, _extends56({
    ref
  }, props, {
    __css: _extends56({
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      outline: 0,
      transition: "all 250ms"
    }, styles2.button)
  }));
});
var MenuButton = forwardRef((props, ref) => {
  var {
    as: As
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["children", "as"]);
  var buttonProps = useMenuButton(rest, ref);
  var Element2 = As || StyledMenuButton;
  return React65.createElement(Element2, _extends56({}, buttonProps, {
    className: cx("chakra-menu__menu-button", props.className)
  }), React65.createElement(chakra.span, {
    __css: {
      pointerEvents: "none",
      flex: "1 1 auto",
      minW: 0
    }
  }, props.children));
});
if (__DEV__) {
  MenuButton.displayName = "MenuButton";
}
var motionVariants = {
  enter: {
    visibility: "visible",
    opacity: 1,
    scale: 1,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    transitionEnd: {
      visibility: "hidden"
    },
    opacity: 0,
    scale: 0.8,
    transition: {
      duration: 0.1,
      easings: "easeOut"
    }
  }
};
var MotionDiv = "custom" in motion ? motion.custom(chakra.div) : motion(chakra.div);
var MenuList = forwardRef((props, ref) => {
  var _props$zIndex, _styles$list;
  var {
    rootProps
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["rootProps"]);
  var {
    isOpen,
    onTransitionEnd
  } = useMenuContext();
  var listProps = useMenuList(rest, ref);
  var positionerProps = useMenuPositioner(rootProps);
  var styles2 = useStyles();
  return React65.createElement(chakra.div, _extends56({}, positionerProps, {
    __css: {
      zIndex: (_props$zIndex = props.zIndex) != null ? _props$zIndex : (_styles$list = styles2.list) == null ? void 0 : _styles$list.zIndex
    }
  }), React65.createElement(MotionDiv, _extends56({}, listProps, {
    onUpdate: onTransitionEnd,
    className: cx("chakra-menu__menu-list", listProps.className),
    variants: motionVariants,
    initial: false,
    animate: isOpen ? "enter" : "exit",
    __css: _extends56({
      outline: 0
    }, styles2.list)
  })));
});
if (__DEV__) {
  MenuList.displayName = "MenuList";
}
var StyledMenuItem = forwardRef((props, ref) => {
  var {
    type
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["type"]);
  var styles2 = useStyles();
  var btnType = rest.as ? type != null ? type : void 0 : "button";
  var buttonStyles = _extends56({
    textDecoration: "none",
    color: "inherit",
    userSelect: "none",
    display: "flex",
    width: "100%",
    alignItems: "center",
    textAlign: "start",
    flex: "0 0 auto",
    outline: 0
  }, styles2.item);
  return React65.createElement(chakra.button, _extends56({
    ref,
    type: btnType
  }, rest, {
    __css: buttonStyles
  }));
});
var MenuItem = forwardRef((props, ref) => {
  var {
    icon,
    iconSpacing = "0.75rem",
    command,
    commandSpacing = "0.75rem",
    children
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["icon", "iconSpacing", "command", "commandSpacing", "children"]);
  var menuItemProps = useMenuItem(rest, ref);
  var shouldWrap = icon || command;
  var _children = shouldWrap ? React65.createElement("span", {
    style: {
      pointerEvents: "none",
      flex: 1
    }
  }, children) : children;
  return React65.createElement(StyledMenuItem, _extends56({}, menuItemProps, {
    className: cx("chakra-menu__menuitem", menuItemProps.className)
  }), icon && React65.createElement(MenuIcon, {
    fontSize: "0.8em",
    marginEnd: iconSpacing
  }, icon), _children, command && React65.createElement(MenuCommand, {
    marginStart: commandSpacing
  }, command));
});
if (__DEV__) {
  MenuItem.displayName = "MenuItem";
}
var CheckIcon3 = (props) => React65.createElement("svg", _extends56({
  viewBox: "0 0 14 14",
  width: "1em",
  height: "1em"
}, props), React65.createElement("polygon", {
  fill: "currentColor",
  points: "5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039"
}));
var MenuItemOption = forwardRef((props, ref) => {
  var {
    icon,
    iconSpacing = "0.75rem"
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["icon", "iconSpacing"]);
  var optionProps = useMenuOption(rest, ref);
  return React65.createElement(StyledMenuItem, _extends56({}, optionProps, {
    className: cx("chakra-menu__menuitem-option", rest.className)
  }), React65.createElement(MenuIcon, {
    fontSize: "0.8em",
    marginEnd: iconSpacing,
    opacity: props.isChecked ? 1 : 0
  }, icon || React65.createElement(CheckIcon3, null)), React65.createElement("span", {
    style: {
      flex: 1
    }
  }, optionProps.children));
});
MenuItemOption.id = "MenuItemOption";
if (__DEV__) {
  MenuItemOption.displayName = "MenuItemOption";
}
var MenuOptionGroup = (props) => {
  var {
    className,
    title
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["className", "title"]);
  var ownProps = useMenuOptionGroup(rest);
  return React65.createElement(MenuGroup, _extends56({
    title,
    className: cx("chakra-menu__option-group", className)
  }, ownProps));
};
if (__DEV__) {
  MenuOptionGroup.displayName = "MenuOptionGroup";
}
var MenuGroup = forwardRef((props, ref) => {
  var {
    title,
    children,
    className
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["title", "children", "className"]);
  var _className = cx("chakra-menu__group__title", className);
  var styles2 = useStyles();
  return React65.createElement("div", {
    ref,
    className: "chakra-menu__group",
    role: "group"
  }, title && React65.createElement(chakra.p, _extends56({
    className: _className
  }, rest, {
    __css: styles2.groupTitle
  }), title), children);
});
if (__DEV__) {
  MenuGroup.displayName = "MenuGroup";
}
var MenuCommand = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React65.createElement(chakra.span, _extends56({
    ref
  }, props, {
    __css: styles2.command,
    className: "chakra-menu__command"
  }));
});
if (__DEV__) {
  MenuCommand.displayName = "MenuCommand";
}
var MenuIcon = (props) => {
  var {
    className,
    children
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["className", "children"]);
  var child = React65.Children.only(children);
  var clone = React65.isValidElement(child) ? React65.cloneElement(child, {
    focusable: "false",
    "aria-hidden": true,
    className: cx("chakra-menu__icon", child.props.className)
  }) : null;
  var _className = cx("chakra-menu__icon-wrapper", className);
  return React65.createElement(chakra.span, _extends56({
    className: _className
  }, rest, {
    __css: {
      flexShrink: 0
    }
  }), clone);
};
if (__DEV__) {
  MenuIcon.displayName = "MenuIcon";
}
var MenuDivider = (props) => {
  var {
    className
  } = props, rest = _objectWithoutPropertiesLoose33(props, ["className"]);
  var styles2 = useStyles();
  return React65.createElement(chakra.hr, _extends56({
    role: "separator",
    "aria-orientation": "horizontal",
    className: cx("chakra-menu__divider", className)
  }, rest, {
    __css: styles2.divider
  }));
};
if (__DEV__) {
  MenuDivider.displayName = "MenuDivider";
}

// node_modules/@chakra-ui/focus-lock/dist/esm/index.js
var React77 = __toModule(require_react());

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose34(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// node_modules/react-focus-lock/dist/es2015/Combination.js
var React73 = __toModule(require_react());

// node_modules/react-focus-lock/dist/es2015/Lock.js
var React70 = __toModule(require_react());
var import_prop_types2 = __toModule(require_prop_types());

// node_modules/focus-lock/dist/es2015/constants.js
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef2(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react59 = __toModule(require_react());
function useCallbackRef2(initialValue, callback) {
  var ref = (0, import_react59.useState)(function() {
    return {
      value: initialValue,
      callback,
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
function useMergeRefs2(refs, defaultValue) {
  return useCallbackRef2(defaultValue, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef2(ref, newValue);
    });
  });
}

// node_modules/use-callback-ref/dist/es2015/refToCallback.js
var weakMem = new WeakMap();

// node_modules/react-focus-lock/dist/es2015/FocusGuard.js
var React66 = __toModule(require_react());
var import_prop_types = __toModule(require_prop_types());
var hiddenGuard = {
  width: "1px",
  height: "0px",
  padding: 0,
  overflow: "hidden",
  position: "fixed",
  top: "1px",
  left: "1px"
};
var InFocusGuard = function InFocusGuard2(_ref2) {
  var children = _ref2.children;
  return React66.createElement(React66.Fragment, null, React66.createElement("div", {
    key: "guard-first",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }), children, children && React66.createElement("div", {
    key: "guard-last",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }));
};
InFocusGuard.propTypes = true ? {
  children: import_prop_types.default.node
} : {};
InFocusGuard.defaultProps = {
  children: null
};

// node_modules/use-sidecar/node_modules/tslib/tslib.es6.js
var __assign2 = function() {
  __assign2 = Object.assign || function __assign4(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}

// node_modules/use-sidecar/dist/es2015/hoc.js
var React67 = __toModule(require_react());

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react60 = __toModule(require_react());
var cache = new WeakMap();

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a2) {
  return a2;
}
function innerCreateMedium(defaults2, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults2;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb2) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
      }
      buffer = {
        push: function(x) {
          return cb2(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb2) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb2);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb2);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter2) {
          pendingQueue = pendingQueue.filter(filter2);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createMedium(defaults2, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  return innerCreateMedium(defaults2, middleware);
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign2({async: true, ssr: false}, options);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/renderProp.js
var React68 = __toModule(require_react());
var import_react61 = __toModule(require_react());

// node_modules/use-sidecar/dist/es2015/exports.js
var React69 = __toModule(require_react());
var SideCar = function(_a) {
  var sideCar2 = _a.sideCar, rest = __rest2(_a, ["sideCar"]);
  if (!sideCar2) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar2.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React69.createElement(Target, __assign2({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}

// node_modules/react-focus-lock/dist/es2015/medium.js
var mediumFocus = createMedium({}, function(_ref2) {
  var target = _ref2.target, currentTarget = _ref2.currentTarget;
  return {
    target,
    currentTarget
  };
});
var mediumBlur = createMedium();
var mediumEffect = createMedium();
var mediumSidecar = createSidecarMedium({
  async: true
});

// node_modules/react-focus-lock/dist/es2015/Lock.js
var emptyArray = [];
var FocusLock = React70.forwardRef(function FocusLockUI(props, parentRef) {
  var _extends210;
  var _React$useState = React70.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
  var observed = React70.useRef();
  var isActive = React70.useRef(false);
  var originalFocusedElement = React70.useRef(null);
  var children = props.children, disabled = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container3 = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar2 = props.sideCar, shouldReturnFocus = props.returnFocus, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
  var _React$useState2 = React70.useState({}), id2 = _React$useState2[0];
  var onActivation = React70.useCallback(function() {
    originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
    if (observed.current && onActivationCallback) {
      onActivationCallback(observed.current);
    }
    isActive.current = true;
  }, [onActivationCallback]);
  var onDeactivation = React70.useCallback(function() {
    isActive.current = false;
    if (onDeactivationCallback) {
      onDeactivationCallback(observed.current);
    }
  }, [onDeactivationCallback]);
  var returnFocus = React70.useCallback(function(allowDefer) {
    var current = originalFocusedElement.current;
    if (Boolean(shouldReturnFocus) && current && current.focus) {
      var focusOptions = typeof shouldReturnFocus === "object" ? shouldReturnFocus : void 0;
      originalFocusedElement.current = null;
      if (allowDefer) {
        Promise.resolve().then(function() {
          return current.focus(focusOptions);
        });
      } else {
        current.focus(focusOptions);
      }
    }
  }, [shouldReturnFocus]);
  var onFocus3 = React70.useCallback(function(event) {
    if (isActive.current) {
      mediumFocus.useMedium(event);
    }
  }, []);
  var onBlur3 = mediumBlur.useMedium;
  var setObserveNode = React70.useCallback(function(newObserved) {
    if (observed.current !== newObserved) {
      observed.current = newObserved;
      setObserved(newObserved);
    }
  }, []);
  if (true) {
    if (typeof allowTextSelection !== "undefined") {
      console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
    }
    React70.useEffect(function() {
      if (!observed.current) {
        console.error("FocusLock: could not obtain ref to internal node");
      }
    }, []);
  }
  var lockProps = _extends((_extends210 = {}, _extends210[FOCUS_DISABLED] = disabled && "disabled", _extends210[FOCUS_GROUP] = group, _extends210), containerProps);
  var hasLeadingGuards = noFocusGuards !== true;
  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
  var mergedRef = useMergeRefs2([parentRef, setObserveNode]);
  return React70.createElement(React70.Fragment, null, hasLeadingGuards && [
    React70.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }),
    React70.createElement("div", {
      key: "guard-nearest",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 1,
      style: hiddenGuard
    })
  ], !disabled && React70.createElement(SideCar2, {
    id: id2,
    sideCar: mediumSidecar,
    observed: realObserved,
    disabled,
    persistentFocus,
    crossFrame,
    autoFocus,
    whiteList,
    shards,
    onActivation,
    onDeactivation,
    returnFocus
  }), React70.createElement(Container3, _extends({
    ref: mergedRef
  }, lockProps, {
    className,
    onBlur: onBlur3,
    onFocus: onFocus3
  }), children), hasTailingGuards && React70.createElement("div", {
    "data-focus-guard": true,
    tabIndex: disabled ? -1 : 0,
    style: hiddenGuard
  }));
});
FocusLock.propTypes = true ? {
  children: import_prop_types2.node,
  disabled: import_prop_types2.bool,
  returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object]),
  noFocusGuards: import_prop_types2.bool,
  allowTextSelection: import_prop_types2.bool,
  autoFocus: import_prop_types2.bool,
  persistentFocus: import_prop_types2.bool,
  crossFrame: import_prop_types2.bool,
  group: import_prop_types2.string,
  className: import_prop_types2.string,
  whiteList: import_prop_types2.func,
  shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
  as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
  lockProps: import_prop_types2.object,
  onActivation: import_prop_types2.func,
  onDeactivation: import_prop_types2.func,
  sideCar: import_prop_types2.any.isRequired
} : {};
FocusLock.defaultProps = {
  children: void 0,
  disabled: false,
  returnFocus: false,
  noFocusGuards: false,
  autoFocus: true,
  persistentFocus: false,
  crossFrame: true,
  allowTextSelection: void 0,
  group: void 0,
  className: void 0,
  whiteList: void 0,
  shards: void 0,
  as: "div",
  lockProps: {},
  onActivation: void 0,
  onDeactivation: void 0
};
var Lock_default = FocusLock;

// node_modules/react-focus-lock/dist/es2015/Trap.js
var React72 = __toModule(require_react());
var import_prop_types3 = __toModule(require_prop_types());

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/react-clientside-effect/lib/index.es.js
var import_react62 = __toModule(require_react());
function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
  if (true) {
    if (typeof reducePropsToState2 !== "function") {
      throw new Error("Expected reducePropsToState to be a function.");
    }
    if (typeof handleStateChangeOnClient2 !== "function") {
      throw new Error("Expected handleStateChangeOnClient to be a function.");
    }
  }
  function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }
  return function wrap2(WrappedComponent) {
    if (true) {
      if (typeof WrappedComponent !== "function") {
        throw new Error("Expected WrappedComponent to be a React component.");
      }
    }
    var mountedInstances = [];
    var state;
    function emitChange() {
      state = reducePropsToState2(mountedInstances.map(function(instance) {
        return instance.props;
      }));
      handleStateChangeOnClient2(state);
    }
    var SideEffect = function(_PureComponent) {
      _inheritsLoose(SideEffect2, _PureComponent);
      function SideEffect2() {
        return _PureComponent.apply(this, arguments) || this;
      }
      SideEffect2.peek = function peek() {
        return state;
      };
      var _proto = SideEffect2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        mountedInstances.push(this);
        emitChange();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        emitChange();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        var index2 = mountedInstances.indexOf(this);
        mountedInstances.splice(index2, 1);
        emitChange();
      };
      _proto.render = function render3() {
        return import_react62.default.createElement(WrappedComponent, this.props);
      };
      return SideEffect2;
    }(import_react62.PureComponent);
    _defineProperty2(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
    return SideEffect;
  };
}
var index_es_default = withSideEffect;

// node_modules/focus-lock/dist/es2015/utils/array.js
var toArray = function(a2) {
  var ret = Array(a2.length);
  for (var i = 0; i < a2.length; ++i) {
    ret[i] = a2[i];
  }
  return ret;
};
var asArray = function(a2) {
  return Array.isArray(a2) ? a2 : [a2];
};

// node_modules/focus-lock/dist/es2015/utils/all-affected.js
var filterNested = function(nodes) {
  var contained = new Set();
  var l = nodes.length;
  for (var i = 0; i < l; i += 1) {
    for (var j = i + 1; j < l; j += 1) {
      var position2 = nodes[i].compareDocumentPosition(nodes[j]);
      if ((position2 & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
        contained.add(j);
      }
      if ((position2 & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
        contained.add(i);
      }
    }
  }
  return nodes.filter(function(_, index2) {
    return !contained.has(index2);
  });
};
var getTopParent = function(node2) {
  return node2.parentNode ? getTopParent(node2.parentNode) : node2;
};
var getAllAffectedNodes = function(node2) {
  var nodes = asArray(node2);
  return nodes.filter(Boolean).reduce(function(acc, currentNode) {
    var group = currentNode.getAttribute(FOCUS_GROUP);
    acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[" + FOCUS_GROUP + '="' + group + '"]:not([' + FOCUS_DISABLED + '="disabled"])'))) : [currentNode]);
    return acc;
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/is.js
var isElementHidden = function(computedStyle) {
  if (!computedStyle || !computedStyle.getPropertyValue) {
    return false;
  }
  return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var isVisible = function(node2) {
  return !node2 || node2 === document || node2 && node2.nodeType === Node.DOCUMENT_NODE || !isElementHidden(window.getComputedStyle(node2, null)) && isVisible(node2.parentNode && node2.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? node2.parentNode.host : node2.parentNode);
};
var notHiddenInput = function(node2) {
  return !((node2.tagName === "INPUT" || node2.tagName === "BUTTON") && (node2.type === "hidden" || node2.disabled));
};
var isGuard = function(node2) {
  return Boolean(node2 && node2.dataset && node2.dataset.focusGuard);
};
var isNotAGuard = function(node2) {
  return !isGuard(node2);
};
var isDefined = function(x) {
  return Boolean(x);
};

// node_modules/focus-lock/dist/es2015/utils/tabOrder.js
var tabSort = function(a2, b2) {
  var tabDiff = a2.tabIndex - b2.tabIndex;
  var indexDiff = a2.index - b2.index;
  if (tabDiff) {
    if (!a2.tabIndex) {
      return 1;
    }
    if (!b2.tabIndex) {
      return -1;
    }
  }
  return tabDiff || indexDiff;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
  return toArray(nodes).map(function(node2, index2) {
    return {
      node: node2,
      index: index2,
      tabIndex: keepGuards && node2.tabIndex === -1 ? (node2.dataset || {}).focusGuard ? 0 : -1 : node2.tabIndex
    };
  }).filter(function(data) {
    return !filterNegative || data.tabIndex >= 0;
  }).sort(tabSort);
};

// node_modules/focus-lock/dist/es2015/utils/tabbables.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
];

// node_modules/focus-lock/dist/es2015/utils/tabUtils.js
var queryTabbables = tabbables.join(",");
var queryGuardTabbables = queryTabbables + ", [data-focus-guard]";
var getFocusables = function(parents, withGuards) {
  return parents.reduce(function(acc, parent) {
    return acc.concat(toArray(parent.querySelectorAll(withGuards ? queryGuardTabbables : queryTabbables)), parent.parentNode ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node2) {
      return node2 === parent;
    }) : []);
  }, []);
};
var getParentAutofocusables = function(parent) {
  var parentFocus = parent.querySelectorAll("[" + FOCUS_AUTO + "]");
  return toArray(parentFocus).map(function(node2) {
    return getFocusables([node2]);
  }).reduce(function(acc, nodes) {
    return acc.concat(nodes);
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/DOMutils.js
var filterFocusable = function(nodes) {
  return toArray(nodes).filter(function(node2) {
    return isVisible(node2);
  }).filter(function(node2) {
    return notHiddenInput(node2);
  });
};
var getTabbableNodes = function(topNodes, withGuards) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards)), true, withGuards);
};
var getAllTabbableNodes = function(topNodes) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes)), false);
};
var parentAutofocusables = function(topNode) {
  return filterFocusable(getParentAutofocusables(topNode));
};

// node_modules/focus-lock/dist/es2015/utils/parenting.js
var getParents = function(node2, parents) {
  if (parents === void 0) {
    parents = [];
  }
  parents.push(node2);
  if (node2.parentNode) {
    getParents(node2.parentNode, parents);
  }
  return parents;
};
var getCommonParent = function(nodeA, nodeB) {
  var parentsA = getParents(nodeA);
  var parentsB = getParents(nodeB);
  for (var i = 0; i < parentsA.length; i += 1) {
    var currentParent = parentsA[i];
    if (parentsB.indexOf(currentParent) >= 0) {
      return currentParent;
    }
  }
  return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
  var activeElements = asArray(baseActiveElement);
  var leftEntries = asArray(leftEntry);
  var activeElement = activeElements[0];
  var topCommon = false;
  leftEntries.filter(Boolean).forEach(function(entry) {
    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
    rightEntries.filter(Boolean).forEach(function(subEntry) {
      var common = getCommonParent(activeElement, subEntry);
      if (common) {
        if (!topCommon || common.contains(topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
  });
  return topCommon;
};
var allParentAutofocusables = function(entries) {
  return entries.reduce(function(acc, node2) {
    return acc.concat(parentAutofocusables(node2));
  }, []);
};

// node_modules/focus-lock/dist/es2015/focusables.js
var getFocusabledIn = function(topNode) {
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(topNode, topNode, entries);
  var outerNodes = getTabbableNodes([commonParent], true);
  var innerElements = getTabbableNodes(entries).filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  }).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  return outerNodes.map(function(_a) {
    var node2 = _a.node, index2 = _a.index;
    return {
      node: node2,
      index: index2,
      lockItem: innerElements.indexOf(node2) >= 0,
      guard: isGuard(node2)
    };
  });
};

// node_modules/focus-lock/dist/es2015/focusInside.js
var focusInFrame = function(frame) {
  return frame === document.activeElement;
};
var focusInsideIframe = function(topNode) {
  return Boolean(toArray(topNode.querySelectorAll("iframe")).some(function(node2) {
    return focusInFrame(node2);
  }));
};
var focusInside = function(topNode) {
  var activeElement = document && document.activeElement;
  if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
    return false;
  }
  return getAllAffectedNodes(topNode).reduce(function(result, node2) {
    return result || node2.contains(activeElement) || focusInsideIframe(node2);
  }, false);
};

// node_modules/focus-lock/dist/es2015/focusIsHidden.js
var focusIsHidden = function() {
  return document && toArray(document.querySelectorAll("[" + FOCUS_ALLOW + "]")).some(function(node2) {
    return node2.contains(document.activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/utils/correctFocus.js
var isRadio = function(node2) {
  return node2.tagName === "INPUT" && node2.type === "radio";
};
var findSelectedRadio = function(node2, nodes) {
  return nodes.filter(isRadio).filter(function(el) {
    return el.name === node2.name;
  }).filter(function(el) {
    return el.checked;
  })[0] || node2;
};
var correctNode = function(node2, nodes) {
  if (isRadio(node2) && node2.name) {
    return findSelectedRadio(node2, nodes);
  }
  return node2;
};
var correctNodes = function(nodes) {
  var resultSet = new Set();
  nodes.forEach(function(node2) {
    return resultSet.add(correctNode(node2, nodes));
  });
  return nodes.filter(function(node2) {
    return resultSet.has(node2);
  });
};

// node_modules/focus-lock/dist/es2015/utils/firstFocus.js
var pickFirstFocus = function(nodes) {
  if (nodes[0] && nodes.length > 1) {
    return correctNode(nodes[0], nodes);
  }
  return nodes[0];
};
var pickFocusable = function(nodes, index2) {
  if (nodes.length > 1) {
    return nodes.indexOf(correctNode(nodes[index2], nodes));
  }
  return index2;
};

// node_modules/focus-lock/dist/es2015/solver.js
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
  var cnt = innerNodes.length;
  var firstFocus = innerNodes[0];
  var lastFocus = innerNodes[cnt - 1];
  var isOnGuard = isGuard(activeElement);
  if (innerNodes.indexOf(activeElement) >= 0) {
    return void 0;
  }
  var activeIndex = outerNodes.indexOf(activeElement);
  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
  var indexDiff = activeIndex - lastIndex;
  var firstNodeIndex = outerNodes.indexOf(firstFocus);
  var lastNodeIndex = outerNodes.indexOf(lastFocus);
  var correctedNodes = correctNodes(outerNodes);
  var correctedIndexDiff = correctedNodes.indexOf(activeElement) - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
  var returnFirstNode = pickFocusable(innerNodes, 0);
  var returnLastNode = pickFocusable(innerNodes, cnt - 1);
  if (activeIndex === -1 || lastNodeInside === -1) {
    return NEW_FOCUS;
  }
  if (!indexDiff && lastNodeInside >= 0) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnLastNode;
  }
  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnFirstNode;
  }
  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex) {
    return returnLastNode;
  }
  if (activeIndex > lastNodeIndex) {
    return returnFirstNode;
  }
  if (indexDiff) {
    if (Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    return (cnt + lastNodeInside + indexDiff) % cnt;
  }
  return void 0;
};

// node_modules/focus-lock/dist/es2015/focusMerge.js
var findAutoFocused = function(autoFocusables) {
  return function(node2) {
    return node2.autofocus || node2.dataset && !!node2.dataset.autofocus || autoFocusables.indexOf(node2) >= 0;
  };
};
var reorderNodes = function(srcNodes, dstNodes) {
  var remap = new Map();
  dstNodes.forEach(function(entity) {
    return remap.set(entity.node, entity);
  });
  return srcNodes.map(function(node2) {
    return remap.get(node2);
  }).filter(isDefined);
};
var getFocusMerge = function(topNode, lastNode) {
  var activeElement = document && document.activeElement;
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
  var anyFocusable = getAllTabbableNodes(entries);
  var innerElements = getTabbableNodes(entries).filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  });
  if (!innerElements[0]) {
    innerElements = anyFocusable;
    if (!innerElements[0]) {
      return void 0;
    }
  }
  var outerNodes = getAllTabbableNodes([commonParent]).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var orderedInnerElements = reorderNodes(outerNodes, innerElements);
  var innerNodes = orderedInnerElements.map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
  if (newId === NEW_FOCUS) {
    var autoFocusable = anyFocusable.map(function(_a) {
      var node2 = _a.node;
      return node2;
    }).filter(findAutoFocused(allParentAutofocusables(entries)));
    return {
      node: autoFocusable && autoFocusable.length ? pickFirstFocus(autoFocusable) : pickFirstFocus(innerNodes)
    };
  }
  if (newId === void 0) {
    return newId;
  }
  return orderedInnerElements[newId];
};

// node_modules/focus-lock/dist/es2015/setFocus.js
var focusOn = function(target) {
  target.focus();
  if ("contentWindow" in target && target.contentWindow) {
    target.contentWindow.focus();
  }
};
var guardCount = 0;
var lockDisabled = false;
var setFocus = function(topNode, lastNode) {
  var focusable = getFocusMerge(topNode, lastNode);
  if (lockDisabled) {
    return;
  }
  if (focusable) {
    if (guardCount > 2) {
      console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
      lockDisabled = true;
      setTimeout(function() {
        lockDisabled = false;
      }, 1);
      return;
    }
    guardCount++;
    focusOn(focusable.node);
    guardCount--;
  }
};

// node_modules/focus-lock/dist/es2015/index.js
var es2015_default = setFocus;

// node_modules/react-focus-lock/dist/es2015/util.js
function deferAction(action) {
  var _window = window, setImmediate = _window.setImmediate;
  if (typeof setImmediate !== "undefined") {
    setImmediate(action);
  } else {
    setTimeout(action, 1);
  }
}
var inlineProp = function inlineProp2(name, value) {
  var obj = {};
  obj[name] = value;
  return obj;
};

// node_modules/react-focus-lock/dist/es2015/Trap.js
var focusOnBody = function focusOnBody2() {
  return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus2() {
  return focusOnBody() || focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist2() {
  return true;
};
var focusWhitelisted = function focusWhitelisted2(activeElement) {
  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal2(observerNode, portaledElement) {
  lastPortaledElement = {
    observerNode,
    portaledElement
  };
};
var focusIsPortaledPair = function focusIsPortaledPair2(element) {
  return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end2, step, allNodes) {
  var lastGuard = null;
  var i = startIndex;
  do {
    var item = allNodes[i];
    if (item.guard) {
      if (item.node.dataset.focusAutoGuard) {
        lastGuard = item;
      }
    } else if (item.lockItem) {
      if (i !== startIndex) {
        return;
      }
      lastGuard = null;
    } else {
      break;
    }
  } while ((i += step) !== end2);
  if (lastGuard) {
    lastGuard.node.tabIndex = 0;
  }
}
var extractRef = function extractRef2(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var focusWasOutside = function focusWasOutside2(crossFrameOption) {
  if (crossFrameOption) {
    return Boolean(focusWasOutsideWindow);
  }
  return focusWasOutsideWindow === "meanwhile";
};
var activateTrap = function activateTrap2() {
  var result = false;
  if (lastActiveTrap) {
    var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame;
    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
    var activeElement = document && document.activeElement;
    if (workingNode) {
      var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !(focusInside(workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              if (activeElement.blur) {
                activeElement.blur();
              }
              document.body.focus();
            } else {
              result = es2015_default(workingArea, lastActiveFocus);
              lastPortaledElement = {};
            }
          }
          focusWasOutsideWindow = false;
          lastActiveFocus = document && document.activeElement;
        }
      }
      if (document) {
        var newActiveElement = document && document.activeElement;
        var allNodes = getFocusabledIn(workingArea);
        var focusedIndex = allNodes.map(function(_ref2) {
          var node2 = _ref2.node;
          return node2;
        }).indexOf(newActiveElement);
        if (focusedIndex > -1) {
          allNodes.filter(function(_ref2) {
            var guard = _ref2.guard, node2 = _ref2.node;
            return guard && node2.dataset.focusAutoGuard;
          }).forEach(function(_ref3) {
            var node2 = _ref3.node;
            return node2.removeAttribute("tabIndex");
          });
          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
          autoGuard(focusedIndex, -1, -1, allNodes);
        }
      }
    }
  }
  return result;
};
var onTrap = function onTrap2(event) {
  if (activateTrap() && event) {
    event.stopPropagation();
    event.preventDefault();
  }
};
var onBlur = function onBlur2() {
  return deferAction(activateTrap);
};
var onFocus = function onFocus2(event) {
  var source = event.target;
  var currentNode = event.currentTarget;
  if (!currentNode.contains(source)) {
    recordPortal(currentNode, source);
  }
};
var FocusWatcher = function FocusWatcher2() {
  return null;
};
var FocusTrap = function FocusTrap2(_ref4) {
  var children = _ref4.children;
  return React72.createElement("div", {
    onBlur,
    onFocus
  }, children);
};
FocusTrap.propTypes = true ? {
  children: import_prop_types3.default.node.isRequired
} : {};
var onWindowBlur = function onWindowBlur2() {
  focusWasOutsideWindow = "just";
  setTimeout(function() {
    focusWasOutsideWindow = "meanwhile";
  }, 0);
};
var attachHandler = function attachHandler2() {
  document.addEventListener("focusin", onTrap, true);
  document.addEventListener("focusout", onBlur);
  window.addEventListener("blur", onWindowBlur);
};
var detachHandler = function detachHandler2() {
  document.removeEventListener("focusin", onTrap, true);
  document.removeEventListener("focusout", onBlur);
  window.removeEventListener("blur", onWindowBlur);
};
function reducePropsToState(propsList) {
  return propsList.filter(function(_ref5) {
    var disabled = _ref5.disabled;
    return !disabled;
  });
}
function handleStateChangeOnClient(traps) {
  var trap = traps.slice(-1)[0];
  if (trap && !lastActiveTrap) {
    attachHandler();
  }
  var lastTrap = lastActiveTrap;
  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
  lastActiveTrap = trap;
  if (lastTrap && !sameTrap) {
    lastTrap.onDeactivation();
    if (!traps.filter(function(_ref6) {
      var id2 = _ref6.id;
      return id2 === lastTrap.id;
    }).length) {
      lastTrap.returnFocus(!trap);
    }
  }
  if (trap) {
    lastActiveFocus = null;
    if (!sameTrap || lastTrap.observed !== trap.observed) {
      trap.onActivation();
    }
    activateTrap(true);
    deferAction(activateTrap);
  } else {
    detachHandler();
    lastActiveFocus = null;
  }
}
mediumFocus.assignSyncMedium(onFocus);
mediumBlur.assignMedium(onBlur);
mediumEffect.assignMedium(function(cb2) {
  return cb2({
    moveFocusInside: es2015_default,
    focusInside
  });
});
var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

// node_modules/react-focus-lock/dist/es2015/Combination.js
var FocusLockCombination = React73.forwardRef(function FocusLockUICombination(props, ref) {
  return React73.createElement(Lock_default, _extends({
    sideCar: Trap_default,
    ref
  }, props));
});
var _ref = Lock_default.propTypes || {};
var sideCar = _ref.sideCar;
var propTypes = _objectWithoutPropertiesLoose34(_ref, ["sideCar"]);
FocusLockCombination.propTypes = true ? propTypes : {};
var Combination_default = FocusLockCombination;

// node_modules/react-focus-lock/dist/es2015/AutoFocusInside.js
var React74 = __toModule(require_react());
var import_prop_types4 = __toModule(require_prop_types());
var AutoFocusInside = function AutoFocusInside2(_ref2) {
  var disabled = _ref2.disabled, children = _ref2.children, className = _ref2.className;
  return React74.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !disabled), {
    className
  }), children);
};
AutoFocusInside.propTypes = true ? {
  children: import_prop_types4.default.node.isRequired,
  disabled: import_prop_types4.default.bool,
  className: import_prop_types4.default.string
} : {};
AutoFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/MoveFocusInside.js
var React75 = __toModule(require_react());
var import_prop_types5 = __toModule(require_prop_types());
var useFocusInside = function useFocusInside2(observedRef) {
  React75.useEffect(function() {
    var enabled = true;
    mediumEffect.useMedium(function(car) {
      var observed = observedRef && observedRef.current;
      if (enabled && observed) {
        if (!car.focusInside(observed)) {
          car.moveFocusInside(observed, null);
        }
      }
    });
    return function() {
      enabled = false;
    };
  }, [observedRef]);
};
function MoveFocusInside(_ref2) {
  var isDisabled = _ref2.disabled, className = _ref2.className, children = _ref2.children;
  var ref = React75.useRef(null);
  useFocusInside(isDisabled ? void 0 : ref);
  return React75.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !isDisabled), {
    ref,
    className
  }), children);
}
MoveFocusInside.propTypes = true ? {
  children: import_prop_types5.default.node.isRequired,
  disabled: import_prop_types5.default.bool,
  className: import_prop_types5.default.string
} : {};
MoveFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/FreeFocusInside.js
var React76 = __toModule(require_react());
var import_prop_types6 = __toModule(require_prop_types());
var FreeFocusInside = function FreeFocusInside2(_ref2) {
  var children = _ref2.children, className = _ref2.className;
  return React76.createElement("div", _extends({}, inlineProp(FOCUS_ALLOW, true), {
    className
  }), children);
};
FreeFocusInside.propTypes = true ? {
  children: import_prop_types6.default.node.isRequired,
  className: import_prop_types6.default.string
} : {};
FreeFocusInside.defaultProps = {
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/index.js
var es2015_default2 = Combination_default;

// node_modules/@chakra-ui/focus-lock/dist/esm/index.js
var FocusLock2 = (props) => {
  var {
    initialFocusRef,
    finalFocusRef,
    contentRef,
    restoreFocus,
    children,
    isDisabled,
    autoFocus,
    persistentFocus,
    lockFocusAcrossFrames
  } = props;
  var onActivation = React77.useCallback(() => {
    if (initialFocusRef != null && initialFocusRef.current) {
      initialFocusRef.current.focus();
    } else if (contentRef != null && contentRef.current) {
      var focusables = getAllFocusable(contentRef.current);
      if (focusables.length === 0) {
        focus(contentRef.current, {
          nextTick: true
        });
      }
    }
  }, [initialFocusRef, contentRef]);
  var onDeactivation = React77.useCallback(() => {
    var _finalFocusRef$curren;
    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();
  }, [finalFocusRef]);
  var returnFocus = restoreFocus && !finalFocusRef;
  return React77.createElement(es2015_default2, {
    crossFrame: lockFocusAcrossFrames,
    persistentFocus,
    autoFocus,
    disabled: isDisabled,
    onActivation,
    onDeactivation,
    returnFocus
  }, children);
};
if (__DEV__) {
  FocusLock2.displayName = "FocusLock";
}

// node_modules/@chakra-ui/modal/dist/esm/modal.js
var React84 = __toModule(require_react());

// node_modules/react-remove-scroll/node_modules/tslib/tslib.es6.js
var __assign3 = function() {
  __assign3 = Object.assign || function __assign4(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function __rest3(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var React82 = __toModule(require_react());

// node_modules/react-remove-scroll/dist/es2015/UI.js
var React78 = __toModule(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React78.forwardRef(function(props, parentRef) {
  var ref = React78.useRef(null);
  var _a = React78.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a[0], setCallbacks = _a[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar2 = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container3 = _b === void 0 ? "div" : _b, rest = __rest3(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
  var SideCar2 = sideCar2;
  var containerRef = useMergeRefs2([
    ref,
    parentRef
  ]);
  var containerProps = __assign3({}, rest, callbacks);
  return React78.createElement(React78.Fragment, null, enabled && React78.createElement(SideCar2, {sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref}), forwardProps ? React78.cloneElement(React78.Children.only(children), __assign3({}, containerProps, {ref: containerRef})) : React78.createElement(Container3, __assign3({}, containerProps, {className, ref: containerRef}), children));
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React81 = __toModule(require_react());

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React80 = __toModule(require_react());

// node_modules/react-style-singleton/dist/es2015/hook.js
var React79 = __toModule(require_react());

// node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};

// node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css2) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css2;
  } else {
    tag.appendChild(document.createTextNode(css2));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter2 = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter2 == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter2++;
    },
    remove: function() {
      counter2--;
      if (!counter2 && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles2) {
    React79.useEffect(function() {
      sheet.add(styles2);
      return function() {
        sheet.remove();
      };
    }, []);
  };
};

// node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle2 = styleHookSingleton();
  var Sheet = function(_a) {
    var styles2 = _a.styles;
    useStyle2(styles2);
    return null;
  };
  return Sheet;
};

// node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse3 = function(x) {
  return parseInt(x || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left2 = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top2 = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right2 = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [
    parse3(left2),
    parse3(top2),
    parse3(right2)
  ];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var getStyles = function(_a, allowRelative, gapMode, important) {
  var left2 = _a.left, top2 = _a.top, right2 = _a.right, gap = _a.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  ." + noScrollbarsClassName + " {\n   overflow: hidden " + important + ";\n   padding-right: " + gap + "px " + important + ";\n  }\n  body {\n    overflow: hidden " + important + ";\n    " + [
    allowRelative && "position: relative " + important + ";",
    gapMode === "margin" && "\n    padding-left: " + left2 + "px;\n    padding-top: " + top2 + "px;\n    padding-right: " + right2 + "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: " + gap + "px " + important + ";\n    ",
    gapMode === "padding" && "padding-right: " + gap + "px " + important + ";"
  ].filter(Boolean).join("") + "\n  }\n  \n  ." + zeroRightClassName + " {\n    right: " + gap + "px " + important + ";\n  }\n  \n  ." + fullWidthClassName + " {\n    margin-right: " + gap + "px " + important + ";\n  }\n  \n  ." + zeroRightClassName + " ." + zeroRightClassName + " {\n    right: 0 " + important + ";\n  }\n  \n  ." + fullWidthClassName + " ." + fullWidthClassName + " {\n    margin-right: 0 " + important + ";\n  }\n  \n  body {\n    " + removedBarSizeVariable + ": " + gap + "px;\n  }\n";
};
var RemoveScrollBar = function(props) {
  var _a = React80.useState(getGapWidth(props.gapMode)), gap = _a[0], setGap = _a[1];
  React80.useEffect(function() {
    setGap(getGapWidth(props.gapMode));
  }, [props.gapMode]);
  var noRelative = props.noRelative, noImportant = props.noImportant, _b = props.gapMode, gapMode = _b === void 0 ? "margin" : _b;
  return React80.createElement(Style, {styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "")});
};

// node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var elementCouldBeVScrolled = function(node2) {
  var styles2 = window.getComputedStyle(node2);
  return styles2.overflowY !== "hidden" && !(styles2.overflowY === styles2.overflowX && styles2.overflowY === "visible");
};
var elementCouldBeHScrolled = function(node2) {
  var styles2 = window.getComputedStyle(node2);
  return styles2.overflowX !== "hidden" && !(styles2.overflowY === styles2.overflowX && styles2.overflowX === "visible");
};
var locationCouldBeScrolled = function(axis, node2) {
  var current = node2;
  do {
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a = getScrollVariables(axis, current), s = _a[1], d = _a[2];
      if (s > d) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== document.body);
  return false;
};
var getVScrollVariables = function(_a) {
  var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
  return [scrollTop, scrollHeight, clientHeight];
};
var getHScrollVariables = function(_a) {
  var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
  return [scrollLeft, scrollWidth, clientWidth];
};
var elementCouldBeScrolled = function(axis, node2) {
  return axis === "v" ? elementCouldBeVScrolled(node2) : elementCouldBeHScrolled(node2);
};
var getScrollVariables = function(axis, node2) {
  return axis === "v" ? getVScrollVariables(node2) : getHScrollVariables(node2);
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var delta2 = sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta2 > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a = getScrollVariables(axis, target), position2 = _a[0], scroll_1 = _a[1], capacity = _a[2];
    var elementScroll = scroll_1 - capacity - position2;
    if (position2 || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position2;
      }
    }
    target = target.parentNode;
  } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
  if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta2 > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta2 > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var options;
var nonPassive = passiveSupported ? {passive: false} : false;

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef3 = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x, y) {
  return x[0] === y[0] && x[1] === y[1];
};
var generateStyle = function(id2) {
  return "\n  .block-interactivity-" + id2 + " {pointer-events: none;}\n  .allow-interactivity-" + id2 + " {pointer-events: all;}\n";
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React81.useRef([]);
  var touchStartRef = React81.useRef([0, 0]);
  var activeAxis = React81.useRef();
  var id2 = React81.useState(idCounter++)[0];
  var Style2 = React81.useState(function() {
    return styleSingleton();
  })[0];
  var lastProps = React81.useRef(props);
  React81.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React81.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-" + id2);
      var allow_1 = [
        props.lockRef.current
      ].concat((props.shards || []).map(extractRef3)).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-" + id2);
      });
      return function() {
        document.body.classList.remove("block-interactivity-" + id2);
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-" + id2);
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React81.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React81.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta2 = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e) {
      return e.name === event.type && e.target === event.target && deltaCompare(e.delta, delta2);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      event.preventDefault();
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef3).filter(Boolean).filter(function(node2) {
        return node2.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        event.preventDefault();
      }
    }
  }, []);
  var shouldCancel = React81.useCallback(function(name, delta2, target, should) {
    var event = {name, delta: delta2, target, should};
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
        return e !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React81.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = React81.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React81.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React81.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return React81.createElement(React81.Fragment, null, inert ? React81.createElement(Style2, {styles: generateStyle(id2)}) : null, removeScrollBar ? React81.createElement(RemoveScrollBar, {gapMode: "margin"}) : null);
}

// node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React82.forwardRef(function(props, ref) {
  return React82.createElement(RemoveScroll, __assign3({}, props, {ref, sideCar: sidecar_default}));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default2 = ReactRemoveScroll;

// node_modules/@chakra-ui/modal/dist/esm/modal-transition.js
var React83 = __toModule(require_react());
function _objectWithoutPropertiesLoose35(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends57() {
  _extends57 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends57.apply(this, arguments);
}
var transitions = {
  slideInBottom: _extends57({}, slideFadeConfig, {
    custom: {
      offsetY: 16,
      reverse: true
    }
  }),
  slideInRight: _extends57({}, slideFadeConfig, {
    custom: {
      offsetX: 16,
      reverse: true
    }
  }),
  scale: _extends57({}, scaleFadeConfig, {
    custom: {
      initialScale: 0.95,
      reverse: true
    }
  }),
  none: {}
};
var Motion = chakra(motion.section);
var ModalTransition = React83.forwardRef((props, ref) => {
  var {
    preset
  } = props, rest = _objectWithoutPropertiesLoose35(props, ["preset"]);
  var motionProps = transitions[preset];
  return React83.createElement(Motion, _extends57({
    ref
  }, motionProps, rest));
});

// node_modules/aria-hidden/dist/es2015/index.js
var getDefaultParent = function(originalTarget) {
  if (typeof document === "undefined") {
    return null;
  }
  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
  return sampleTarget.ownerDocument.body;
};
var counterMap = new WeakMap();
var uncontrolledNodes = new WeakMap();
var markerMap = {};
var lockCount = 0;
var hideOthers = function(originalTarget, parentNode, markerName) {
  if (parentNode === void 0) {
    parentNode = getDefaultParent(originalTarget);
  }
  if (markerName === void 0) {
    markerName = "data-aria-hidden";
  }
  var targets = Array.isArray(originalTarget) ? originalTarget : [originalTarget];
  if (!markerMap[markerName]) {
    markerMap[markerName] = new WeakMap();
  }
  var markerCounter = markerMap[markerName];
  var hiddenNodes = [];
  var elementsToKeep = new Set();
  var keep = function(el) {
    if (!el || elementsToKeep.has(el)) {
      return;
    }
    elementsToKeep.add(el);
    keep(el.parentNode);
  };
  targets.forEach(keep);
  var deep = function(parent) {
    if (!parent || targets.indexOf(parent) >= 0) {
      return;
    }
    Array.prototype.forEach.call(parent.children, function(node2) {
      if (elementsToKeep.has(node2)) {
        deep(node2);
      } else {
        var attr = node2.getAttribute("aria-hidden");
        var alreadyHidden = attr !== null && attr !== "false";
        var counterValue = (counterMap.get(node2) || 0) + 1;
        var markerValue = (markerCounter.get(node2) || 0) + 1;
        counterMap.set(node2, counterValue);
        markerCounter.set(node2, markerValue);
        hiddenNodes.push(node2);
        if (counterValue === 1 && alreadyHidden) {
          uncontrolledNodes.set(node2, true);
        }
        if (markerValue === 1) {
          node2.setAttribute(markerName, "true");
        }
        if (!alreadyHidden) {
          node2.setAttribute("aria-hidden", "true");
        }
      }
    });
  };
  deep(parentNode);
  elementsToKeep.clear();
  lockCount++;
  return function() {
    hiddenNodes.forEach(function(node2) {
      var counterValue = counterMap.get(node2) - 1;
      var markerValue = markerCounter.get(node2) - 1;
      counterMap.set(node2, counterValue);
      markerCounter.set(node2, markerValue);
      if (!counterValue) {
        if (!uncontrolledNodes.has(node2)) {
          node2.removeAttribute("aria-hidden");
        }
        uncontrolledNodes.delete(node2);
      }
      if (!markerValue) {
        node2.removeAttribute(markerName);
      }
    });
    lockCount--;
    if (!lockCount) {
      counterMap = new WeakMap();
      counterMap = new WeakMap();
      uncontrolledNodes = new WeakMap();
      markerMap = {};
    }
  };
};

// node_modules/@chakra-ui/modal/dist/esm/use-modal.js
var import_react64 = __toModule(require_react());

// node_modules/@chakra-ui/modal/dist/esm/modal-manager.js
var import_react63 = __toModule(require_react());
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var ModalManager = class {
  constructor() {
    _defineProperty3(this, "modals", void 0);
    this.modals = [];
  }
  add(modal) {
    this.modals.push(modal);
  }
  remove(modal) {
    this.modals = this.modals.filter((_modal) => _modal !== modal);
  }
  isTopModal(modal) {
    var topmostModal = this.modals[this.modals.length - 1];
    return topmostModal === modal;
  }
};
var manager = new ModalManager();
function useModalManager(ref, isOpen) {
  (0, import_react63.useEffect)(() => {
    if (isOpen) {
      manager.add(ref);
    }
    return () => {
      manager.remove(ref);
    };
  }, [isOpen, ref]);
}

// node_modules/@chakra-ui/modal/dist/esm/use-modal.js
function _extends58() {
  _extends58 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends58.apply(this, arguments);
}
function useModal(props) {
  var {
    isOpen,
    onClose,
    id: id2,
    closeOnOverlayClick = true,
    closeOnEsc = true,
    useInert = true,
    onOverlayClick: onOverlayClickProp,
    onEsc
  } = props;
  var dialogRef = (0, import_react64.useRef)(null);
  var overlayRef = (0, import_react64.useRef)(null);
  var [dialogId, headerId, bodyId] = useIds(id2, "chakra-modal", "chakra-modal--header", "chakra-modal--body");
  useAriaHidden(dialogRef, isOpen && useInert);
  useModalManager(dialogRef, isOpen);
  var mouseDownTarget = (0, import_react64.useRef)(null);
  var onMouseDown = (0, import_react64.useCallback)((event) => {
    mouseDownTarget.current = event.target;
  }, []);
  var onKeyDown = (0, import_react64.useCallback)((event) => {
    if (event.key === "Escape") {
      event.stopPropagation();
      if (closeOnEsc) {
        onClose == null ? void 0 : onClose();
      }
      onEsc == null ? void 0 : onEsc();
    }
  }, [closeOnEsc, onClose, onEsc]);
  var [headerMounted, setHeaderMounted] = (0, import_react64.useState)(false);
  var [bodyMounted, setBodyMounted] = (0, import_react64.useState)(false);
  var getDialogProps = (0, import_react64.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends58({
      role: "dialog"
    }, props2, {
      ref: mergeRefs(ref, dialogRef),
      id: dialogId,
      tabIndex: -1,
      "aria-modal": true,
      "aria-labelledby": headerMounted ? headerId : void 0,
      "aria-describedby": bodyMounted ? bodyId : void 0,
      onClick: callAllHandlers(props2.onClick, (event) => event.stopPropagation())
    });
  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);
  var onOverlayClick = (0, import_react64.useCallback)((event) => {
    event.stopPropagation();
    if (mouseDownTarget.current !== event.target)
      return;
    if (!manager.isTopModal(dialogRef))
      return;
    if (closeOnOverlayClick) {
      onClose == null ? void 0 : onClose();
    }
    onOverlayClickProp == null ? void 0 : onOverlayClickProp();
  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);
  var getDialogContainerProps = (0, import_react64.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends58({}, props2, {
      ref: mergeRefs(ref, overlayRef),
      onClick: callAllHandlers(props2.onClick, onOverlayClick),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)
    });
  }, [onKeyDown, onMouseDown, onOverlayClick]);
  return {
    isOpen,
    onClose,
    headerId,
    bodyId,
    setBodyMounted,
    setHeaderMounted,
    dialogRef,
    overlayRef,
    getDialogProps,
    getDialogContainerProps
  };
}
function useAriaHidden(ref, shouldHide) {
  (0, import_react64.useEffect)(() => {
    if (!ref.current)
      return void 0;
    var undo = null;
    if (shouldHide && ref.current) {
      undo = hideOthers(ref.current);
    }
    return () => {
      if (shouldHide) {
        undo == null ? void 0 : undo();
      }
    };
  }, [shouldHide, ref]);
}

// node_modules/@chakra-ui/modal/dist/esm/modal.js
function _objectWithoutPropertiesLoose36(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends59() {
  _extends59 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends59.apply(this, arguments);
}
var [ModalContextProvider, useModalContext] = createContext({
  strict: true,
  name: "ModalContext",
  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
});
var Modal = (props) => {
  var {
    portalProps,
    children,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames
  } = props;
  var styles2 = useMultiStyleConfig("Modal", props);
  var modal = useModal(props);
  var context = _extends59({}, modal, {
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames
  });
  return React84.createElement(ModalContextProvider, {
    value: context
  }, React84.createElement(StylesProvider, {
    value: styles2
  }, React84.createElement(AnimatePresence, null, context.isOpen && React84.createElement(Portal, portalProps, children))));
};
Modal.defaultProps = {
  lockFocusAcrossFrames: true,
  returnFocusOnClose: true,
  scrollBehavior: "outside",
  trapFocus: true,
  autoFocus: true,
  blockScrollOnMount: true,
  allowPinchZoom: false,
  motionPreset: "scale"
};
if (__DEV__) {
  Modal.displayName = "Modal";
}
var MotionDiv2 = chakra(motion.div);
var ModalContent = forwardRef((props, ref) => {
  var {
    className,
    children,
    containerProps: rootProps
  } = props, rest = _objectWithoutPropertiesLoose36(props, ["className", "children", "containerProps"]);
  var {
    getDialogProps,
    getDialogContainerProps
  } = useModalContext();
  var dialogProps = getDialogProps(rest, ref);
  var containerProps = getDialogContainerProps(rootProps);
  var _className = cx("chakra-modal__content", className);
  var styles2 = useStyles();
  var dialogStyles = _extends59({
    display: "flex",
    flexDirection: "column",
    position: "relative",
    width: "100%",
    outline: 0
  }, styles2.dialog);
  var dialogContainerStyles = _extends59({
    display: "flex",
    width: "100vw",
    height: "100vh",
    "@supports(height: -webkit-fill-available)": {
      height: "-webkit-fill-available"
    },
    position: "fixed",
    left: 0,
    top: 0
  }, styles2.dialogContainer);
  var {
    motionPreset
  } = useModalContext();
  return React84.createElement(ModalFocusScope, null, React84.createElement(chakra.div, _extends59({}, containerProps, {
    className: "chakra-modal__content-container",
    __css: dialogContainerStyles
  }), React84.createElement(ModalTransition, _extends59({
    preset: motionPreset,
    className: _className
  }, dialogProps, {
    __css: dialogStyles
  }), children)));
});
if (__DEV__) {
  ModalContent.displayName = "ModalContent";
}
function ModalFocusScope(props) {
  var {
    autoFocus,
    trapFocus,
    dialogRef,
    initialFocusRef,
    blockScrollOnMount,
    allowPinchZoom,
    finalFocusRef,
    returnFocusOnClose,
    preserveScrollBarGap,
    lockFocusAcrossFrames
  } = useModalContext();
  var [isPresent2, safeToRemove] = usePresence();
  React84.useEffect(() => {
    if (!isPresent2 && safeToRemove) {
      setTimeout(safeToRemove);
    }
  }, [isPresent2, safeToRemove]);
  return React84.createElement(FocusLock2, {
    autoFocus,
    isDisabled: !trapFocus,
    initialFocusRef,
    finalFocusRef,
    restoreFocus: returnFocusOnClose,
    contentRef: dialogRef,
    lockFocusAcrossFrames
  }, React84.createElement(Combination_default2, {
    removeScrollBar: !preserveScrollBarGap,
    allowPinchZoom,
    enabled: blockScrollOnMount,
    forwardProps: true
  }, props.children));
}
var ModalOverlay = forwardRef((props, ref) => {
  var {
    className
  } = props, rest = _objectWithoutPropertiesLoose36(props, ["className", "transition"]);
  var _className = cx("chakra-modal__overlay", className);
  var styles2 = useStyles();
  var overlayStyle = _extends59({
    pos: "fixed",
    left: "0",
    top: "0",
    w: "100vw",
    h: "100vh"
  }, styles2.overlay);
  var {
    motionPreset
  } = useModalContext();
  var motionProps = motionPreset === "none" ? {} : fadeConfig;
  return React84.createElement(MotionDiv2, _extends59({}, motionProps, {
    __css: overlayStyle,
    ref,
    className: _className
  }, rest));
});
if (__DEV__) {
  ModalOverlay.displayName = "ModalOverlay";
}
var ModalHeader = forwardRef((props, ref) => {
  var {
    className
  } = props, rest = _objectWithoutPropertiesLoose36(props, ["className"]);
  var {
    headerId,
    setHeaderMounted
  } = useModalContext();
  React84.useEffect(() => {
    setHeaderMounted(true);
    return () => setHeaderMounted(false);
  }, [setHeaderMounted]);
  var _className = cx("chakra-modal__header", className);
  var styles2 = useStyles();
  var headerStyles = _extends59({
    flex: 0
  }, styles2.header);
  return React84.createElement(chakra.header, _extends59({
    ref,
    className: _className,
    id: headerId
  }, rest, {
    __css: headerStyles
  }));
});
if (__DEV__) {
  ModalHeader.displayName = "ModalHeader";
}
var ModalBody = forwardRef((props, ref) => {
  var {
    className
  } = props, rest = _objectWithoutPropertiesLoose36(props, ["className"]);
  var {
    bodyId,
    setBodyMounted
  } = useModalContext();
  React84.useEffect(() => {
    setBodyMounted(true);
    return () => setBodyMounted(false);
  }, [setBodyMounted]);
  var _className = cx("chakra-modal__body", className);
  var styles2 = useStyles();
  return React84.createElement(chakra.div, _extends59({
    ref,
    className: _className,
    id: bodyId
  }, rest, {
    __css: styles2.body
  }));
});
if (__DEV__) {
  ModalBody.displayName = "ModalBody";
}
var ModalFooter = forwardRef((props, ref) => {
  var {
    className
  } = props, rest = _objectWithoutPropertiesLoose36(props, ["className"]);
  var _className = cx("chakra-modal__footer", className);
  var styles2 = useStyles();
  var footerStyles = _extends59({
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end"
  }, styles2.footer);
  return React84.createElement(chakra.footer, _extends59({
    ref
  }, rest, {
    __css: footerStyles,
    className: _className
  }));
});
if (__DEV__) {
  ModalFooter.displayName = "ModalFooter";
}
var ModalCloseButton = forwardRef((props, ref) => {
  var {
    onClick,
    className
  } = props, rest = _objectWithoutPropertiesLoose36(props, ["onClick", "className"]);
  var {
    onClose
  } = useModalContext();
  var _className = cx("chakra-modal__close-btn", className);
  var styles2 = useStyles();
  return React84.createElement(CloseButton, _extends59({
    ref,
    __css: styles2.closeButton,
    className: _className,
    onClick: callAllHandlers(onClick, (event) => {
      event.stopPropagation();
      onClose();
    })
  }, rest));
});
if (__DEV__) {
  ModalCloseButton.displayName = "ModalCloseButton";
}

// node_modules/@chakra-ui/modal/dist/esm/alert-dialog.js
var React85 = __toModule(require_react());
function _extends60() {
  _extends60 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends60.apply(this, arguments);
}
function _objectWithoutPropertiesLoose37(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function AlertDialog(props) {
  var {
    leastDestructiveRef
  } = props, rest = _objectWithoutPropertiesLoose37(props, ["leastDestructiveRef"]);
  return React85.createElement(Modal, _extends60({}, rest, {
    initialFocusRef: leastDestructiveRef
  }));
}
var AlertDialogContent = forwardRef((props, ref) => React85.createElement(ModalContent, _extends60({
  ref,
  role: "alertdialog"
}, props)));

// node_modules/@chakra-ui/modal/dist/esm/drawer.js
var React86 = __toModule(require_react());
function _extends61() {
  _extends61 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends61.apply(this, arguments);
}
function _objectWithoutPropertiesLoose38(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [DrawerContextProvider, useDrawerContext] = createContext();
function Drawer(props) {
  var _theme$components;
  var {
    isOpen,
    onClose,
    placement = "right",
    children
  } = props, rest = _objectWithoutPropertiesLoose38(props, ["isOpen", "onClose", "placement", "children"]);
  var theme2 = useTheme();
  var drawerStyleConfig = (_theme$components = theme2.components) == null ? void 0 : _theme$components.Drawer;
  return React86.createElement(DrawerContextProvider, {
    value: {
      placement
    }
  }, React86.createElement(Modal, _extends61({
    isOpen,
    onClose,
    styleConfig: drawerStyleConfig
  }, rest), children));
}
var StyleSlide = chakra(Slide);
var DrawerContent = forwardRef((props, ref) => {
  var {
    className,
    children
  } = props, rest = _objectWithoutPropertiesLoose38(props, ["className", "children"]);
  var {
    getDialogProps,
    getDialogContainerProps,
    isOpen
  } = useModalContext();
  var dialogProps = getDialogProps(rest, ref);
  var containerProps = getDialogContainerProps();
  var _className = cx("chakra-modal__content", className);
  var styles2 = useStyles();
  var dialogStyles = _extends61({
    display: "flex",
    flexDirection: "column",
    position: "relative",
    width: "100%",
    outline: 0
  }, styles2.dialog);
  var dialogContainerStyles = _extends61({
    display: "flex",
    width: "100vw",
    height: "100vh",
    position: "fixed",
    left: 0,
    top: 0
  }, styles2.dialogContainer);
  var {
    placement
  } = useDrawerContext();
  return React86.createElement(chakra.div, _extends61({}, containerProps, {
    className: "chakra-modal__content-container",
    __css: dialogContainerStyles
  }), React86.createElement(ModalFocusScope, null, React86.createElement(StyleSlide, _extends61({
    direction: placement,
    in: isOpen,
    className: _className
  }, dialogProps, {
    __css: dialogStyles
  }), children)));
});
if (__DEV__) {
  DrawerContent.displayName = "DrawerContent";
}

// node_modules/@chakra-ui/number-input/dist/esm/number-input.js
var React89 = __toModule(require_react());

// node_modules/@chakra-ui/number-input/dist/esm/icons.js
var React87 = __toModule(require_react());
function _extends62() {
  _extends62 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends62.apply(this, arguments);
}
var TriangleDownIcon = (props) => React87.createElement(Icon, _extends62({
  viewBox: "0 0 24 24"
}, props), React87.createElement("path", {
  fill: "currentColor",
  d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
}));
var TriangleUpIcon = (props) => React87.createElement(Icon, _extends62({
  viewBox: "0 0 24 24"
}, props), React87.createElement("path", {
  fill: "currentColor",
  d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
}));

// node_modules/@chakra-ui/number-input/dist/esm/use-number-input.js
var React88 = __toModule(require_react());

// node_modules/@chakra-ui/number-input/dist/esm/use-spinner.js
var import_react65 = __toModule(require_react());
var CONTINUOUS_CHANGE_INTERVAL = 50;
var CONTINUOUS_CHANGE_DELAY = 300;
function useSpinner(increment, decrement) {
  var [isSpinning, setIsSpinning] = (0, import_react65.useState)(false);
  var [action, setAction] = (0, import_react65.useState)(null);
  var [runOnce, setRunOnce] = (0, import_react65.useState)(true);
  var timeoutRef = (0, import_react65.useRef)(null);
  var removeTimeout = () => clearTimeout(timeoutRef.current);
  useInterval(() => {
    if (action === "increment") {
      increment();
    }
    if (action === "decrement") {
      decrement();
    }
  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null);
  var up = (0, import_react65.useCallback)(() => {
    if (runOnce) {
      increment();
    }
    timeoutRef.current = setTimeout(() => {
      setRunOnce(false);
      setIsSpinning(true);
      setAction("increment");
    }, CONTINUOUS_CHANGE_DELAY);
  }, [increment, runOnce]);
  var down = (0, import_react65.useCallback)(() => {
    if (runOnce) {
      decrement();
    }
    timeoutRef.current = setTimeout(() => {
      setRunOnce(false);
      setIsSpinning(true);
      setAction("decrement");
    }, CONTINUOUS_CHANGE_DELAY);
  }, [decrement, runOnce]);
  var stop2 = (0, import_react65.useCallback)(() => {
    setRunOnce(true);
    setIsSpinning(false);
    removeTimeout();
  }, []);
  useUnmountEffect(removeTimeout);
  return {
    up,
    down,
    stop: stop2
  };
}

// node_modules/@chakra-ui/number-input/dist/esm/utils.js
var FLOATING_POINT_REGEX = /^[Ee0-9+\-.]$/;
function isFloatingPointNumericCharacter(character) {
  return FLOATING_POINT_REGEX.test(character);
}
function isValidNumericKeyboardEvent(event) {
  if (event.key == null)
    return true;
  var isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
  if (isModifierKey) {
    return true;
  }
  var isSingleCharacterKey = event.key.length === 1;
  if (!isSingleCharacterKey) {
    return true;
  }
  return isFloatingPointNumericCharacter(event.key);
}

// node_modules/@chakra-ui/number-input/dist/esm/use-number-input.js
function _extends63() {
  _extends63 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends63.apply(this, arguments);
}
function _objectWithoutPropertiesLoose39(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var sanitize2 = (value) => value.split("").filter(isFloatingPointNumericCharacter).join("");
function useNumberInput(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    focusInputOnChange = true,
    clampValueOnBlur = true,
    keepWithinRange = true,
    min = minSafeInteger,
    max = maxSafeInteger,
    step: stepProp = 1,
    isReadOnly,
    isDisabled,
    isRequired,
    getAriaValueText,
    isInvalid,
    pattern = "[0-9]*(.[0-9]+)?",
    inputMode = "decimal",
    allowMouseWheel,
    id: id2,
    name,
    "aria-describedby": ariaDescBy,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    onFocus: onFocus3,
    onBlur: onBlur3
  } = props, htmlProps = _objectWithoutPropertiesLoose39(props, ["focusInputOnChange", "clampValueOnBlur", "keepWithinRange", "min", "max", "step", "isReadOnly", "isDisabled", "isRequired", "getAriaValueText", "isInvalid", "pattern", "inputMode", "allowMouseWheel", "id", "onChange", "precision", "name", "aria-describedby", "aria-label", "aria-labelledby", "onFocus", "onBlur"]);
  var onFocusProp = useCallbackRef(onFocus3);
  var onBlurProp = useCallbackRef(onBlur3);
  var getAriaValueTextProp = useCallbackRef(getAriaValueText);
  var counter2 = useCounter(props);
  var {
    update: updateFn,
    increment: incrementFn,
    decrement: decrementFn
  } = counter2;
  var [isFocused, setFocused] = useBoolean();
  var inputRef = React88.useRef(null);
  useSafeLayoutEffect(() => {
    if (!inputRef.current)
      return;
    var notInSync = inputRef.current.value != counter2.value;
    if (notInSync) {
      counter2.setValue(sanitize2(inputRef.current.value));
    }
  }, []);
  var isInteractive = !(isReadOnly || isDisabled);
  var increment = React88.useCallback(function(step) {
    if (step === void 0) {
      step = stepProp;
    }
    if (isInteractive) {
      incrementFn(step);
    }
  }, [incrementFn, isInteractive, stepProp]);
  var decrement = React88.useCallback(function(step) {
    if (step === void 0) {
      step = stepProp;
    }
    if (isInteractive) {
      decrementFn(step);
    }
  }, [decrementFn, isInteractive, stepProp]);
  var spinner = useSpinner(increment, decrement);
  var onChange = React88.useCallback((event) => {
    updateFn(sanitize2(event.target.value));
  }, [updateFn]);
  var onKeyDown = React88.useCallback((event) => {
    if (!isValidNumericKeyboardEvent(event)) {
      event.preventDefault();
    }
    var stepFactor = getStepFactor(event) * stepProp;
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      ArrowUp: () => increment(stepFactor),
      ArrowDown: () => decrement(stepFactor),
      Home: () => updateFn(min),
      End: () => updateFn(max)
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [updateFn, decrement, increment, max, min, stepProp]);
  var getStepFactor = (event) => {
    var ratio = 1;
    if (event.metaKey || event.ctrlKey) {
      ratio = 0.1;
    }
    if (event.shiftKey) {
      ratio = 10;
    }
    return ratio;
  };
  var ariaValueText = React88.useMemo(() => {
    var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter2.value);
    if (!isNull(text)) {
      return text;
    }
    var defaultText = counter2.value.toString();
    return !defaultText ? void 0 : defaultText;
  }, [counter2.value, getAriaValueTextProp]);
  var validateAndClamp = React88.useCallback(() => {
    var next = counter2.value;
    if (next === "")
      return;
    if (counter2.valueAsNumber < min) {
      next = min;
    }
    if (counter2.valueAsNumber > max) {
      next = max;
    }
    counter2.cast(next);
  }, [counter2, max, min]);
  var onInputBlur = React88.useCallback(() => {
    setFocused.off();
    if (clampValueOnBlur) {
      validateAndClamp();
    }
  }, [clampValueOnBlur, setFocused, validateAndClamp]);
  var focusInput = React88.useCallback(() => {
    if (focusInputOnChange) {
      focus(inputRef.current, {
        nextTick: true
      });
    }
  }, [focusInputOnChange]);
  var spinUp = React88.useCallback((event) => {
    event.preventDefault();
    spinner.up();
    focusInput();
  }, [focusInput, spinner]);
  var spinDown = React88.useCallback((event) => {
    event.preventDefault();
    spinner.down();
    focusInput();
  }, [focusInput, spinner]);
  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? "onTouchStart" : "onMouseDown";
  useEventListener("wheel", (event) => {
    var isInputFocused = document.activeElement === inputRef.current;
    if (!allowMouseWheel || !isInputFocused)
      return;
    event.preventDefault();
    var stepFactor = getStepFactor(event) * stepProp;
    var direction2 = Math.sign(event.deltaY);
    if (direction2 === -1) {
      increment(stepFactor);
    } else if (direction2 === 1) {
      decrement(stepFactor);
    }
  }, inputRef.current);
  var getIncrementButtonProps = React88.useCallback(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var disabled = isDisabled || keepWithinRange && counter2.isAtMax;
    return _extends63({}, props2, {
      ref,
      role: "button",
      tabIndex: -1,
      [pointerDown]: callAllHandlers(props2[pointerDown], spinUp),
      onMouseUp: callAllHandlers(props2.onMouseUp, spinner.stop),
      onMouseLeave: callAllHandlers(props2.onMouseUp, spinner.stop),
      onTouchEnd: callAllHandlers(props2.onTouchEnd, spinner.stop),
      disabled,
      "aria-disabled": ariaAttr(disabled)
    });
  }, [pointerDown, counter2.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);
  var getDecrementButtonProps = React88.useCallback(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var disabled = isDisabled || keepWithinRange && counter2.isAtMin;
    return _extends63({}, props2, {
      ref,
      role: "button",
      tabIndex: -1,
      [pointerDown]: callAllHandlers(props2[pointerDown], spinDown),
      onMouseLeave: callAllHandlers(props2.onMouseLeave, spinner.stop),
      onMouseUp: callAllHandlers(props2.onMouseUp, spinner.stop),
      onTouchEnd: callAllHandlers(props2.onTouchEnd, spinner.stop),
      disabled,
      "aria-disabled": ariaAttr(disabled)
    });
  }, [pointerDown, counter2.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);
  var getInputProps = React88.useCallback(function(props2, ref) {
    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends63({
      name,
      inputMode,
      type: "text",
      pattern,
      "aria-labelledby": ariaLabelledBy,
      "aria-label": ariaLabel,
      "aria-describedby": ariaDescBy,
      id: id2,
      disabled: isDisabled
    }, props2, {
      readOnly: (_props$readOnly = props2.readOnly) != null ? _props$readOnly : isReadOnly,
      "aria-readonly": (_props$readOnly2 = props2.readOnly) != null ? _props$readOnly2 : isReadOnly,
      "aria-required": (_props$required = props2.required) != null ? _props$required : isRequired,
      required: (_props$required2 = props2.required) != null ? _props$required2 : isRequired,
      ref: mergeRefs(inputRef, ref),
      value: counter2.value,
      role: "spinbutton",
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": Number.isNaN(counter2.valueAsNumber) ? void 0 : counter2.valueAsNumber,
      "aria-invalid": ariaAttr(isInvalid != null ? isInvalid : counter2.isOutOfRange),
      "aria-valuetext": ariaValueText,
      autoComplete: "off",
      autoCorrect: "off",
      onChange: callAllHandlers(props2.onChange, onChange),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props2.onFocus, onFocusProp, () => scheduleMicrotask(setFocused.on)),
      onBlur: callAllHandlers(props2.onBlur, onBlurProp, onInputBlur)
    });
  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, ariaDescBy, id2, isDisabled, isRequired, isReadOnly, isInvalid, counter2.value, counter2.valueAsNumber, counter2.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, onFocusProp, setFocused.on, onBlurProp, onInputBlur]);
  return {
    value: counter2.value,
    valueAsNumber: counter2.valueAsNumber,
    isFocused,
    isDisabled,
    isReadOnly,
    getIncrementButtonProps,
    getDecrementButtonProps,
    getInputProps,
    htmlProps
  };
}

// node_modules/@chakra-ui/number-input/dist/esm/number-input.js
function _extends64() {
  _extends64 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends64.apply(this, arguments);
}
function _objectWithoutPropertiesLoose40(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [NumberInputProvider, useNumberInputContext] = createContext({
  name: "NumberInputContext",
  errorMessage: "useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />"
});
var NumberInput = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("NumberInput", props);
  var ownProps = omitThemingProps(props);
  var controlProps = useFormControlProps(ownProps);
  var _useNumberInput = useNumberInput(controlProps), {
    htmlProps
  } = _useNumberInput, context = _objectWithoutPropertiesLoose40(_useNumberInput, ["htmlProps"]);
  var ctx = React89.useMemo(() => context, [context]);
  return React89.createElement(NumberInputProvider, {
    value: ctx
  }, React89.createElement(StylesProvider, {
    value: styles2
  }, React89.createElement(chakra.div, _extends64({}, htmlProps, {
    ref,
    className: cx("chakra-numberinput", props.className),
    __css: _extends64({
      position: "relative",
      zIndex: 0
    }, styles2.root)
  }))));
});
if (__DEV__) {
  NumberInput.displayName = "NumberInput";
}
var NumberInputStepper = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React89.createElement(chakra.div, _extends64({
    "aria-hidden": true,
    ref
  }, props, {
    __css: _extends64({
      display: "flex",
      flexDirection: "column",
      position: "absolute",
      top: "0",
      insetEnd: "0px",
      margin: "1px",
      height: "calc(100% - 2px)",
      zIndex: 1
    }, styles2.stepperGroup)
  }));
});
if (__DEV__) {
  NumberInputStepper.displayName = "NumberInputStepper";
}
var NumberInputField = forwardRef((props, ref) => {
  var {
    getInputProps
  } = useNumberInputContext();
  var input = getInputProps(props, ref);
  var styles2 = useStyles();
  return React89.createElement(chakra.input, _extends64({}, input, {
    className: cx("chakra-numberinput__field", props.className),
    __css: _extends64({
      width: "100%"
    }, styles2.field)
  }));
});
if (__DEV__) {
  NumberInputField.displayName = "NumberInputField";
}
var StyledStepper = chakra("div", {
  baseStyle: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    transition: "all 0.3s",
    userSelect: "none",
    cursor: "pointer",
    lineHeight: "normal"
  }
});
var NumberDecrementStepper = forwardRef((props, ref) => {
  var _props$children;
  var styles2 = useStyles();
  var {
    getDecrementButtonProps
  } = useNumberInputContext();
  var decrement = getDecrementButtonProps(props, ref);
  return React89.createElement(StyledStepper, _extends64({}, decrement, {
    __css: styles2.stepper
  }), (_props$children = props.children) != null ? _props$children : React89.createElement(TriangleDownIcon, null));
});
if (__DEV__) {
  NumberDecrementStepper.displayName = "NumberDecrementStepper";
}
var NumberIncrementStepper = forwardRef((props, ref) => {
  var _props$children2;
  var {
    getIncrementButtonProps
  } = useNumberInputContext();
  var increment = getIncrementButtonProps(props, ref);
  var styles2 = useStyles();
  return React89.createElement(StyledStepper, _extends64({}, increment, {
    __css: styles2.stepper
  }), (_props$children2 = props.children) != null ? _props$children2 : React89.createElement(TriangleUpIcon, null));
});
if (__DEV__) {
  NumberIncrementStepper.displayName = "NumberIncrementStepper";
}

// node_modules/@chakra-ui/pin-input/dist/esm/pin-input.js
var React91 = __toModule(require_react());

// node_modules/@chakra-ui/pin-input/dist/esm/use-pin-input.js
var React90 = __toModule(require_react());
function _extends65() {
  _extends65 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends65.apply(this, arguments);
}
function _objectWithoutPropertiesLoose41(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant] = createDescendantContext();
var [PinInputProvider, usePinInputContext] = createContext({
  name: "PinInputContext",
  errorMessage: "usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`"
});
var toArray2 = (value) => value == null ? void 0 : value.split("");
function validate(value, type) {
  var NUMERIC_REGEX = /^[0-9]+$/;
  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;
  var regex = type === "alphanumeric" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;
  return regex.test(value);
}
function usePinInput(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    autoFocus,
    value,
    defaultValue,
    onChange: _onChange,
    onComplete,
    placeholder = "\u25CB",
    manageFocus = true,
    otp = false,
    id: idProp,
    isDisabled,
    isInvalid,
    type = "number",
    mask
  } = props;
  var uuid = useId();
  var id2 = idProp != null ? idProp : "pin-input-" + uuid;
  var descendants = usePinInputDescendants();
  var [moveFocus, setMoveFocus] = React90.useState(true);
  var [focusedIndex, setFocusedIndex] = React90.useState(-1);
  var [values, setValues2] = useControllableState({
    defaultValue: toArray2(defaultValue) || [],
    value: toArray2(value),
    onChange: (values2) => _onChange == null ? void 0 : _onChange(values2.join(""))
  });
  React90.useEffect(() => {
    if (autoFocus) {
      var first = descendants.first();
      if (first)
        focus(first.node, {
          nextTick: true
        });
    }
  }, [descendants]);
  var focusNext = React90.useCallback((index2) => {
    if (!moveFocus || !manageFocus)
      return;
    var next = descendants.next(index2, false);
    if (next)
      focus(next.node, {
        nextTick: true
      });
  }, [descendants, moveFocus, manageFocus]);
  var setValue = React90.useCallback((value2, index2) => {
    var nextValues = [...values];
    nextValues[index2] = value2;
    setValues2(nextValues);
    var isComplete = value2 !== "" && nextValues.length === descendants.count() && nextValues.every((inputValue) => inputValue != null && inputValue !== "");
    if (isComplete) {
      onComplete == null ? void 0 : onComplete(nextValues.join(""));
    } else {
      focusNext(index2);
    }
  }, [values, setValues2, focusNext, onComplete, descendants]);
  var clear = React90.useCallback(() => {
    var values2 = Array(descendants.count()).fill("");
    setValues2(values2);
    var first = descendants.first();
    if (first)
      focus(first.node);
  }, [descendants, setValues2]);
  var getNextValue = React90.useCallback((value2, eventValue) => {
    var nextValue = eventValue;
    if ((value2 == null ? void 0 : value2.length) > 0) {
      if (value2[0] === eventValue.charAt(0)) {
        nextValue = eventValue.charAt(1);
      } else if (value2[0] === eventValue.charAt(1)) {
        nextValue = eventValue.charAt(0);
      }
    }
    return nextValue;
  }, []);
  var getInputProps = React90.useCallback((props2) => {
    var {
      index: index2
    } = props2, rest = _objectWithoutPropertiesLoose41(props2, ["index"]);
    var onChange = (event) => {
      var eventValue = event.target.value;
      var currentValue = values[index2];
      var nextValue = getNextValue(currentValue, eventValue);
      if (nextValue === "") {
        setValue("", index2);
        return;
      }
      if (eventValue.length > 2) {
        if (validate(eventValue, type)) {
          var _nextValue = eventValue.split("").filter((_, index3) => index3 < descendants.count());
          setValues2(_nextValue);
          if (_nextValue.length === descendants.count()) {
            onComplete == null ? void 0 : onComplete(_nextValue.join(""));
          }
        }
      } else {
        if (validate(nextValue, type)) {
          setValue(nextValue, index2);
        }
        setMoveFocus(true);
      }
    };
    var onKeyDown = (event) => {
      if (event.key === "Backspace" && manageFocus) {
        if (event.target.value === "") {
          var prevInput = descendants.prev(index2, false);
          if (prevInput) {
            setValue("", index2 - 1);
            focus(prevInput.node);
            setMoveFocus(true);
          }
        } else {
          setMoveFocus(false);
        }
      }
    };
    var onFocus3 = () => {
      setFocusedIndex(index2);
    };
    var onBlur3 = () => {
      setFocusedIndex(-1);
    };
    var hasFocus = focusedIndex === index2;
    var inputType = type === "number" ? "tel" : "text";
    return _extends65({
      "aria-label": "Please enter your pin code",
      inputMode: type === "number" ? "numeric" : "text",
      type: mask ? "password" : inputType
    }, rest, {
      id: id2 + "-" + index2,
      disabled: isDisabled,
      "aria-invalid": ariaAttr(isInvalid),
      onChange: callAllHandlers(rest.onChange, onChange),
      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(rest.onFocus, onFocus3),
      onBlur: callAllHandlers(rest.onBlur, onBlur3),
      value: values[index2] || "",
      autoComplete: otp ? "one-time-code" : "off",
      placeholder: hasFocus ? "" : placeholder
    });
  }, [descendants, focusedIndex, getNextValue, id2, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues2, type, values]);
  return {
    getInputProps,
    id: id2,
    descendants,
    values,
    setValue,
    setValues: setValues2,
    clear
  };
}
function usePinInputField(props, ref) {
  if (props === void 0) {
    props = {};
  }
  if (ref === void 0) {
    ref = null;
  }
  var {
    getInputProps
  } = usePinInputContext();
  var {
    index: index2,
    register
  } = usePinInputDescendant();
  return getInputProps(_extends65({}, props, {
    ref: mergeRefs(register, ref),
    index: index2
  }));
}

// node_modules/@chakra-ui/pin-input/dist/esm/pin-input.js
function _extends66() {
  _extends66 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends66.apply(this, arguments);
}
function _objectWithoutPropertiesLoose42(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var PinInput = (props) => {
  var styles2 = useStyleConfig("PinInput", props);
  var _omitThemingProps = omitThemingProps(props), {
    children
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose42(_omitThemingProps, ["children"]);
  var _usePinInput = usePinInput(rest), {
    descendants
  } = _usePinInput, context = _objectWithoutPropertiesLoose42(_usePinInput, ["descendants"]);
  var clones = getValidChildren(children).map((child) => React91.cloneElement(child, {
    __css: styles2
  }));
  return React91.createElement(PinInputDescendantsProvider, {
    value: descendants
  }, React91.createElement(PinInputProvider, {
    value: context
  }, clones));
};
if (__DEV__) {
  PinInput.displayName = "PinInput";
}
var PinInputField = forwardRef((props, ref) => {
  var inputProps = usePinInputField(props, ref);
  return React91.createElement(chakra.input, _extends66({}, inputProps, {
    className: cx("chakra-pin-input", props.className)
  }));
});
if (__DEV__) {
  PinInputField.displayName = "PinInputField";
}

// node_modules/@chakra-ui/popover/dist/esm/popover.js
var React93 = __toModule(require_react());

// node_modules/@chakra-ui/popover/dist/esm/popover-context.js
var [PopoverProvider, usePopoverContext] = createContext({
  name: "PopoverContext",
  errorMessage: "usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`"
});

// node_modules/@chakra-ui/popover/dist/esm/popover-transition.js
var import_react66 = __toModule(require_react());
function _extends67() {
  _extends67 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends67.apply(this, arguments);
}
var mergeVariants = (variants18) => {
  if (!variants18)
    return;
  return (0, import_lodash.default)(variants18, {
    enter: {
      visibility: "visible"
    },
    exit: {
      transitionEnd: {
        visibility: "hidden"
      }
    }
  });
};
var scaleFade = {
  exit: {
    opacity: 0,
    scale: 0.95,
    transition: {
      duration: 0.1,
      ease: [0.4, 0, 1, 1]
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      duration: 0.15,
      ease: [0, 0, 0.2, 1]
    }
  }
};
var Section = motion(chakra.section);
var PopoverTransition = import_react66.default.forwardRef((props, ref) => {
  var {
    isOpen
  } = usePopoverContext();
  return import_react66.default.createElement(Section, _extends67({
    ref,
    variants: mergeVariants(props.variants)
  }, props, {
    initial: false,
    animate: isOpen ? "enter" : "exit"
  }));
});
PopoverTransition.defaultProps = {
  variants: scaleFade
};

// node_modules/@chakra-ui/popover/dist/esm/use-popover.js
var import_react67 = __toModule(require_react());
function _extends68() {
  _extends68 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends68.apply(this, arguments);
}
function _objectWithoutPropertiesLoose43(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var TRIGGER = {
  click: "click",
  hover: "hover"
};
function usePopover(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    closeOnBlur = true,
    closeOnEsc = true,
    initialFocusRef,
    id: id2,
    returnFocusOnClose = true,
    autoFocus = true,
    arrowSize,
    arrowShadowColor,
    trigger = TRIGGER.click,
    openDelay = 200,
    closeDelay = 200,
    isLazy,
    lazyBehavior = "unmount"
  } = props, popperProps = _objectWithoutPropertiesLoose43(props, ["closeOnBlur", "closeOnEsc", "initialFocusRef", "id", "returnFocusOnClose", "autoFocus", "arrowSize", "arrowShadowColor", "trigger", "openDelay", "closeDelay", "isLazy", "lazyBehavior"]);
  var {
    isOpen,
    onClose,
    onOpen,
    onToggle
  } = useDisclosure(props);
  var triggerRef = (0, import_react67.useRef)(null);
  var popoverRef = (0, import_react67.useRef)(null);
  var isHoveringRef = (0, import_react67.useRef)(false);
  var hasBeenOpened = (0, import_react67.useRef)(false);
  if (isOpen) {
    hasBeenOpened.current = true;
  }
  var [hasHeader, setHasHeader] = (0, import_react67.useState)(false);
  var [hasBody, setHasBody] = (0, import_react67.useState)(false);
  var [triggerId, popoverId, headerId, bodyId] = useIds(id2, "popover-trigger", "popover-content", "popover-header", "popover-body");
  var {
    referenceRef,
    getArrowProps,
    getPopperProps,
    getArrowInnerProps,
    forceUpdate
  } = usePopper(popperProps);
  useFocusOnPointerDown({
    enabled: isOpen,
    ref: triggerRef
  });
  useFocusOnHide(popoverRef, {
    focusRef: triggerRef,
    visible: isOpen,
    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click
  });
  useFocusOnShow(popoverRef, {
    focusRef: initialFocusRef,
    visible: isOpen,
    shouldFocus: autoFocus && trigger === TRIGGER.click
  });
  var shouldRenderChildren = determineLazyBehavior({
    hasBeenSelected: hasBeenOpened.current,
    isLazy,
    lazyBehavior,
    isSelected: isOpen
  });
  var getPopoverProps = (0, import_react67.useCallback)(function(props2, _ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (_ref2 === void 0) {
      _ref2 = null;
    }
    var popoverProps = _extends68({}, props2, {
      style: _extends68({}, props2.style, {
        transformOrigin: cssVars.transformOrigin.varRef
      }),
      ref: mergeRefs(popoverRef, _ref2),
      children: shouldRenderChildren ? props2.children : null,
      id: popoverId,
      tabIndex: -1,
      role: "dialog",
      onKeyDown: callAllHandlers(props2.onKeyDown, (event) => {
        if (closeOnEsc && event.key === "Escape") {
          onClose();
        }
      }),
      onBlur: callAllHandlers(props2.onBlur, (event) => {
        var relatedTarget = getRelatedTarget(event);
        var targetIsPopover = contains(popoverRef.current, relatedTarget);
        var targetIsTrigger = contains(triggerRef.current, relatedTarget);
        var isValidBlur = !targetIsPopover && !targetIsTrigger;
        if (isOpen && closeOnBlur && isValidBlur) {
          onClose();
        }
      }),
      "aria-labelledby": hasHeader ? headerId : void 0,
      "aria-describedby": hasBody ? bodyId : void 0
    });
    if (trigger === TRIGGER.hover) {
      popoverProps.role = "tooltip";
      popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {
        isHoveringRef.current = true;
      });
      popoverProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, () => {
        isHoveringRef.current = false;
        setTimeout(onClose, closeDelay);
      });
    }
    return popoverProps;
  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay]);
  var getPopoverPositionerProps = (0, import_react67.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return getPopperProps(_extends68({}, props2, {
      style: _extends68({
        [cssVars.arrowSize.var]: arrowSize ? px(arrowSize) : void 0,
        [cssVars.arrowShadowColor.var]: arrowShadowColor,
        visibility: isOpen ? "visible" : "hidden"
      }, props2.style)
    }), forwardedRef);
  }, [arrowShadowColor, arrowSize, isOpen, getPopperProps]);
  var openTimeout = (0, import_react67.useRef)();
  var closeTimeout = (0, import_react67.useRef)();
  var getTriggerProps = (0, import_react67.useCallback)(function(props2, _ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (_ref2 === void 0) {
      _ref2 = null;
    }
    var triggerProps = _extends68({}, props2, {
      ref: mergeRefs(triggerRef, _ref2, referenceRef),
      id: triggerId,
      "aria-haspopup": "dialog",
      "aria-expanded": isOpen,
      "aria-controls": popoverId
    });
    if (trigger === TRIGGER.click) {
      triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);
    }
    if (trigger === TRIGGER.hover) {
      triggerProps.onFocus = callAllHandlers(props2.onFocus, onOpen);
      triggerProps.onBlur = callAllHandlers(props2.onBlur, onClose);
      triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, (event) => {
        if (event.key === "Escape") {
          onClose();
        }
      });
      triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {
        isHoveringRef.current = true;
        openTimeout.current = window.setTimeout(onOpen, openDelay);
      });
      triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, () => {
        isHoveringRef.current = false;
        if (openTimeout.current) {
          clearTimeout(openTimeout.current);
          openTimeout.current = void 0;
        }
        closeTimeout.current = window.setTimeout(() => {
          if (isHoveringRef.current === false) {
            onClose();
          }
        }, closeDelay);
      });
    }
    return triggerProps;
  }, [triggerId, isOpen, popoverId, trigger, referenceRef, onToggle, onOpen, onClose, openDelay, closeDelay]);
  (0, import_react67.useEffect)(() => {
    return () => {
      if (openTimeout.current) {
        clearTimeout(openTimeout.current);
      }
      if (closeTimeout.current) {
        clearTimeout(closeTimeout.current);
      }
    };
  }, []);
  var getHeaderProps = (0, import_react67.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends68({}, props2, {
      id: headerId,
      ref: mergeRefs(ref, (node2) => {
        setHasHeader(!!node2);
      })
    });
  }, [headerId]);
  var getBodyProps = (0, import_react67.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends68({}, props2, {
      id: bodyId,
      ref: mergeRefs(ref, (node2) => {
        setHasBody(!!node2);
      })
    });
  }, [bodyId]);
  return {
    forceUpdate,
    isOpen,
    onClose,
    getArrowProps,
    getArrowInnerProps,
    getPopoverPositionerProps,
    getPopoverProps,
    getTriggerProps,
    getHeaderProps,
    getBodyProps
  };
}

// node_modules/@chakra-ui/popover/dist/esm/popover.js
function _extends69() {
  _extends69 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends69.apply(this, arguments);
}
function _objectWithoutPropertiesLoose44(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Popover = (props) => {
  var styles2 = useMultiStyleConfig("Popover", props);
  var _omitThemingProps = omitThemingProps(props), {
    children
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose44(_omitThemingProps, ["children"]);
  var context = usePopover(rest);
  return React93.createElement(PopoverProvider, {
    value: context
  }, React93.createElement(StylesProvider, {
    value: styles2
  }, runIfFn(children, {
    isOpen: context.isOpen,
    onClose: context.onClose,
    forceUpdate: context.forceUpdate
  })));
};
if (__DEV__) {
  Popover.displayName = "Popover";
}
var PopoverTrigger = (props) => {
  var child = React93.Children.only(props.children);
  var {
    getTriggerProps
  } = usePopoverContext();
  return React93.cloneElement(child, getTriggerProps(child.props, child.ref));
};
if (__DEV__) {
  PopoverTrigger.displayName = "PopoverTrigger";
}
var PopoverContent = forwardRef((props, ref) => {
  var {
    rootProps
  } = props, contentProps = _objectWithoutPropertiesLoose44(props, ["rootProps"]);
  var {
    getPopoverProps,
    getPopoverPositionerProps
  } = usePopoverContext();
  var styles2 = useStyles();
  var contentStyles = _extends69({
    position: "relative",
    display: "flex",
    flexDirection: "column"
  }, styles2.content);
  return React93.createElement(chakra.div, _extends69({}, getPopoverPositionerProps(rootProps), {
    __css: styles2.popper,
    className: "chakra-popover__popper"
  }), React93.createElement(PopoverTransition, _extends69({}, getPopoverProps(contentProps, ref), {
    className: cx("chakra-popover__content", props.className),
    __css: contentStyles
  })));
});
if (__DEV__) {
  PopoverContent.displayName = "PopoverContent";
}
var PopoverHeader = forwardRef((props, ref) => {
  var {
    getHeaderProps
  } = usePopoverContext();
  var styles2 = useStyles();
  return React93.createElement(chakra.header, _extends69({}, getHeaderProps(props, ref), {
    className: cx("chakra-popover__header", props.className),
    __css: styles2.header
  }));
});
if (__DEV__) {
  PopoverHeader.displayName = "PopoverHeader";
}
var PopoverBody = forwardRef((props, ref) => {
  var {
    getBodyProps
  } = usePopoverContext();
  var styles2 = useStyles();
  return React93.createElement(chakra.div, _extends69({}, getBodyProps(props, ref), {
    className: cx("chakra-popover__body", props.className),
    __css: styles2.body
  }));
});
if (__DEV__) {
  PopoverBody.displayName = "PopoverBody";
}
var PopoverFooter = (props) => {
  var styles2 = useStyles();
  return React93.createElement(chakra.footer, _extends69({}, props, {
    className: cx("chakra-popover__footer", props.className),
    __css: styles2.footer
  }));
};
if (__DEV__) {
  PopoverFooter.displayName = "PopoverFooter";
}
var PopoverCloseButton = (props) => {
  var {
    onClose
  } = usePopoverContext();
  return React93.createElement(CloseButton, _extends69({
    size: "sm",
    onClick: onClose,
    position: "absolute",
    borderRadius: "md",
    top: "0.25rem",
    insetEnd: "0.5rem",
    padding: "0.5rem"
  }, props));
};
if (__DEV__) {
  PopoverCloseButton.displayName = "PopoverCloseButton";
}
var PopoverArrow = (props) => {
  var _ref2;
  var {
    bg,
    bgColor,
    backgroundColor
  } = props;
  var {
    getArrowProps,
    getArrowInnerProps
  } = usePopoverContext();
  var styles2 = useStyles();
  var arrowBg = (_ref2 = bg != null ? bg : bgColor) != null ? _ref2 : backgroundColor;
  return React93.createElement(chakra.div, _extends69({}, getArrowProps(), {
    className: "chakra-popover__arrow-positioner"
  }), React93.createElement(chakra.div, _extends69({
    className: cx("chakra-popover__arrow", props.className)
  }, getArrowInnerProps(props), {
    __css: _extends69({}, styles2.arrow, {
      "--popper-arrow-bg": arrowBg ? "colors." + arrowBg + ", " + arrowBg : void 0
    })
  })));
};
if (__DEV__) {
  PopoverArrow.displayName = "PopoverArrow";
}

// node_modules/@chakra-ui/progress/dist/esm/circular-progress.js
var React94 = __toModule(require_react());

// node_modules/@chakra-ui/progress/dist/esm/progress.utils.js
var spin = keyframes({
  "0%": {
    strokeDasharray: "1, 400",
    strokeDashoffset: "0"
  },
  "50%": {
    strokeDasharray: "400, 400",
    strokeDashoffset: "-100"
  },
  "100%": {
    strokeDasharray: "400, 400",
    strokeDashoffset: "-260"
  }
});
var rotate = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var progress2 = keyframes({
  "0%": {
    left: "-40%"
  },
  "100%": {
    left: "100%"
  }
});
var stripe = keyframes({
  from: {
    backgroundPosition: "1rem 0"
  },
  to: {
    backgroundPosition: "0 0"
  }
});
function getProgressProps(options) {
  var {
    value = 0,
    min,
    max,
    valueText,
    getValueText,
    isIndeterminate
  } = options;
  var percent2 = valueToPercent(value, min, max);
  var getAriaValueText = () => {
    if (value == null)
      return void 0;
    return isFunction(getValueText) ? getValueText(value, percent2) : valueText;
  };
  return {
    bind: {
      "data-indeterminate": isIndeterminate ? "" : void 0,
      "aria-valuemax": max,
      "aria-valuemin": min,
      "aria-valuenow": isIndeterminate ? void 0 : value,
      "aria-valuetext": getAriaValueText(),
      role: "progressbar"
    },
    percent: percent2,
    value
  };
}

// node_modules/@chakra-ui/progress/dist/esm/circular-progress.js
function _objectWithoutPropertiesLoose45(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends70() {
  _extends70 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends70.apply(this, arguments);
}
var Circle2 = (props) => React94.createElement(chakra.circle, _extends70({
  cx: 50,
  cy: 50,
  r: 42,
  fill: "transparent"
}, props));
if (__DEV__) {
  Circle2.displayName = "Circle";
}
var Shape = (props) => {
  var {
    size: size2,
    isIndeterminate
  } = props, rest = _objectWithoutPropertiesLoose45(props, ["size", "isIndeterminate"]);
  return React94.createElement(chakra.svg, _extends70({
    viewBox: "0 0 100 100",
    __css: {
      width: size2,
      height: size2,
      animation: isIndeterminate ? rotate + " 2s linear infinite" : void 0
    }
  }, rest));
};
if (__DEV__) {
  Shape.displayName = "Shape";
}
var CircularProgress = (props) => {
  var _progress$percent;
  var {
    size: size2 = "48px",
    max = 100,
    min = 0,
    valueText,
    getValueText,
    value,
    capIsRound,
    children,
    thickness = "10px",
    color: color3 = "#0078d4",
    trackColor = "#edebe9",
    isIndeterminate
  } = props, rest = _objectWithoutPropertiesLoose45(props, ["size", "max", "min", "valueText", "getValueText", "value", "capIsRound", "children", "thickness", "color", "trackColor", "isIndeterminate"]);
  var progress3 = getProgressProps({
    min,
    max,
    value,
    valueText,
    getValueText,
    isIndeterminate
  });
  var determinant = isIndeterminate ? void 0 : ((_progress$percent = progress3.percent) != null ? _progress$percent : 0) * 2.64;
  var strokeDasharray = isUndefined(determinant) ? void 0 : determinant + " " + (264 - determinant);
  var indicatorProps = isIndeterminate ? {
    css: {
      animation: spin + " 1.5s linear infinite"
    }
  } : {
    strokeDashoffset: 66,
    strokeDasharray,
    transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"
  };
  var rootStyles = {
    display: "inline-block",
    position: "relative",
    verticalAlign: "middle",
    fontSize: size2
  };
  return React94.createElement(chakra.div, _extends70({
    className: "chakra-progress"
  }, progress3.bind, rest, {
    __css: rootStyles
  }), React94.createElement(Shape, {
    size: size2,
    isIndeterminate
  }, React94.createElement(Circle2, {
    stroke: trackColor,
    strokeWidth: thickness,
    className: "chakra-progress__track"
  }), React94.createElement(Circle2, _extends70({
    stroke: color3,
    strokeWidth: thickness,
    className: "chakra-progress__indicator",
    strokeLinecap: capIsRound ? "round" : void 0,
    opacity: progress3.value === 0 && !isIndeterminate ? 0 : void 0
  }, indicatorProps))), children);
};
if (__DEV__) {
  CircularProgress.displayName = "CircularProgress";
}
var CircularProgressLabel = chakra("div", {
  baseStyle: {
    fontSize: "0.24em",
    top: "50%",
    left: "50%",
    width: "100%",
    textAlign: "center",
    position: "absolute",
    transform: "translate(-50%, -50%)"
  }
});
if (__DEV__) {
  CircularProgressLabel.displayName = "CircularProgressLabel";
}

// node_modules/@chakra-ui/progress/dist/esm/progress.js
var React95 = __toModule(require_react());
function _objectWithoutPropertiesLoose46(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends71() {
  _extends71 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends71.apply(this, arguments);
}
var ProgressLabel = (props) => {
  var styles2 = useStyles();
  var labelStyles = _extends71({
    top: "50%",
    left: "50%",
    width: "100%",
    textAlign: "center",
    position: "absolute",
    transform: "translate(-50%, -50%)"
  }, styles2.label);
  return React95.createElement(chakra.div, _extends71({}, props, {
    __css: labelStyles
  }));
};
if (__DEV__) {
  ProgressLabel.displayName = "ProgressLabel";
}
var ProgressFilledTrack = (props) => {
  var {
    min,
    max,
    value,
    isIndeterminate
  } = props, rest = _objectWithoutPropertiesLoose46(props, ["min", "max", "value", "isIndeterminate"]);
  var progress3 = getProgressProps({
    value,
    min,
    max,
    isIndeterminate
  });
  var styles2 = useStyles();
  var trackStyles = _extends71({
    height: "100%"
  }, styles2.filledTrack);
  return React95.createElement(chakra.div, _extends71({
    style: _extends71({
      width: progress3.percent + "%"
    }, rest.style)
  }, progress3.bind, rest, {
    __css: trackStyles
  }));
};
var Progress = (props) => {
  var _styles$track;
  var _omitThemingProps = omitThemingProps(props), {
    value,
    min = 0,
    max = 100,
    hasStripe,
    isAnimated,
    children,
    borderRadius: propBorderRadius,
    isIndeterminate,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose46(_omitThemingProps, ["value", "min", "max", "hasStripe", "isAnimated", "children", "borderRadius", "isIndeterminate", "aria-label", "aria-labelledby"]);
  var styles2 = useMultiStyleConfig("Progress", props);
  var borderRadius = propBorderRadius != null ? propBorderRadius : (_styles$track = styles2.track) == null ? void 0 : _styles$track.borderRadius;
  var stripAnimation = {
    animation: stripe + " 1s linear infinite"
  };
  var shouldAddStripe = !isIndeterminate && hasStripe;
  var shouldAnimateStripe = shouldAddStripe && isAnimated;
  var css2 = _extends71({}, shouldAnimateStripe && stripAnimation, isIndeterminate && {
    position: "absolute",
    willChange: "left",
    minWidth: "50%",
    animation: progress2 + " 1s ease infinite normal none running"
  });
  var trackStyles = _extends71({
    overflow: "hidden",
    position: "relative"
  }, styles2.track);
  return React95.createElement(chakra.div, _extends71({
    borderRadius,
    __css: trackStyles
  }, rest), React95.createElement(StylesProvider, {
    value: styles2
  }, React95.createElement(ProgressFilledTrack, {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    min,
    max,
    value,
    isIndeterminate,
    css: css2,
    borderRadius
  }), children));
};
if (__DEV__) {
  Progress.displayName = "Progress";
}

// node_modules/@chakra-ui/radio/dist/esm/radio.js
var React98 = __toModule(require_react());

// node_modules/@chakra-ui/radio/dist/esm/radio-group.js
var React97 = __toModule(require_react());

// node_modules/@chakra-ui/radio/dist/esm/use-radio-group.js
var React96 = __toModule(require_react());
function _extends72() {
  _extends72 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends72.apply(this, arguments);
}
function _objectWithoutPropertiesLoose47(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useRadioGroup(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    onChange: onChangeProp,
    value: valueProp,
    defaultValue,
    name: nameProp,
    isNative
  } = props, htmlProps = _objectWithoutPropertiesLoose47(props, ["onChange", "value", "defaultValue", "name", "isNative"]);
  var [valueState, setValue] = React96.useState(defaultValue || "");
  var [isControlled, value] = useControllableProp(valueProp, valueState);
  var ref = React96.useRef(null);
  var focus2 = React96.useCallback(() => {
    var rootNode = ref.current;
    if (!rootNode)
      return;
    var query = "input:not(:disabled):checked";
    var firstEnabledAndCheckedInput = rootNode.querySelector(query);
    if (firstEnabledAndCheckedInput) {
      firstEnabledAndCheckedInput.focus();
      return;
    }
    query = "input:not(:disabled)";
    var firstEnabledInput = rootNode.querySelector(query);
    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();
  }, []);
  var fallbackName = useId(void 0, "radio");
  var name = nameProp || fallbackName;
  var onChange = React96.useCallback((eventOrValue) => {
    var nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
    if (!isControlled) {
      setValue(nextValue);
    }
    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));
  }, [onChangeProp, isControlled]);
  var getRootProps = React96.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends72({}, props2, {
      ref: mergeRefs(forwardedRef, ref),
      role: "radiogroup"
    });
  }, []);
  var getRadioProps = React96.useCallback(function(props2, ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref2 === void 0) {
      ref2 = null;
    }
    var checkedKey = isNative ? "checked" : "isChecked";
    return _extends72({}, props2, {
      ref: ref2,
      name,
      [checkedKey]: value != null ? props2.value === value : void 0,
      onChange
    });
  }, [isNative, name, onChange, value]);
  return {
    getRootProps,
    getRadioProps,
    name,
    ref,
    focus: focus2,
    setValue,
    value,
    onChange,
    htmlProps
  };
}

// node_modules/@chakra-ui/radio/dist/esm/radio-group.js
function _extends73() {
  _extends73 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends73.apply(this, arguments);
}
function _objectWithoutPropertiesLoose48(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [RadioGroupProvider, useRadioGroupContext] = createContext({
  name: "RadioGroupContext",
  strict: false
});
var RadioGroup = forwardRef((props, ref) => {
  var {
    colorScheme,
    size: size2,
    variant,
    children,
    className
  } = props, rest = _objectWithoutPropertiesLoose48(props, ["colorScheme", "size", "variant", "children", "className"]);
  var {
    value,
    onChange,
    getRootProps,
    name,
    htmlProps
  } = useRadioGroup(rest);
  var group = React97.useMemo(() => ({
    name,
    size: size2,
    onChange,
    colorScheme,
    value,
    variant
  }), [size2, name, onChange, colorScheme, value, variant]);
  var groupProps = getRootProps(htmlProps, ref);
  var _className = cx("chakra-radio-group", className);
  return React97.createElement(RadioGroupProvider, {
    value: group
  }, React97.createElement(chakra.div, _extends73({}, groupProps, {
    className: _className
  }), children));
});
if (__DEV__) {
  RadioGroup.displayName = "RadioGroup";
}

// node_modules/@chakra-ui/radio/dist/esm/use-radio.js
var import_react68 = __toModule(require_react());
function _extends74() {
  _extends74 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends74.apply(this, arguments);
}
function _objectWithoutPropertiesLoose49(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useRadio(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    defaultIsChecked,
    defaultChecked = defaultIsChecked,
    isChecked: isCheckedProp,
    isFocusable,
    isDisabled,
    isReadOnly,
    isRequired,
    onChange,
    isInvalid,
    name,
    value
  } = props, htmlProps = _objectWithoutPropertiesLoose49(props, ["defaultIsChecked", "defaultChecked", "isChecked", "isFocusable", "isDisabled", "isReadOnly", "isRequired", "onChange", "isInvalid", "name", "value", "id"]);
  var [isFocused, setFocused] = useBoolean();
  var [isHovered, setHovering] = useBoolean();
  var [isActive, setActive] = useBoolean();
  var ref = (0, import_react68.useRef)(null);
  var [isCheckedState, setChecked] = (0, import_react68.useState)(Boolean(defaultChecked));
  var [isControlled, isChecked] = useControllableProp(isCheckedProp, isCheckedState);
  warn({
    condition: !!defaultIsChecked,
    message: 'The "defaultIsChecked" prop has been deprecated and will be removed in a future version. Please use the "defaultChecked" prop instead, which mirrors default React checkbox behavior.'
  });
  var handleChange = (0, import_react68.useCallback)((event) => {
    if (isReadOnly || isDisabled) {
      event.preventDefault();
      return;
    }
    if (!isControlled) {
      setChecked(event.target.checked);
    }
    onChange == null ? void 0 : onChange(event);
  }, [isControlled, isDisabled, isReadOnly, onChange]);
  var onKeyDown = (0, import_react68.useCallback)((event) => {
    if (event.key === " ") {
      setActive.on();
    }
  }, [setActive]);
  var onKeyUp = (0, import_react68.useCallback)((event) => {
    if (event.key === " ") {
      setActive.off();
    }
  }, [setActive]);
  var getCheckboxProps = (0, import_react68.useCallback)(function(props2, ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref2 === void 0) {
      ref2 = null;
    }
    return _extends74({}, props2, {
      ref: ref2,
      "data-active": dataAttr(isActive),
      "data-hover": dataAttr(isHovered),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-checked": dataAttr(isChecked),
      "data-focus": dataAttr(isFocused),
      "data-readonly": dataAttr(isReadOnly),
      "aria-hidden": true,
      onMouseDown: callAllHandlers(props2.onMouseDown, setActive.on),
      onMouseUp: callAllHandlers(props2.onMouseUp, setActive.off),
      onMouseEnter: callAllHandlers(props2.onMouseEnter, setHovering.on),
      onMouseLeave: callAllHandlers(props2.onMouseLeave, setHovering.off)
    });
  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, setActive.on, setActive.off, setHovering.on, setHovering.off]);
  var inputProps = useFormControl(props);
  var getInputProps = (0, import_react68.useCallback)(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    var ownProps = pick(inputProps, ["id", "disabled", "readOnly", "required", "aria-invalid", "aria-required", "aria-readonly", "aria-describedby", "onFocus", "onBlur"]);
    var focus2 = () => {
      scheduleMicrotask(() => {
        setFocused.on();
      });
    };
    var trulyDisabled = ownProps.disabled && !isFocusable;
    return _extends74({}, props2, ownProps, {
      ref: mergeRefs(forwardedRef, ref),
      type: "radio",
      name,
      value,
      onChange: callAllHandlers(props2.onChange, handleChange),
      onBlur: callAllHandlers(ownProps.onBlur, props2.onBlur, setFocused.off),
      onFocus: callAllHandlers(ownProps.onFocus, props2.onFocus, focus2),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
      checked: isChecked,
      disabled: trulyDisabled,
      "aria-disabled": ariaAttr(trulyDisabled),
      style: visuallyHiddenStyle
    });
  }, [inputProps, isFocusable, name, value, handleChange, setFocused, onKeyDown, onKeyUp, isChecked]);
  var getLabelProps = function getLabelProps2(props2, ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref2 === void 0) {
      ref2 = null;
    }
    return _extends74({}, props2, {
      ref: ref2,
      onMouseDown: callAllHandlers(props2.onMouseDown, stop),
      onTouchStart: callAllHandlers(props2.onTouchStart, stop),
      "data-disabled": dataAttr(isDisabled),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    });
  };
  return {
    state: {
      isInvalid,
      isFocused,
      isChecked,
      isActive,
      isHovered,
      isDisabled,
      isReadOnly,
      isRequired
    },
    getCheckboxProps,
    getInputProps,
    getLabelProps,
    htmlProps
  };
}
function stop(event) {
  event.preventDefault();
  event.stopPropagation();
}

// node_modules/@chakra-ui/radio/dist/esm/radio.js
function _objectWithoutPropertiesLoose50(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends75() {
  _extends75 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends75.apply(this, arguments);
}
var Radio = forwardRef((props, ref) => {
  var _props$name;
  var {
    onChange: onChangeProp,
    value: valueProp
  } = props;
  var group = useRadioGroupContext();
  var styles2 = useMultiStyleConfig("Radio", _extends75({}, group, props));
  var _omitThemingProps = omitThemingProps(props), {
    spacing: spacing2 = "0.5rem",
    children,
    isFullWidth
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose50(_omitThemingProps, ["spacing", "children", "isFullWidth"]);
  var isChecked = props.isChecked;
  if ((group == null ? void 0 : group.value) != null && valueProp != null) {
    isChecked = group.value === valueProp;
  }
  var onChange = onChangeProp;
  if (group != null && group.onChange && valueProp != null) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  var name = (_props$name = props == null ? void 0 : props.name) != null ? _props$name : group == null ? void 0 : group.name;
  var {
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    htmlProps
  } = useRadio(_extends75({}, rest, {
    isChecked,
    onChange,
    name
  }));
  var [layoutProps, otherProps] = split(htmlProps, layoutPropNames);
  var checkboxProps = getCheckboxProps(otherProps);
  var inputProps = getInputProps({}, ref);
  var labelProps = getLabelProps();
  var rootStyles = _extends75({
    width: isFullWidth ? "full" : void 0,
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top"
  }, styles2.container);
  var checkboxStyles = _extends75({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0
  }, styles2.control);
  var labelStyles = _extends75({
    userSelect: "none",
    marginStart: spacing2
  }, styles2.label);
  return React98.createElement(chakra.label, _extends75({
    className: "chakra-radio"
  }, layoutProps, {
    __css: rootStyles
  }), React98.createElement("input", _extends75({
    className: "chakra-radio__input"
  }, inputProps)), React98.createElement(chakra.span, _extends75({
    className: "chakra-radio__control"
  }, checkboxProps, {
    __css: checkboxStyles
  })), children && React98.createElement(chakra.span, _extends75({
    className: "chakra-radio__label"
  }, labelProps, {
    __css: labelStyles
  }), children));
});
if (__DEV__) {
  Radio.displayName = "Radio";
}

// node_modules/@chakra-ui/select/dist/esm/select.js
var React99 = __toModule(require_react());
function _extends76() {
  _extends76 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends76.apply(this, arguments);
}
function _objectWithoutPropertiesLoose51(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var SelectField = forwardRef((props, ref) => {
  var {
    children,
    placeholder,
    className
  } = props, rest = _objectWithoutPropertiesLoose51(props, ["children", "placeholder", "className"]);
  var ownProps = useFormControl(rest);
  return React99.createElement(chakra.select, _extends76({}, ownProps, {
    ref,
    className: cx("chakra-select", className)
  }), placeholder && React99.createElement("option", {
    value: ""
  }, placeholder), children);
});
if (__DEV__) {
  SelectField.displayName = "SelectField";
}
var Select = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Select", props);
  var _omitThemingProps = omitThemingProps(props), {
    rootProps,
    placeholder,
    icon,
    color: color3,
    height,
    h,
    minH,
    minHeight,
    iconColor,
    iconSize
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose51(_omitThemingProps, ["rootProps", "placeholder", "icon", "color", "height", "h", "minH", "minHeight", "iconColor", "iconSize", "isFullWidth"]);
  var [layoutProps, otherProps] = split(rest, layoutPropNames);
  var rootStyles = {
    width: "100%",
    height: "fit-content",
    position: "relative",
    color: color3
  };
  var fieldStyles = (0, import_lodash.default)({}, styles2.field, {
    paddingEnd: "2rem",
    _focus: {
      zIndex: "unset"
    }
  });
  return React99.createElement(chakra.div, _extends76({
    className: "chakra-select__wrapper",
    __css: rootStyles
  }, layoutProps, rootProps), React99.createElement(SelectField, _extends76({
    ref,
    height: h != null ? h : height,
    minH: minH != null ? minH : minHeight,
    placeholder
  }, otherProps, {
    __css: fieldStyles
  }), props.children), React99.createElement(SelectIcon, _extends76({
    "data-disabled": props.isDisabled
  }, (iconColor || color3) && {
    color: iconColor || color3
  }, {
    __css: styles2.icon
  }, iconSize && {
    fontSize: iconSize
  }), icon));
});
if (__DEV__) {
  Select.displayName = "Select";
}
var DefaultIcon2 = (props) => React99.createElement("svg", _extends76({
  viewBox: "0 0 24 24"
}, props), React99.createElement("path", {
  fill: "currentColor",
  d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
}));
var IconWrapper = chakra("div", {
  baseStyle: {
    position: "absolute",
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    pointerEvents: "none",
    top: "50%",
    transform: "translateY(-50%)"
  }
});
var SelectIcon = (props) => {
  var {
    children = React99.createElement(DefaultIcon2, null)
  } = props, rest = _objectWithoutPropertiesLoose51(props, ["children"]);
  var clone = React99.cloneElement(children, {
    role: "presentation",
    className: "chakra-select__icon",
    focusable: false,
    "aria-hidden": true,
    style: {
      width: "1em",
      height: "1em",
      color: "currentColor"
    }
  });
  return React99.createElement(IconWrapper, _extends76({}, rest, {
    className: "chakra-select__icon-wrapper"
  }), React99.isValidElement(children) ? clone : null);
};
if (__DEV__) {
  SelectIcon.displayName = "SelectIcon";
}

// node_modules/@chakra-ui/skeleton/dist/esm/skeleton.js
var React100 = __toModule(require_react());
function _extends77() {
  _extends77 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends77.apply(this, arguments);
}
function _objectWithoutPropertiesLoose52(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var StyledSkeleton = chakra("div", {
  baseStyle: {
    boxShadow: "none",
    backgroundClip: "padding-box",
    cursor: "default",
    color: "transparent",
    pointerEvents: "none",
    userSelect: "none",
    "&::before, &::after, *": {
      visibility: "hidden"
    }
  }
});
var fade2 = keyframes({
  from: {
    opacity: 0
  },
  to: {
    opacity: 1
  }
});
var useIsFirstRender = () => {
  var isFirstRender = React100.useRef(true);
  React100.useEffect(() => {
    isFirstRender.current = false;
  }, []);
  return isFirstRender.current;
};
var Skeleton = forwardRef((props, ref) => {
  var styles2 = useStyleConfig("Skeleton", props);
  var isFirstRender = useIsFirstRender();
  var _omitThemingProps = omitThemingProps(props), {
    isLoaded,
    fadeDuration,
    className
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose52(_omitThemingProps, ["startColor", "endColor", "isLoaded", "fadeDuration", "speed", "className"]);
  var _className = cx("chakra-skeleton", className);
  if (isLoaded) {
    var animation = isFirstRender ? "none" : fade2 + " " + fadeDuration + "s";
    return React100.createElement(chakra.div, _extends77({
      ref,
      className: _className,
      __css: {
        animation
      }
    }, rest));
  }
  return React100.createElement(StyledSkeleton, _extends77({
    ref,
    className: _className
  }, rest, {
    __css: styles2
  }));
});
Skeleton.defaultProps = {
  fadeDuration: 0.4,
  speed: 0.8
};
if (__DEV__) {
  Skeleton.displayName = "Skeleton";
}
function range(count) {
  return Array(count).fill(1).map((_, index2) => index2 + 1);
}
var defaultNoOfLines = 3;
var SkeletonText = (props) => {
  var {
    noOfLines = defaultNoOfLines,
    spacing: spacing2 = "0.5rem",
    skeletonHeight = "0.5rem",
    className,
    startColor,
    endColor,
    isLoaded,
    fadeDuration,
    speed,
    children
  } = props, rest = _objectWithoutPropertiesLoose52(props, ["noOfLines", "spacing", "skeletonHeight", "className", "startColor", "endColor", "isLoaded", "fadeDuration", "speed", "children"]);
  var noOfLinesValue = useBreakpointValue(typeof noOfLines === "number" ? [noOfLines] : noOfLines) || defaultNoOfLines;
  var numbers = range(noOfLinesValue);
  var getWidth = (index2) => {
    if (noOfLinesValue > 1) {
      return index2 === numbers.length ? "80%" : "100%";
    }
    return "100%";
  };
  var _className = cx("chakra-skeleton__group", className);
  return React100.createElement(chakra.div, _extends77({
    className: _className
  }, rest), numbers.map((number2, index2) => {
    if (isLoaded && index2 > 0) {
      return null;
    }
    var sizeProps = isLoaded ? null : {
      mb: number2 === numbers.length ? "0" : spacing2,
      width: getWidth(number2),
      height: skeletonHeight
    };
    return React100.createElement(Skeleton, _extends77({
      key: numbers.length.toString() + number2,
      startColor,
      endColor,
      isLoaded,
      fadeDuration,
      speed
    }, sizeProps), index2 === 0 ? children : void 0);
  }));
};
if (__DEV__) {
  SkeletonText.displayName = "SkeletonText";
}
var SkeletonCircle = (_ref2) => {
  var {
    size: size2 = "2rem"
  } = _ref2, rest = _objectWithoutPropertiesLoose52(_ref2, ["size"]);
  return React100.createElement(Skeleton, _extends77({
    borderRadius: "full",
    boxSize: size2
  }, rest));
};
if (__DEV__) {
  SkeletonCircle.displayName = "SkeletonCircle";
}

// node_modules/@chakra-ui/slider/dist/esm/slider.js
var React101 = __toModule(require_react());

// node_modules/@chakra-ui/slider/dist/esm/use-slider.js
var import_react69 = __toModule(require_react());

// node_modules/@chakra-ui/slider/dist/esm/slider-utils.js
function _extends78() {
  _extends78 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends78.apply(this, arguments);
}
function orient2(options) {
  var {
    orientation,
    vertical,
    horizontal
  } = options;
  return orientation === "vertical" ? vertical : horizontal;
}
function getPartsStyle(options) {
  var {
    orientation,
    trackPercent,
    thumbRect,
    isReversed
  } = options;
  var thumbStyle = _extends78({
    position: "absolute",
    userSelect: "none",
    WebkitUserSelect: "none",
    MozUserSelect: "none",
    msUserSelect: "none",
    touchAction: "none"
  }, orient2({
    orientation,
    vertical: {
      bottom: "calc(" + trackPercent + "% - " + thumbRect.height / 2 + "px)"
    },
    horizontal: {
      left: "calc(" + trackPercent + "% - " + thumbRect.width / 2 + "px)"
    }
  }));
  var rootStyle = _extends78({
    position: "relative",
    touchAction: "none",
    WebkitTapHighlightColor: "rgba(0,0,0,0)",
    userSelect: "none",
    outline: 0
  }, orient2({
    orientation,
    vertical: {
      paddingLeft: thumbRect.width / 2,
      paddingRight: thumbRect.width / 2
    },
    horizontal: {
      paddingTop: thumbRect.height / 2,
      paddingBottom: thumbRect.height / 2
    }
  }));
  var trackStyle = _extends78({
    position: "absolute"
  }, orient2({
    orientation,
    vertical: {
      left: "50%",
      transform: "translateX(-50%)",
      height: "100%"
    },
    horizontal: {
      top: "50%",
      transform: "translateY(-50%)",
      width: "100%"
    }
  }));
  var innerTrackStyle = _extends78({}, trackStyle, orient2({
    orientation,
    vertical: isReversed ? {
      height: 100 - trackPercent + "%",
      top: 0
    } : {
      height: trackPercent + "%",
      bottom: 0
    },
    horizontal: isReversed ? {
      width: 100 - trackPercent + "%",
      right: 0
    } : {
      width: trackPercent + "%",
      left: 0
    }
  }));
  return {
    trackStyle,
    innerTrackStyle,
    rootStyle,
    thumbStyle
  };
}

// node_modules/@chakra-ui/slider/dist/esm/use-slider.js
function _extends79() {
  _extends79 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends79.apply(this, arguments);
}
function _objectWithoutPropertiesLoose53(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useSlider(props) {
  var _getAriaValueText;
  var {
    min = 0,
    max = 100,
    onChange,
    value: valueProp,
    defaultValue,
    isReversed,
    orientation = "horizontal",
    id: idProp,
    isDisabled,
    isReadOnly,
    onChangeStart: onChangeStartProp,
    onChangeEnd: onChangeEndProp,
    step = 1,
    getAriaValueText: getAriaValueTextProp,
    "aria-valuetext": ariaValueText,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    name,
    focusThumbOnChange = true
  } = props, htmlProps = _objectWithoutPropertiesLoose53(props, ["min", "max", "onChange", "value", "defaultValue", "isReversed", "orientation", "id", "isDisabled", "isReadOnly", "onChangeStart", "onChangeEnd", "step", "getAriaValueText", "aria-valuetext", "aria-label", "aria-labelledby", "name", "focusThumbOnChange"]);
  var onChangeStart = useCallbackRef(onChangeStartProp);
  var onChangeEnd = useCallbackRef(onChangeEndProp);
  var getAriaValueText = useCallbackRef(getAriaValueTextProp);
  var [computedValue, setValue] = useControllableState({
    value: valueProp,
    defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),
    onChange
  });
  var [isDragging, setDragging] = useBoolean();
  var prevIsDragging = usePrevious(isDragging);
  var [isFocused, setFocused] = useBoolean();
  var eventSourceRef = (0, import_react69.useRef)(null);
  var isInteractive = !(isDisabled || isReadOnly);
  var value = clampValue(computedValue, min, max);
  var valueRef = useLatestRef(value);
  var prevRef = (0, import_react69.useRef)(valueRef.current);
  var reversedValue = max - value + min;
  var trackValue = isReversed ? reversedValue : value;
  var trackPercent = valueToPercent(trackValue, min, max);
  var isVertical = orientation === "vertical";
  var trackRef = (0, import_react69.useRef)(null);
  var thumbRef = (0, import_react69.useRef)(null);
  var rootRef = (0, import_react69.useRef)(null);
  var [thumbId, trackId] = useIds(idProp, "slider-thumb", "slider-track");
  var getValueFromPointer = (0, import_react69.useCallback)((event) => {
    var _event$touches$, _event$touches;
    if (!trackRef.current)
      return;
    eventSourceRef.current = "pointer";
    var trackRect = getBox(trackRef.current).borderBox;
    var {
      clientX,
      clientY
    } = (_event$touches$ = (_event$touches = event.touches) == null ? void 0 : _event$touches[0]) != null ? _event$touches$ : event;
    var diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;
    var length = isVertical ? trackRect.height : trackRect.width;
    var percent2 = diff / length;
    if (isReversed) {
      percent2 = 1 - percent2;
    }
    var nextValue = percentToValue(percent2, min, max);
    if (step) {
      nextValue = parseFloat(roundValueToStep(nextValue, min, step));
    }
    nextValue = clampValue(nextValue, min, max);
    return nextValue;
  }, [isVertical, isReversed, max, min, step]);
  var tenSteps = (max - min) / 10;
  var oneStep = step || (max - min) / 100;
  var constrain = (0, import_react69.useCallback)((value2) => {
    if (!isInteractive)
      return;
    value2 = parseFloat(roundValueToStep(value2, min, oneStep));
    value2 = clampValue(value2, min, max);
    setValue(value2);
  }, [oneStep, max, min, setValue, isInteractive]);
  var actions = (0, import_react69.useMemo)(() => ({
    stepUp: function stepUp(step2) {
      if (step2 === void 0) {
        step2 = oneStep;
      }
      var next = isReversed ? value - step2 : value + step2;
      constrain(next);
    },
    stepDown: function stepDown(step2) {
      if (step2 === void 0) {
        step2 = oneStep;
      }
      var next = isReversed ? value + step2 : value - step2;
      constrain(next);
    },
    reset: () => constrain(defaultValue || 0),
    stepTo: (value2) => constrain(value2)
  }), [constrain, isReversed, value, oneStep, defaultValue]);
  var onKeyDown = (0, import_react69.useCallback)((event) => {
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      ArrowRight: () => actions.stepUp(),
      ArrowUp: () => actions.stepUp(),
      ArrowLeft: () => actions.stepDown(),
      ArrowDown: () => actions.stepDown(),
      PageUp: () => actions.stepUp(tenSteps),
      PageDown: () => actions.stepDown(tenSteps),
      Home: () => constrain(min),
      End: () => constrain(max)
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      event.stopPropagation();
      action(event);
      eventSourceRef.current = "keyboard";
    }
  }, [actions, constrain, max, min, tenSteps]);
  var valueText = (_getAriaValueText = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _getAriaValueText : ariaValueText;
  var thumbBoxModel = useDimensions(thumbRef);
  var {
    thumbStyle,
    rootStyle,
    trackStyle,
    innerTrackStyle
  } = (0, import_react69.useMemo)(() => {
    var _thumbBoxModel$border;
    var thumbRect = (_thumbBoxModel$border = thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox) != null ? _thumbBoxModel$border : {
      width: 0,
      height: 0
    };
    return getPartsStyle({
      isReversed,
      orientation,
      thumbRect,
      trackPercent
    });
  }, [isReversed, orientation, thumbBoxModel == null ? void 0 : thumbBoxModel.borderBox, trackPercent]);
  var focusThumb = (0, import_react69.useCallback)(() => {
    if (thumbRef.current && focusThumbOnChange) {
      setTimeout(() => focus(thumbRef.current));
    }
  }, [focusThumbOnChange]);
  useUpdateEffect(() => {
    focusThumb();
    if (eventSourceRef.current === "keyboard") {
      onChangeEndProp == null ? void 0 : onChangeEndProp(valueRef.current);
    }
  }, [value, onChangeEndProp]);
  var setValueFromPointer = (event) => {
    var nextValue = getValueFromPointer(event);
    if (nextValue != null && nextValue !== valueRef.current) {
      setValue(nextValue);
    }
  };
  usePanGesture(rootRef, {
    onPanSessionStart(event) {
      if (!isInteractive)
        return;
      setValueFromPointer(event);
    },
    onPanSessionEnd() {
      if (!isInteractive)
        return;
      if (!prevIsDragging && prevRef.current !== valueRef.current) {
        onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);
        prevRef.current = valueRef.current;
      }
    },
    onPanStart() {
      if (!isInteractive)
        return;
      setDragging.on();
      onChangeStart == null ? void 0 : onChangeStart(valueRef.current);
    },
    onPan(event) {
      if (!isInteractive)
        return;
      setValueFromPointer(event);
    },
    onPanEnd() {
      if (!isInteractive)
        return;
      setDragging.off();
      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);
    }
  });
  var getRootProps = (0, import_react69.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends79({}, props2, htmlProps, {
      ref: mergeRefs(ref, rootRef),
      tabIndex: -1,
      "aria-disabled": ariaAttr(isDisabled),
      "data-focused": dataAttr(isFocused),
      style: _extends79({}, props2.style, rootStyle)
    });
  }, [htmlProps, isDisabled, isFocused, rootStyle]);
  var getTrackProps = (0, import_react69.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends79({}, props2, {
      ref: mergeRefs(ref, trackRef),
      id: trackId,
      "data-disabled": dataAttr(isDisabled),
      style: _extends79({}, props2.style, trackStyle)
    });
  }, [isDisabled, trackId, trackStyle]);
  var getInnerTrackProps = (0, import_react69.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends79({}, props2, {
      ref,
      style: _extends79({}, props2.style, innerTrackStyle)
    });
  }, [innerTrackStyle]);
  var getThumbProps = (0, import_react69.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends79({}, props2, {
      ref: mergeRefs(ref, thumbRef),
      role: "slider",
      tabIndex: isInteractive ? 0 : void 0,
      id: thumbId,
      "data-active": dataAttr(isDragging),
      "aria-valuetext": valueText,
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": value,
      "aria-orientation": orientation,
      "aria-disabled": ariaAttr(isDisabled),
      "aria-readonly": ariaAttr(isReadOnly),
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabel ? void 0 : ariaLabelledBy,
      style: _extends79({}, props2.style, thumbStyle),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props2.onFocus, setFocused.on),
      onBlur: callAllHandlers(props2.onBlur, setFocused.off)
    });
  }, [ariaLabel, ariaLabelledBy, isDisabled, isDragging, isReadOnly, isInteractive, max, min, onKeyDown, orientation, setFocused.off, setFocused.on, thumbId, thumbStyle, value, valueText]);
  var getMarkerProps = (0, import_react69.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    var isInRange = !(props2.value < min || props2.value > max);
    var isHighlighted = value >= props2.value;
    var markerPercent = valueToPercent(props2.value, min, max);
    var markerStyle = _extends79({
      position: "absolute",
      pointerEvents: "none"
    }, orient3({
      orientation,
      vertical: {
        bottom: isReversed ? 100 - markerPercent + "%" : markerPercent + "%"
      },
      horizontal: {
        left: isReversed ? 100 - markerPercent + "%" : markerPercent + "%"
      }
    }));
    return _extends79({}, props2, {
      ref,
      role: "presentation",
      "aria-hidden": true,
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(!isInRange),
      "data-highlighted": dataAttr(isHighlighted),
      style: _extends79({}, props2.style, markerStyle)
    });
  }, [isDisabled, isReversed, max, min, orientation, value]);
  var getInputProps = (0, import_react69.useCallback)(function(props2, ref) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (ref === void 0) {
      ref = null;
    }
    return _extends79({}, props2, {
      ref,
      type: "hidden",
      value,
      name
    });
  }, [name, value]);
  return {
    state: {
      value,
      isFocused,
      isDragging
    },
    actions,
    getRootProps,
    getTrackProps,
    getInnerTrackProps,
    getThumbProps,
    getMarkerProps,
    getInputProps
  };
}
function orient3(options) {
  var {
    orientation,
    vertical,
    horizontal
  } = options;
  return orientation === "vertical" ? vertical : horizontal;
}
function getDefaultValue(min, max) {
  return max < min ? min : min + (max - min) / 2;
}

// node_modules/@chakra-ui/slider/dist/esm/slider.js
function _extends80() {
  _extends80 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends80.apply(this, arguments);
}
function _objectWithoutPropertiesLoose54(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [SliderProvider, useSliderContext] = createContext({
  name: "SliderContext",
  errorMessage: "useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />"
});
var Slider = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Slider", props);
  var ownProps = omitThemingProps(props);
  var _useSlider = useSlider(ownProps), {
    getInputProps,
    getRootProps
  } = _useSlider, context = _objectWithoutPropertiesLoose54(_useSlider, ["getInputProps", "getRootProps"]);
  var rootProps = getRootProps();
  var inputProps = getInputProps({}, ref);
  var rootStyles = _extends80({
    display: "inline-block",
    position: "relative",
    cursor: "pointer"
  }, styles2.container);
  return React101.createElement(SliderProvider, {
    value: context
  }, React101.createElement(StylesProvider, {
    value: styles2
  }, React101.createElement(chakra.div, _extends80({}, rootProps, {
    className: "chakra-slider",
    __css: rootStyles
  }), props.children, React101.createElement("input", inputProps))));
});
Slider.defaultProps = {
  orientation: "horizontal"
};
if (__DEV__) {
  Slider.displayName = "Slider";
}
var SliderThumb = forwardRef((props, ref) => {
  var {
    getThumbProps
  } = useSliderContext();
  var styles2 = useStyles();
  var thumbStyles = _extends80({
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0
  }, styles2.thumb);
  var thumbProps = getThumbProps(props, ref);
  return React101.createElement(chakra.div, _extends80({}, thumbProps, {
    className: cx("chakra-slider__thumb", props.className),
    __css: thumbStyles
  }));
});
if (__DEV__) {
  SliderThumb.displayName = "SliderThumb";
}
var SliderTrack = forwardRef((props, ref) => {
  var {
    getTrackProps
  } = useSliderContext();
  var styles2 = useStyles();
  var trackStyles = _extends80({
    overflow: "hidden"
  }, styles2.track);
  var trackProps = getTrackProps(props, ref);
  return React101.createElement(chakra.div, _extends80({}, trackProps, {
    className: cx("chakra-slider__track", props.className),
    __css: trackStyles
  }));
});
if (__DEV__) {
  SliderTrack.displayName = "SliderTrack";
}
var SliderFilledTrack = forwardRef((props, ref) => {
  var {
    getInnerTrackProps
  } = useSliderContext();
  var styles2 = useStyles();
  var trackStyles = _extends80({
    width: "inherit",
    height: "inherit"
  }, styles2.filledTrack);
  var trackProps = getInnerTrackProps(props, ref);
  return React101.createElement(chakra.div, _extends80({}, trackProps, {
    className: "chakra-slider__filled-track",
    __css: trackStyles
  }));
});
if (__DEV__) {
  SliderFilledTrack.displayName = "SliderFilledTrack";
}
var SliderMark = forwardRef((props, ref) => {
  var {
    getMarkerProps
  } = useSliderContext();
  var markProps = getMarkerProps(props, ref);
  return React101.createElement(chakra.div, _extends80({}, markProps, {
    className: cx("chakra-slider__marker", props.className)
  }));
});
if (__DEV__) {
  SliderMark.displayName = "SliderMark";
}

// node_modules/@chakra-ui/stat/dist/esm/stat.js
var React102 = __toModule(require_react());
function _objectWithoutPropertiesLoose55(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends81() {
  _extends81 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends81.apply(this, arguments);
}
var StatLabel = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React102.createElement(chakra.dt, _extends81({
    ref
  }, props, {
    className: cx("chakra-stat__label", props.className),
    __css: styles2.label
  }));
});
if (__DEV__) {
  StatLabel.displayName = "StatLabel";
}
var StatHelpText = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React102.createElement(chakra.dd, _extends81({
    ref
  }, props, {
    className: cx("chakra-stat__help-text", props.className),
    __css: styles2.helpText
  }));
});
if (__DEV__) {
  StatHelpText.displayName = "StatHelpText";
}
var StatNumber = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React102.createElement(chakra.dd, _extends81({
    ref
  }, props, {
    className: cx("chakra-stat__number", props.className),
    __css: _extends81({}, styles2.number, {
      fontFeatureSettings: "pnum",
      fontVariantNumeric: "proportional-nums"
    })
  }));
});
if (__DEV__) {
  StatNumber.displayName = "StatNumber";
}
var StatDownArrow = (props) => React102.createElement(Icon, _extends81({
  color: "red.400"
}, props), React102.createElement("path", {
  fill: "currentColor",
  d: "M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z"
}));
if (__DEV__) {
  StatDownArrow.displayName = "StatDownArrow";
}
var StatUpArrow = (props) => React102.createElement(Icon, _extends81({
  color: "green.400"
}, props), React102.createElement("path", {
  fill: "currentColor",
  d: "M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z"
}));
if (__DEV__) {
  StatUpArrow.displayName = "StatUpArrow";
}
var StatArrow = (props) => {
  var {
    type,
    "aria-label": ariaLabel
  } = props, rest = _objectWithoutPropertiesLoose55(props, ["type", "aria-label"]);
  var styles2 = useStyles();
  var IconComponent = type === "increase" ? StatUpArrow : StatDownArrow;
  var defaultAriaLabel = type === "increase" ? "increased by" : "decreased by";
  var label = ariaLabel || defaultAriaLabel;
  return React102.createElement(React102.Fragment, null, React102.createElement(VisuallyHidden, null, label), React102.createElement(IconComponent, _extends81({
    "aria-hidden": true
  }, rest, {
    __css: styles2.icon
  })));
};
if (__DEV__) {
  StatArrow.displayName = "StatArrow";
}
var Stat = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Stat", props);
  var _omitThemingProps = omitThemingProps(props), {
    className,
    children
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose55(_omitThemingProps, ["className", "children"]);
  return React102.createElement(StylesProvider, {
    value: styles2
  }, React102.createElement(chakra.div, _extends81({
    className: cx("chakra-stat", className),
    ref,
    position: "relative",
    flex: "1 1 0%"
  }, rest), React102.createElement("dl", null, children)));
});
if (__DEV__) {
  Stat.displayName = "Stat";
}
var StatGroup = forwardRef((props, ref) => React102.createElement(chakra.div, _extends81({}, props, {
  ref,
  role: "group",
  className: cx("chakra-stat__group", props.className),
  __css: {
    display: "flex",
    flexWrap: "wrap",
    justifyContent: "space-around",
    alignItems: "flex-start"
  }
})));
if (__DEV__) {
  StatGroup.displayName = "StatGroup";
}

// node_modules/@chakra-ui/switch/dist/esm/switch.js
var React103 = __toModule(require_react());
function _extends82() {
  _extends82 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends82.apply(this, arguments);
}
function _objectWithoutPropertiesLoose56(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Switch = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Switch", props);
  var _omitThemingProps = omitThemingProps(props), {
    spacing: spacing2 = "0.5rem",
    children
  } = _omitThemingProps, ownProps = _objectWithoutPropertiesLoose56(_omitThemingProps, ["spacing", "children"]);
  var {
    state,
    getInputProps,
    getCheckboxProps,
    getRootProps,
    getLabelProps
  } = useCheckbox(ownProps);
  var containerStyles = React103.useMemo(() => _extends82({
    display: "inline-block",
    verticalAlign: "middle",
    lineHeight: "normal"
  }, styles2.container), [styles2.container]);
  var trackStyles = React103.useMemo(() => _extends82({
    display: "inline-flex",
    flexShrink: 0,
    justifyContent: "flex-start",
    boxSizing: "content-box",
    cursor: "pointer"
  }, styles2.track), [styles2.track]);
  var labelStyles = React103.useMemo(() => _extends82({
    userSelect: "none",
    marginStart: spacing2
  }, styles2.label), [spacing2, styles2.label]);
  return React103.createElement(chakra.label, _extends82({}, getRootProps(), {
    className: cx("chakra-switch", props.className),
    __css: containerStyles
  }), React103.createElement("input", _extends82({
    className: "chakra-switch__input"
  }, getInputProps({}, ref))), React103.createElement(chakra.span, _extends82({}, getCheckboxProps(), {
    className: "chakra-switch__track",
    __css: trackStyles
  }), React103.createElement(chakra.span, {
    __css: styles2.thumb,
    className: "chakra-switch__thumb",
    "data-checked": dataAttr(state.isChecked),
    "data-hover": dataAttr(state.isHovered)
  })), children && React103.createElement(chakra.span, _extends82({
    className: "chakra-switch__label"
  }, getLabelProps(), {
    __css: labelStyles
  }), children));
});
if (__DEV__) {
  Switch.displayName = "Switch";
}

// node_modules/@chakra-ui/tabs/dist/esm/tabs.js
var React105 = __toModule(require_react());

// node_modules/@chakra-ui/tabs/dist/esm/use-tabs.js
var React104 = __toModule(require_react());
function _extends83() {
  _extends83 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends83.apply(this, arguments);
}
function _objectWithoutPropertiesLoose57(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var [TabsDescendantsProvider, useTabsDescendantsContext, useTabsDescendants, useTabsDescendant] = createDescendantContext();
function useTabs(props) {
  var {
    defaultIndex,
    onChange,
    index: index2,
    isManual,
    isLazy,
    lazyBehavior = "unmount",
    orientation = "horizontal",
    direction: direction2 = "ltr"
  } = props, htmlProps = _objectWithoutPropertiesLoose57(props, ["defaultIndex", "onChange", "index", "isManual", "isLazy", "lazyBehavior", "orientation", "direction"]);
  var [focusedIndex, setFocusedIndex] = React104.useState(defaultIndex != null ? defaultIndex : 0);
  var [selectedIndex, setSelectedIndex] = useControllableState({
    defaultValue: defaultIndex != null ? defaultIndex : 0,
    value: index2,
    onChange
  });
  React104.useEffect(() => {
    if (index2 != null) {
      setFocusedIndex(index2);
    }
  }, [index2]);
  var descendants = useTabsDescendants();
  var id2 = useId(props.id, "tabs");
  return {
    id: id2,
    selectedIndex,
    focusedIndex,
    setSelectedIndex,
    setFocusedIndex,
    isManual,
    isLazy,
    lazyBehavior,
    orientation,
    descendants,
    direction: direction2,
    htmlProps
  };
}
var [TabsProvider, useTabsContext] = createContext({
  name: "TabsContext",
  errorMessage: "useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />"
});
function useTabList(props) {
  var {
    focusedIndex,
    orientation,
    direction: direction2
  } = useTabsContext();
  var descendants = useTabsDescendantsContext();
  var onKeyDown = React104.useCallback((event) => {
    var nextTab = () => {
      var next = descendants.nextEnabled(focusedIndex);
      if (next)
        focus(next.node);
    };
    var prevTab = () => {
      var prev = descendants.prevEnabled(focusedIndex);
      if (prev)
        focus(prev.node);
    };
    var firstTab = () => {
      var first = descendants.firstEnabled();
      if (first)
        focus(first.node);
    };
    var lastTab = () => {
      var last = descendants.lastEnabled();
      if (last)
        focus(last.node);
    };
    var isHorizontal = orientation === "horizontal";
    var isVertical = orientation === "vertical";
    var eventKey = normalizeEventKey(event);
    var ArrowStart = direction2 === "ltr" ? "ArrowLeft" : "ArrowRight";
    var ArrowEnd = direction2 === "ltr" ? "ArrowRight" : "ArrowLeft";
    var keyMap = {
      [ArrowStart]: () => isHorizontal && prevTab(),
      [ArrowEnd]: () => isHorizontal && nextTab(),
      ArrowDown: () => isVertical && nextTab(),
      ArrowUp: () => isVertical && prevTab(),
      Home: firstTab,
      End: lastTab
    };
    var action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [descendants, focusedIndex, orientation, direction2]);
  return _extends83({}, props, {
    role: "tablist",
    "aria-orientation": orientation,
    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)
  });
}
function useTab(props) {
  var {
    isDisabled,
    isFocusable
  } = props, htmlProps = _objectWithoutPropertiesLoose57(props, ["isDisabled", "isFocusable"]);
  var {
    setSelectedIndex,
    isManual,
    id: id2,
    setFocusedIndex,
    selectedIndex
  } = useTabsContext();
  var {
    index: index2,
    register
  } = useTabsDescendant({
    disabled: isDisabled && !isFocusable
  });
  var isSelected = index2 === selectedIndex;
  var onClick = () => {
    setSelectedIndex(index2);
  };
  var onFocus3 = () => {
    setFocusedIndex(index2);
    var isDisabledButFocusable = isDisabled && isFocusable;
    var shouldSelect = !isManual && !isDisabledButFocusable;
    if (shouldSelect) {
      setSelectedIndex(index2);
    }
  };
  var clickableProps = useClickable(_extends83({}, htmlProps, {
    ref: mergeRefs(register, props.ref),
    isDisabled,
    isFocusable,
    onClick: callAllHandlers(props.onClick, onClick)
  }));
  var type = "button";
  return _extends83({}, clickableProps, {
    id: makeTabId(id2, index2),
    role: "tab",
    tabIndex: isSelected ? 0 : -1,
    type,
    "aria-selected": isSelected,
    "aria-controls": makeTabPanelId(id2, index2),
    onFocus: isDisabled ? void 0 : callAllHandlers(props.onFocus, onFocus3)
  });
}
function useTabPanels(props) {
  var context = useTabsContext();
  var {
    id: id2,
    selectedIndex
  } = context;
  var validChildren = getValidChildren(props.children);
  var children = validChildren.map((child, index2) => React104.cloneElement(child, {
    isSelected: index2 === selectedIndex,
    id: makeTabPanelId(id2, index2),
    "aria-labelledby": makeTabId(id2, index2)
  }));
  return _extends83({}, props, {
    children
  });
}
function useTabPanel(props) {
  var {
    isSelected,
    id: id2,
    children
  } = props, htmlProps = _objectWithoutPropertiesLoose57(props, ["isSelected", "id", "children"]);
  var {
    isLazy,
    lazyBehavior
  } = useTabsContext();
  var hasBeenSelected = React104.useRef(false);
  if (isSelected) {
    hasBeenSelected.current = true;
  }
  var shouldRenderChildren = determineLazyBehavior({
    hasBeenSelected: hasBeenSelected.current,
    isSelected,
    isLazy,
    lazyBehavior
  });
  return _extends83({
    tabIndex: 0
  }, htmlProps, {
    children: shouldRenderChildren ? children : null,
    role: "tabpanel",
    hidden: !isSelected,
    id: id2
  });
}
function useTabIndicator() {
  var context = useTabsContext();
  var descendants = useTabsDescendantsContext();
  var {
    selectedIndex,
    orientation
  } = context;
  var isHorizontal = orientation === "horizontal";
  var isVertical = orientation === "vertical";
  var [rect, setRect] = React104.useState(() => {
    if (isHorizontal)
      return {
        left: 0,
        width: 0
      };
    if (isVertical)
      return {
        top: 0,
        height: 0
      };
    return void 0;
  });
  var [hasMeasured, setHasMeasured] = React104.useState(false);
  useSafeLayoutEffect(() => {
    var _tab$node;
    if (isUndefined(selectedIndex))
      return void 0;
    var tab = descendants.item(selectedIndex);
    var tabRect = tab == null ? void 0 : (_tab$node = tab.node) == null ? void 0 : _tab$node.getBoundingClientRect();
    if (isHorizontal && tabRect) {
      var {
        left: left2,
        width
      } = tabRect;
      setRect({
        left: left2,
        width
      });
    }
    if (isVertical && tabRect) {
      var {
        top: top2,
        height
      } = tabRect;
      setRect({
        top: top2,
        height
      });
    }
    var id2 = requestAnimationFrame(() => {
      setHasMeasured(true);
    });
    return () => {
      if (id2) {
        cancelAnimationFrame(id2);
      }
    };
  }, [selectedIndex, isHorizontal, isVertical, descendants]);
  return _extends83({
    position: "absolute",
    transition: hasMeasured ? "all 200ms cubic-bezier(0, 0, 0.2, 1)" : "none"
  }, rect);
}
function makeTabId(id2, index2) {
  return id2 + "--tab-" + index2;
}
function makeTabPanelId(id2, index2) {
  return id2 + "--tabpanel-" + index2;
}

// node_modules/@chakra-ui/tabs/dist/esm/tabs.js
function _extends84() {
  _extends84 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends84.apply(this, arguments);
}
function _objectWithoutPropertiesLoose58(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Tabs = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Tabs", props);
  var _omitThemingProps = omitThemingProps(props), {
    children,
    className
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose58(_omitThemingProps, ["children", "className"]);
  var _useTabs = useTabs(rest), {
    htmlProps,
    descendants
  } = _useTabs, ctx = _objectWithoutPropertiesLoose58(_useTabs, ["htmlProps", "descendants"]);
  var context = React105.useMemo(() => ctx, [ctx]);
  var rootProps = omit(htmlProps, ["isFitted"]);
  return React105.createElement(TabsDescendantsProvider, {
    value: descendants
  }, React105.createElement(TabsProvider, {
    value: context
  }, React105.createElement(StylesProvider, {
    value: styles2
  }, React105.createElement(chakra.div, _extends84({
    className: cx("chakra-tabs", className),
    ref
  }, rootProps, {
    __css: styles2.root
  }), children))));
});
if (__DEV__) {
  Tabs.displayName = "Tabs";
}
var Tab = forwardRef((props, ref) => {
  var styles2 = useStyles();
  var tabProps = useTab(_extends84({}, props, {
    ref
  }));
  var tabStyles = _extends84({
    outline: "0",
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }, styles2.tab);
  return React105.createElement(chakra.button, _extends84({}, tabProps, {
    className: cx("chakra-tabs__tab", props.className),
    __css: tabStyles
  }));
});
if (__DEV__) {
  Tab.displayName = "Tab";
}
var TabList = forwardRef((props, ref) => {
  var tablistProps = useTabList(_extends84({}, props, {
    ref
  }));
  var styles2 = useStyles();
  var tablistStyles = _extends84({
    display: "flex"
  }, styles2.tablist);
  return React105.createElement(chakra.div, _extends84({}, tablistProps, {
    className: cx("chakra-tabs__tablist", props.className),
    __css: tablistStyles
  }));
});
if (__DEV__) {
  TabList.displayName = "TabList";
}
var TabPanel = forwardRef((props, ref) => {
  var panelProps = useTabPanel(_extends84({}, props, {
    ref
  }));
  var styles2 = useStyles();
  return React105.createElement(chakra.div, _extends84({
    outline: "0"
  }, panelProps, {
    className: cx("chakra-tabs__tab-panel", props.className),
    __css: styles2.tabpanel
  }));
});
if (__DEV__) {
  TabPanel.displayName = "TabPanel";
}
var TabPanels = forwardRef((props, ref) => {
  var panelsProps = useTabPanels(props);
  var styles2 = useStyles();
  return React105.createElement(chakra.div, _extends84({}, panelsProps, {
    width: "100%",
    ref,
    className: cx("chakra-tabs__tab-panels", props.className),
    __css: styles2.tabpanels
  }));
});
if (__DEV__) {
  TabPanels.displayName = "TabPanels";
}
var TabIndicator = forwardRef((props, ref) => {
  var indicatorStyle = useTabIndicator();
  var style = _extends84({}, props.style, indicatorStyle);
  var styles2 = useStyles();
  return React105.createElement(chakra.div, _extends84({
    ref
  }, props, {
    className: cx("chakra-tabs__tab-indicator", props.className),
    style,
    __css: styles2.indicator
  }));
});
if (__DEV__) {
  TabIndicator.displayName = "TabIndicator";
}

// node_modules/@chakra-ui/tag/dist/esm/tag.js
var React106 = __toModule(require_react());
function _objectWithoutPropertiesLoose59(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _extends85() {
  _extends85 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends85.apply(this, arguments);
}
var Tag = forwardRef((props, ref) => {
  var styles2 = useMultiStyleConfig("Tag", props);
  var ownProps = omitThemingProps(props);
  var containerStyles = _extends85({
    display: "inline-flex",
    verticalAlign: "top",
    alignItems: "center",
    maxWidth: "100%"
  }, styles2.container);
  return React106.createElement(StylesProvider, {
    value: styles2
  }, React106.createElement(chakra.span, _extends85({
    ref
  }, ownProps, {
    __css: containerStyles
  })));
});
if (__DEV__) {
  Tag.displayName = "Tag";
}
var TagLabel = forwardRef((props, ref) => {
  var styles2 = useStyles();
  return React106.createElement(chakra.span, _extends85({
    ref,
    isTruncated: true
  }, props, {
    __css: styles2.label
  }));
});
if (__DEV__) {
  TagLabel.displayName = "TagLabel";
}
var TagLeftIcon = forwardRef((props, ref) => React106.createElement(Icon, _extends85({
  ref,
  verticalAlign: "top",
  marginEnd: "0.5rem"
}, props)));
if (__DEV__) {
  TagLeftIcon.displayName = "TagLeftIcon";
}
var TagRightIcon = forwardRef((props, ref) => React106.createElement(Icon, _extends85({
  ref,
  verticalAlign: "top",
  marginStart: "0.5rem"
}, props)));
if (__DEV__) {
  TagRightIcon.displayName = "TagRightIcon";
}
var TagCloseIcon = (props) => React106.createElement(Icon, _extends85({
  verticalAlign: "inherit",
  viewBox: "0 0 512 512"
}, props), React106.createElement("path", {
  fill: "currentColor",
  d: "M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z"
}));
if (__DEV__) {
  TagCloseIcon.displayName = "TagCloseIcon";
}
var TagCloseButton = (props) => {
  var {
    isDisabled,
    children
  } = props, rest = _objectWithoutPropertiesLoose59(props, ["isDisabled", "children"]);
  var styles2 = useStyles();
  var btnStyles = _extends85({
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    outline: "0",
    transition: "all 0.2s"
  }, styles2.closeButton);
  return React106.createElement(chakra.button, _extends85({}, rest, {
    type: "button",
    "aria-label": "close",
    disabled: isDisabled,
    __css: btnStyles
  }), children || React106.createElement(TagCloseIcon, null));
};
if (__DEV__) {
  TagCloseButton.displayName = "TagCloseButton";
}

// node_modules/@chakra-ui/textarea/dist/esm/textarea.js
var React107 = __toModule(require_react());
function _extends86() {
  _extends86 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends86.apply(this, arguments);
}
function _objectWithoutPropertiesLoose60(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Textarea = forwardRef((props, ref) => {
  var styles2 = useStyleConfig("Textarea", props);
  var _omitThemingProps = omitThemingProps(props), {
    className,
    rows
  } = _omitThemingProps, rest = _objectWithoutPropertiesLoose60(_omitThemingProps, ["className", "rows"]);
  var textareaProps = useFormControl(rest);
  var omitted = ["h", "minH", "height", "minHeight"];
  var textareaStyles = rows ? omit(styles2, omitted) : styles2;
  return React107.createElement(chakra.textarea, _extends86({
    ref,
    rows
  }, textareaProps, {
    className: cx("chakra-textarea", className),
    __css: textareaStyles
  }));
});
if (__DEV__) {
  Textarea.displayName = "Textarea";
}

// node_modules/@chakra-ui/toast/dist/esm/use-toast.js
var React112 = __toModule(require_react());

// node_modules/@chakra-ui/toast/dist/esm/toast.class.js
var React111 = __toModule(require_react());
var import_react_dom3 = __toModule(require_react_dom());

// node_modules/@chakra-ui/toast/dist/esm/toast-manager.js
var React110 = __toModule(require_react());

// node_modules/@reach/alert/dist/reach-alert.esm.js
var import_react72 = __toModule(require_react());
var import_react_dom2 = __toModule(require_react_dom());

// node_modules/@reach/visually-hidden/dist/reach-visually-hidden.esm.js
var import_react70 = __toModule(require_react());
var import_prop_types7 = __toModule(require_prop_types());
function _extends87() {
  _extends87 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends87.apply(this, arguments);
}
function _objectWithoutPropertiesLoose61(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var VisuallyHidden2 = (0, import_react70.forwardRef)(function VisuallyHidden3(_ref2, ref) {
  var _ref$as = _ref2.as, Comp = _ref$as === void 0 ? "span" : _ref$as, _ref$style = _ref2.style, style = _ref$style === void 0 ? {} : _ref$style, props = _objectWithoutPropertiesLoose61(_ref2, ["as", "style"]);
  return (0, import_react70.createElement)(Comp, _extends87({
    ref,
    style: _extends87({
      border: 0,
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      width: "1px",
      whiteSpace: "nowrap",
      wordWrap: "normal"
    }, style)
  }, props));
});
if (true) {
  VisuallyHidden2.displayName = "VisuallyHidden";
  VisuallyHidden2.propTypes = {
    as: import_prop_types7.default.any,
    children: import_prop_types7.default.node
  };
}

// node_modules/@reach/utils/dist/reach-utils.esm.js
var React108 = __toModule(require_react());
var import_react71 = __toModule(require_react());
var import_warning = __toModule(require_warning());
var useIsomorphicLayoutEffect2 = canUseDOM() ? import_react71.useLayoutEffect : import_react71.useEffect;
var checkedPkgs = {};
var checkStyles = noop4;
if (true) {
  _ref2 = typeof process !== "undefined" ? process : {
    env: {
      NODE_ENV: "development"
    }
  }, env2 = _ref2.env;
  checkStyles = function checkStyles2(packageName) {
    if (checkedPkgs[packageName])
      return;
    checkedPkgs[packageName] = true;
    if (env2.NODE_ENV !== "test" && parseInt(window.getComputedStyle(document.body).getPropertyValue("--reach-" + packageName), 10) !== 1) {
      console.warn("@reach/" + packageName + ' styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\n\n    import "@reach/' + packageName + `/styles.css";

  Otherwise you'll need to include them some other way:

    <link rel="stylesheet" type="text/css" href="node_modules/@reach/` + packageName + '/styles.css" />\n\n  For more information visit https://ui.reach.tech/styling.\n  ');
    }
  };
}
var _ref2;
var env2;
var ponyfillGlobal = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
function assignRef3(ref, value) {
  if (ref == null)
    return;
  if (isFunction2(ref)) {
    ref(value);
  } else {
    try {
      ref.current = value;
    } catch (error) {
      throw new Error('Cannot assign value "' + value + '" to ref "' + ref + '"');
    }
  }
}
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
function forwardRefWithAs(render3) {
  return (0, import_react71.forwardRef)(render3);
}
function getOwnerDocument2(element) {
  return canUseDOM() ? element ? element.ownerDocument : document : null;
}
function isFunction2(value) {
  return !!(value && {}.toString.call(value) == "[object Function]");
}
function noop4() {
}
var useControlledSwitchWarning = noop4;
if (true) {
  useControlledSwitchWarning = function useControlledSwitchWarning2(controlledValue, controlledPropName, componentName) {
    var controlledRef = (0, import_react71.useRef)(controlledValue != null);
    var nameCache = (0, import_react71.useRef)({
      componentName,
      controlledPropName
    });
    (0, import_react71.useEffect)(function() {
      nameCache.current = {
        componentName,
        controlledPropName
      };
    }, [componentName, controlledPropName]);
    (0, import_react71.useEffect)(function() {
      var wasControlled = controlledRef.current;
      var _nameCache$current = nameCache.current, componentName2 = _nameCache$current.componentName, controlledPropName2 = _nameCache$current.controlledPropName;
      var isControlled = controlledValue != null;
      if (wasControlled !== isControlled) {
        console.error("A component is changing an " + (wasControlled ? "" : "un") + "controlled `" + controlledPropName2 + "` state of " + componentName2 + " to be " + (wasControlled ? "un" : "") + "controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled " + componentName2 + " element for the lifetime of the component.\nMore info: https://fb.me/react-controlled-components");
      }
    }, [controlledValue]);
  };
}
var useCheckStyles = noop4;
if (true) {
  useCheckStyles = function useCheckStyles2(pkg) {
    var name = (0, import_react71.useRef)(pkg);
    (0, import_react71.useEffect)(function() {
      return void (name.current = pkg);
    }, [pkg]);
    (0, import_react71.useEffect)(function() {
      return checkStyles(name.current);
    }, []);
  };
}
function useForkedRef() {
  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    refs[_key4] = arguments[_key4];
  }
  return (0, import_react71.useMemo)(function() {
    if (refs.every(function(ref) {
      return ref == null;
    })) {
      return null;
    }
    return function(node2) {
      refs.forEach(function(ref) {
        assignRef3(ref, node2);
      });
    };
  }, [].concat(refs));
}
function usePrevious2(value) {
  var ref = (0, import_react71.useRef)(null);
  (0, import_react71.useEffect)(function() {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var useStateLogger = noop4;
if (true) {
  useStateLogger = function useStateLogger2(state, DEBUG) {
    if (DEBUG === void 0) {
      DEBUG = false;
    }
    var debugRef = (0, import_react71.useRef)(DEBUG);
    (0, import_react71.useEffect)(function() {
      debugRef.current = DEBUG;
    }, [DEBUG]);
    (0, import_react71.useEffect)(function() {
      if (debugRef.current) {
        console.group("State Updated");
        console.log("%c" + state, "font-weight: normal; font-size: 120%; font-style: italic;");
        console.groupEnd();
      }
    }, [state]);
  };
}

// node_modules/@reach/alert/dist/reach-alert.esm.js
var import_prop_types8 = __toModule(require_prop_types());
function _extends88() {
  _extends88 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends88.apply(this, arguments);
}
function _objectWithoutPropertiesLoose62(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var keys = {
  polite: -1,
  assertive: -1
};
var elements = {
  polite: {},
  assertive: {}
};
var liveRegions = {
  polite: null,
  assertive: null
};
var renderTimer;
var Alert2 = forwardRefWithAs(function Alert3(_ref2, forwardedRef) {
  var _ref$as = _ref2.as, Comp = _ref$as === void 0 ? "div" : _ref$as, children = _ref2.children, _ref$type = _ref2.type, regionType = _ref$type === void 0 ? "polite" : _ref$type, props = _objectWithoutPropertiesLoose62(_ref2, ["as", "children", "type"]);
  var ownRef = (0, import_react72.useRef)(null);
  var ref = useForkedRef(forwardedRef, ownRef);
  var child = (0, import_react72.useMemo)(function() {
    return (0, import_react72.createElement)(Comp, _extends88({}, props, {
      ref,
      "data-reach-alert": true
    }), children);
  }, [children, props]);
  useMirrorEffects(regionType, child, ownRef);
  return child;
});
if (true) {
  Alert2.displayName = "Alert";
  Alert2.propTypes = {
    children: import_prop_types8.default.node,
    type: import_prop_types8.default.oneOf(["assertive", "polite"])
  };
}
function createMirror(type, doc2) {
  var key = ++keys[type];
  var mount = function mount2(element) {
    if (liveRegions[type]) {
      elements[type][key] = element;
      renderAlerts();
    } else {
      var node2 = doc2.createElement("div");
      node2.setAttribute("data-reach-live-" + type, "true");
      liveRegions[type] = node2;
      doc2.body.appendChild(liveRegions[type]);
      mount2(element);
    }
  };
  var update = function update2(element) {
    elements[type][key] = element;
    renderAlerts();
  };
  var unmount = function unmount2() {
    delete elements[type][key];
    renderAlerts();
  };
  return {
    mount,
    update,
    unmount
  };
}
function renderAlerts() {
  if (renderTimer != null) {
    window.clearTimeout(renderTimer);
  }
  renderTimer = window.setTimeout(function() {
    Object.keys(elements).forEach(function(elementType) {
      var regionType = elementType;
      var container2 = liveRegions[regionType];
      if (container2) {
        (0, import_react_dom2.render)((0, import_react72.createElement)(VisuallyHidden2, {
          as: "div"
        }, (0, import_react72.createElement)("div", {
          role: regionType === "assertive" ? "alert" : "status",
          "aria-live": regionType
        }, Object.keys(elements[regionType]).map(function(key) {
          return (0, import_react72.cloneElement)(elements[regionType][key], {
            key,
            ref: null
          });
        }))), liveRegions[regionType]);
      }
    });
  }, 500);
}
function useMirrorEffects(regionType, element, ref) {
  var prevType = usePrevious2(regionType);
  var mirror = (0, import_react72.useRef)(null);
  var mounted = (0, import_react72.useRef)(false);
  (0, import_react72.useEffect)(function() {
    var ownerDocument = getOwnerDocument2(ref.current);
    if (!mounted.current) {
      mounted.current = true;
      mirror.current = createMirror(regionType, ownerDocument);
      mirror.current.mount(element);
    } else if (prevType !== regionType) {
      mirror.current && mirror.current.unmount();
      mirror.current = createMirror(regionType, ownerDocument);
      mirror.current.mount(element);
    } else {
      mirror.current && mirror.current.update(element);
    }
  }, [element, regionType, prevType, ref]);
  (0, import_react72.useEffect)(function() {
    return function() {
      mirror.current && mirror.current.unmount();
    };
  }, []);
}
var reach_alert_esm_default = Alert2;

// node_modules/@chakra-ui/toast/dist/esm/toast.js
var React109 = __toModule(require_react());

// node_modules/@chakra-ui/toast/dist/esm/toast.utils.js
function findToast(toasts, id2) {
  var position2 = getToastPosition(toasts, id2);
  var index2 = position2 ? toasts[position2].findIndex((toast2) => toast2.id === id2) : -1;
  return {
    position: position2,
    index: index2
  };
}
var getToastPosition = (toasts, id2) => {
  var _Object$values$flat$f;
  return (_Object$values$flat$f = Object.values(toasts).flat().find((toast2) => toast2.id === id2)) == null ? void 0 : _Object$values$flat$f.position;
};
function getToastStyle(position2) {
  var isRighty = position2.includes("right");
  var isLefty = position2.includes("left");
  var alignItems = "center";
  if (isRighty)
    alignItems = "flex-end";
  if (isLefty)
    alignItems = "flex-start";
  return {
    display: "flex",
    flexDirection: "column",
    alignItems
  };
}

// node_modules/@chakra-ui/toast/dist/esm/toast.js
var toastMotionVariants = {
  initial: (props) => {
    var {
      position: position2
    } = props;
    var dir = ["top", "bottom"].includes(position2) ? "y" : "x";
    var factor = ["top-right", "bottom-right"].includes(position2) ? 1 : -1;
    if (position2 === "bottom")
      factor = 1;
    return {
      opacity: 0,
      [dir]: factor * 24
    };
  },
  animate: {
    opacity: 1,
    y: 0,
    x: 0,
    scale: 1,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.85,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 1, 1]
    }
  }
};
var Toast = (props) => {
  var {
    id: id2,
    message,
    onCloseComplete,
    onRequestRemove,
    requestClose = false,
    position: position2 = "bottom",
    duration = 5e3
  } = props;
  var [delay, setDelay] = React109.useState(duration);
  var isPresent2 = useIsPresent();
  useUpdateEffect(() => {
    if (!isPresent2) {
      onCloseComplete == null ? void 0 : onCloseComplete();
    }
  }, [isPresent2]);
  useUpdateEffect(() => {
    setDelay(duration);
  }, [duration]);
  var onMouseEnter = () => setDelay(null);
  var onMouseLeave = () => setDelay(duration);
  var close = () => {
    if (isPresent2)
      onRequestRemove();
  };
  React109.useEffect(() => {
    if (isPresent2 && requestClose) {
      onRequestRemove();
    }
  }, [isPresent2, requestClose, onRequestRemove]);
  useTimeout(close, delay);
  var style = React109.useMemo(() => getToastStyle(position2), [position2]);
  return React109.createElement(motion.li, {
    layout: true,
    className: "chakra-toast",
    variants: toastMotionVariants,
    initial: "initial",
    animate: "animate",
    exit: "exit",
    onHoverStart: onMouseEnter,
    onHoverEnd: onMouseLeave,
    custom: {
      position: position2
    },
    style
  }, React109.createElement(reach_alert_esm_default, {
    className: "chakra-toast__inner",
    style: {
      pointerEvents: "auto",
      maxWidth: 560,
      minWidth: 300,
      margin: "0.5rem"
    }
  }, isFunction(message) ? message({
    id: id2,
    onClose: close
  }) : message));
};
if (__DEV__) {
  Toast.displayName = "Toast";
}

// node_modules/@chakra-ui/toast/dist/esm/toast-manager.js
function _extends89() {
  _extends89 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends89.apply(this, arguments);
}
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var ToastManager = class extends React110.Component {
  constructor(props) {
    var _this;
    super(props);
    _this = this;
    _defineProperty4(this, "state", {
      top: [],
      "top-left": [],
      "top-right": [],
      "bottom-left": [],
      bottom: [],
      "bottom-right": []
    });
    _defineProperty4(this, "notify", (message, options) => {
      var toast2 = this.createToast(message, options);
      var {
        position: position2,
        id: id2
      } = toast2;
      this.setState((prevToasts) => {
        var isTop = position2.includes("top");
        var toasts = isTop ? [toast2, ...prevToasts[position2]] : [...prevToasts[position2], toast2];
        return _extends89({}, prevToasts, {
          [position2]: toasts
        });
      });
      return id2;
    });
    _defineProperty4(this, "updateToast", (id2, options) => {
      this.setState((prevState) => {
        var nextState = _extends89({}, prevState);
        var {
          position: position2,
          index: index2
        } = findToast(nextState, id2);
        if (position2 && index2 !== -1) {
          nextState[position2][index2] = _extends89({}, nextState[position2][index2], options);
        }
        return nextState;
      });
    });
    _defineProperty4(this, "closeAll", function(_temp) {
      var {
        positions
      } = _temp === void 0 ? {} : _temp;
      _this.setState((prev) => {
        var allPositions = ["bottom", "bottom-right", "bottom-left", "top", "top-left", "top-right"];
        var positionsToClose = positions != null ? positions : allPositions;
        return positionsToClose.reduce((acc, position2) => {
          acc[position2] = prev[position2].map((toast2) => _extends89({}, toast2, {
            requestClose: true
          }));
          return acc;
        }, {});
      });
    });
    _defineProperty4(this, "createToast", (message, options) => {
      var _options$id, _options$position;
      ToastManager.counter += 1;
      var id2 = (_options$id = options.id) != null ? _options$id : ToastManager.counter;
      var position2 = (_options$position = options.position) != null ? _options$position : "top";
      return {
        id: id2,
        message,
        position: position2,
        duration: options.duration,
        onCloseComplete: options.onCloseComplete,
        onRequestRemove: () => this.removeToast(String(id2), position2),
        status: options.status,
        requestClose: false
      };
    });
    _defineProperty4(this, "closeToast", (id2) => {
      this.setState((prevState) => {
        var position2 = getToastPosition(prevState, id2);
        if (!position2)
          return prevState;
        return _extends89({}, prevState, {
          [position2]: prevState[position2].map((toast2) => {
            if (toast2.id == id2) {
              return _extends89({}, toast2, {
                requestClose: true
              });
            }
            return toast2;
          })
        });
      });
    });
    _defineProperty4(this, "removeToast", (id2, position2) => {
      this.setState((prevState) => _extends89({}, prevState, {
        [position2]: prevState[position2].filter((toast2) => toast2.id != id2)
      }));
    });
    _defineProperty4(this, "isVisible", (id2) => {
      var {
        position: position2
      } = findToast(this.state, id2);
      return Boolean(position2);
    });
    _defineProperty4(this, "getStyle", (position2) => {
      var isTopOrBottom = position2 === "top" || position2 === "bottom";
      var margin = isTopOrBottom ? "0 auto" : void 0;
      var top2 = position2.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
      var bottom2 = position2.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
      var right2 = !position2.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
      var left2 = !position2.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
      return {
        position: "fixed",
        zIndex: 5500,
        pointerEvents: "none",
        display: "flex",
        flexDirection: "column",
        margin,
        top: top2,
        bottom: bottom2,
        right: right2,
        left: left2
      };
    });
    var methods = {
      notify: this.notify,
      closeAll: this.closeAll,
      close: this.closeToast,
      update: this.updateToast,
      isActive: this.isVisible
    };
    props.notify(methods);
  }
  render() {
    return objectKeys(this.state).map((position2) => {
      var toasts = this.state[position2];
      return React110.createElement("ul", {
        key: position2,
        id: "chakra-toast-manager-" + position2,
        style: this.getStyle(position2)
      }, React110.createElement(AnimatePresence, {
        initial: false
      }, toasts.map((toast2) => React110.createElement(Toast, _extends89({
        key: toast2.id
      }, toast2)))));
    });
  }
};
_defineProperty4(ToastManager, "counter", 0);

// node_modules/@chakra-ui/toast/dist/esm/toast.class.js
function _defineProperty5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
  } else {
    obj[key] = value;
  }
  return obj;
}
var portalId = "chakra-toast-portal";
var Toaster = class {
  constructor() {
    var _this = this;
    _defineProperty5(this, "createToast", void 0);
    _defineProperty5(this, "removeAll", void 0);
    _defineProperty5(this, "closeToast", void 0);
    _defineProperty5(this, "updateToast", void 0);
    _defineProperty5(this, "isToastActive", void 0);
    _defineProperty5(this, "bindFunctions", (methods) => {
      this.createToast = methods.notify;
      this.removeAll = methods.closeAll;
      this.closeToast = methods.close;
      this.updateToast = methods.update;
      this.isToastActive = methods.isActive;
    });
    _defineProperty5(this, "notify", function(message, options) {
      if (options === void 0) {
        options = {};
      }
      return _this.createToast == null ? void 0 : _this.createToast(message, options);
    });
    _defineProperty5(this, "close", (id2) => {
      var _this$closeToast;
      (_this$closeToast = this.closeToast) == null ? void 0 : _this$closeToast.call(this, id2);
    });
    _defineProperty5(this, "closeAll", (options) => {
      var _this$removeAll;
      (_this$removeAll = this.removeAll) == null ? void 0 : _this$removeAll.call(this, options);
    });
    _defineProperty5(this, "update", function(id2, options) {
      if (options === void 0) {
        options = {};
      }
      _this.updateToast == null ? void 0 : _this.updateToast(id2, options);
    });
    _defineProperty5(this, "isActive", (id2) => {
      var _this$isToastActive;
      return (_this$isToastActive = this.isToastActive) == null ? void 0 : _this$isToastActive.call(this, id2);
    });
    if (!isBrowser)
      return;
    var portal;
    var existingPortal = document.getElementById(portalId);
    if (existingPortal) {
      portal = existingPortal;
    } else {
      var _document$body;
      var div = document.createElement("div");
      div.id = portalId;
      (_document$body = document.body) == null ? void 0 : _document$body.appendChild(div);
      portal = div;
    }
    (0, import_react_dom3.render)(React111.createElement(ToastManager, {
      notify: this.bindFunctions
    }), portal);
  }
};
var toast = new Toaster();

// node_modules/@chakra-ui/toast/dist/esm/use-toast.js
function _extends90() {
  _extends90 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends90.apply(this, arguments);
}
var Toast2 = (props) => {
  var {
    status,
    variant,
    id: id2,
    title,
    isClosable,
    onClose,
    description
  } = props;
  return React112.createElement(Alert, {
    status,
    variant,
    id: id2,
    alignItems: "start",
    borderRadius: "md",
    boxShadow: "lg",
    paddingEnd: 8,
    textAlign: "start",
    width: "auto"
  }, React112.createElement(AlertIcon, null), React112.createElement(chakra.div, {
    flex: "1"
  }, title && React112.createElement(AlertTitle, null, title), description && React112.createElement(AlertDescription, {
    display: "block"
  }, description)), isClosable && React112.createElement(CloseButton, {
    size: "sm",
    onClick: onClose,
    position: "absolute",
    insetEnd: 1,
    top: 1
  }));
};
var defaults = {
  duration: 5e3,
  position: "bottom",
  variant: "solid"
};
var defaultStandaloneParam = {
  theme: esm_default,
  colorMode: "light",
  toggleColorMode: noop,
  setColorMode: noop,
  defaultOptions: defaults
};
function createStandaloneToast(_temp) {
  var {
    theme: theme2 = defaultStandaloneParam.theme,
    colorMode = defaultStandaloneParam.colorMode,
    toggleColorMode = defaultStandaloneParam.toggleColorMode,
    setColorMode = defaultStandaloneParam.setColorMode,
    defaultOptions: defaultOptions2 = defaultStandaloneParam.defaultOptions
  } = _temp === void 0 ? defaultStandaloneParam : _temp;
  var renderWithProviders = (props, options) => React112.createElement(ThemeProvider, {
    theme: theme2
  }, React112.createElement(ColorModeContext.Provider, {
    value: {
      colorMode,
      setColorMode,
      toggleColorMode
    }
  }, isFunction(options.render) ? options.render(props) : React112.createElement(Toast2, _extends90({}, props, options))));
  var toastImpl = (options) => {
    var opts = _extends90({}, defaultOptions2, options);
    var Message = (props) => renderWithProviders(props, opts);
    return toast.notify(Message, opts);
  };
  toastImpl.close = toast.close;
  toastImpl.closeAll = toast.closeAll;
  toastImpl.update = (id2, options) => {
    if (!id2)
      return;
    var opts = _extends90({}, defaultOptions2, options);
    toast.update(id2, _extends90({}, opts, {
      message: (props) => renderWithProviders(props, opts)
    }));
  };
  toastImpl.isActive = toast.isActive;
  return toastImpl;
}
function useToast(options) {
  var {
    theme: theme2,
    setColorMode,
    toggleColorMode,
    colorMode
  } = useChakra();
  return React112.useMemo(() => createStandaloneToast({
    theme: theme2,
    colorMode,
    setColorMode,
    toggleColorMode,
    defaultOptions: options
  }), [theme2, setColorMode, toggleColorMode, colorMode, options]);
}

// node_modules/@chakra-ui/tooltip/dist/esm/tooltip.js
var React114 = __toModule(require_react());

// node_modules/@chakra-ui/tooltip/dist/esm/tooltip.transition.js
var scale2 = {
  exit: {
    scale: 0.85,
    opacity: 0,
    transition: {
      opacity: {
        duration: 0.15,
        easings: "easeInOut"
      },
      scale: {
        duration: 0.2,
        easings: "easeInOut"
      }
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      opacity: {
        easings: "easeOut",
        duration: 0.2
      },
      scale: {
        duration: 0.2,
        ease: [0.175, 0.885, 0.4, 1.1]
      }
    }
  }
};

// node_modules/@chakra-ui/tooltip/dist/esm/use-tooltip.js
var React113 = __toModule(require_react());
function _extends91() {
  _extends91 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends91.apply(this, arguments);
}
function _objectWithoutPropertiesLoose63(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function useTooltip(props) {
  if (props === void 0) {
    props = {};
  }
  var {
    openDelay = 0,
    closeDelay = 0,
    closeOnClick = true,
    closeOnMouseDown,
    onOpen: onOpenProp,
    onClose: onCloseProp,
    placement,
    id: id2,
    isOpen: isOpenProp,
    defaultIsOpen,
    arrowSize = 10,
    arrowShadowColor,
    arrowPadding,
    modifiers,
    isDisabled,
    gutter,
    offset: offset2
  } = props, htmlProps = _objectWithoutPropertiesLoose63(props, ["openDelay", "closeDelay", "closeOnClick", "closeOnMouseDown", "onOpen", "onClose", "placement", "id", "isOpen", "defaultIsOpen", "arrowSize", "arrowShadowColor", "arrowPadding", "modifiers", "isDisabled", "gutter", "offset"]);
  var {
    isOpen,
    onOpen,
    onClose
  } = useDisclosure({
    isOpen: isOpenProp,
    defaultIsOpen,
    onOpen: onOpenProp,
    onClose: onCloseProp
  });
  var {
    referenceRef,
    getPopperProps,
    getArrowInnerProps,
    getArrowProps
  } = usePopper({
    placement,
    arrowPadding,
    modifiers,
    gutter,
    offset: offset2
  });
  var tooltipId = useId(id2, "tooltip");
  var ref = React113.useRef(null);
  var enterTimeout = React113.useRef();
  var exitTimeout = React113.useRef();
  var openWithDelay = React113.useCallback(() => {
    if (!isDisabled) {
      enterTimeout.current = window.setTimeout(onOpen, openDelay);
    }
  }, [isDisabled, onOpen, openDelay]);
  var closeWithDelay = React113.useCallback(() => {
    if (enterTimeout.current) {
      clearTimeout(enterTimeout.current);
    }
    exitTimeout.current = window.setTimeout(onClose, closeDelay);
  }, [closeDelay, onClose]);
  var onClick = React113.useCallback(() => {
    if (closeOnClick) {
      closeWithDelay();
    }
  }, [closeOnClick, closeWithDelay]);
  var onMouseDown = React113.useCallback(() => {
    if (closeOnMouseDown) {
      closeWithDelay();
    }
  }, [closeOnMouseDown, closeWithDelay]);
  var onKeyDown = (event) => {
    if (isOpen && event.key === "Escape") {
      closeWithDelay();
    }
  };
  useEventListener("keydown", onKeyDown);
  React113.useEffect(() => () => {
    clearTimeout(enterTimeout.current);
    clearTimeout(exitTimeout.current);
  }, []);
  useEventListener("mouseleave", closeWithDelay, ref.current);
  var getTriggerProps = React113.useCallback(function(props2, _ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (_ref2 === void 0) {
      _ref2 = null;
    }
    var triggerProps = _extends91({}, props2, {
      ref: mergeRefs(ref, _ref2, referenceRef),
      onMouseEnter: callAllHandlers(props2.onMouseEnter, openWithDelay),
      onClick: callAllHandlers(props2.onClick, onClick),
      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown),
      onFocus: callAllHandlers(props2.onFocus, openWithDelay),
      onBlur: callAllHandlers(props2.onBlur, closeWithDelay),
      "aria-describedby": isOpen ? tooltipId : void 0
    });
    return triggerProps;
  }, [openWithDelay, closeWithDelay, onMouseDown, isOpen, tooltipId, onClick, referenceRef]);
  var getTooltipPositionerProps = React113.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return getPopperProps(_extends91({}, props2, {
      style: _extends91({}, props2.style, {
        [cssVars.arrowSize.var]: arrowSize ? px(arrowSize) : void 0,
        [cssVars.arrowShadowColor.var]: arrowShadowColor
      })
    }), forwardedRef);
  }, [getPopperProps, arrowSize, arrowShadowColor]);
  var getTooltipProps = React113.useCallback(function(props2, _ref2) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (_ref2 === void 0) {
      _ref2 = null;
    }
    var tooltipProps = _extends91({
      ref: _ref2
    }, htmlProps, props2, {
      id: tooltipId,
      role: "tooltip",
      style: _extends91({}, props2.style, {
        position: "relative",
        transformOrigin: cssVars.transformOrigin.varRef
      })
    });
    return tooltipProps;
  }, [htmlProps, tooltipId]);
  return {
    isOpen,
    show: openWithDelay,
    hide: closeWithDelay,
    getTriggerProps,
    getTooltipProps,
    getTooltipPositionerProps,
    getArrowProps,
    getArrowInnerProps
  };
}

// node_modules/@chakra-ui/tooltip/dist/esm/tooltip.js
function _extends92() {
  _extends92 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends92.apply(this, arguments);
}
function _objectWithoutPropertiesLoose64(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var StyledTooltip = chakra(motion.div);
var Tooltip = forwardRef((props, ref) => {
  var styles2 = useStyleConfig("Tooltip", props);
  var ownProps = omitThemingProps(props);
  var theme2 = useTheme();
  var {
    children,
    label,
    shouldWrapChildren,
    "aria-label": ariaLabel,
    hasArrow,
    bg,
    portalProps
  } = ownProps, rest = _objectWithoutPropertiesLoose64(ownProps, ["children", "label", "shouldWrapChildren", "aria-label", "hasArrow", "bg", "portalProps"]);
  if (bg) {
    styles2.bg = bg;
    styles2[cssVars.arrowBg.var] = getCSSVar(theme2, "colors", bg);
  }
  var tooltip = useTooltip(rest);
  var shouldWrap = isString(children) || shouldWrapChildren;
  var trigger;
  if (shouldWrap) {
    trigger = React114.createElement(chakra.span, _extends92({
      tabIndex: 0
    }, tooltip.getTriggerProps()), children);
  } else {
    var child = React114.Children.only(children);
    trigger = React114.cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));
  }
  var hasAriaLabel = !!ariaLabel;
  var _tooltipProps = tooltip.getTooltipProps({}, ref);
  var tooltipProps = hasAriaLabel ? omit(_tooltipProps, ["role", "id"]) : _tooltipProps;
  var hiddenProps = pick(_tooltipProps, ["role", "id"]);
  if (!label) {
    return React114.createElement(React114.Fragment, null, children);
  }
  return React114.createElement(React114.Fragment, null, trigger, React114.createElement(AnimatePresence, null, tooltip.isOpen && React114.createElement(Portal, portalProps, React114.createElement(chakra.div, _extends92({}, tooltip.getTooltipPositionerProps(), {
    __css: {
      zIndex: styles2.zIndex,
      pointerEvents: "none"
    }
  }), React114.createElement(StyledTooltip, _extends92({
    variants: scale2
  }, tooltipProps, {
    initial: "exit",
    animate: "enter",
    exit: "exit",
    __css: styles2
  }), label, hasAriaLabel && React114.createElement(VisuallyHidden, hiddenProps, ariaLabel), hasArrow && React114.createElement(chakra.div, {
    "data-popper-arrow": true,
    className: "chakra-tooltip__arrow-wrapper"
  }, React114.createElement(chakra.div, {
    "data-popper-arrow-inner": true,
    className: "chakra-tooltip__arrow",
    __css: {
      bg: styles2.bg
    }
  })))))));
});
if (__DEV__) {
  Tooltip.displayName = "Tooltip";
}
export {
  AbsoluteCenter,
  Accordion,
  AccordionButton,
  AccordionDescendantsProvider,
  AccordionIcon,
  AccordionItem,
  AccordionPanel,
  AccordionProvider,
  Alert,
  AlertDescription,
  AlertDialog,
  ModalBody as AlertDialogBody,
  ModalCloseButton as AlertDialogCloseButton,
  AlertDialogContent,
  ModalFooter as AlertDialogFooter,
  ModalHeader as AlertDialogHeader,
  ModalOverlay as AlertDialogOverlay,
  AlertIcon,
  AlertTitle,
  AspectRatio,
  Avatar,
  AvatarBadge,
  AvatarGroup,
  Badge,
  Box,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbSeparator,
  Button,
  ButtonGroup,
  CSSReset,
  Center,
  ChakraProvider,
  Checkbox,
  CheckboxGroup,
  Circle,
  CircularProgress,
  CircularProgressLabel,
  CloseButton,
  Code,
  Collapse,
  ColorModeContext,
  ColorModeProvider,
  ColorModeScript,
  Container,
  ControlBox,
  DarkMode,
  DefaultIcon2 as DefaultIcon,
  Divider,
  Drawer,
  ModalBody as DrawerBody,
  ModalCloseButton as DrawerCloseButton,
  DrawerContent,
  ModalFooter as DrawerFooter,
  ModalHeader as DrawerHeader,
  ModalOverlay as DrawerOverlay,
  TransitionEasings as EASINGS,
  Editable,
  EditableInput,
  EditablePreview,
  Fade,
  Flex,
  FormControl,
  FormErrorIcon,
  FormErrorMessage,
  FormHelperText,
  FormLabel,
  GlobalStyle,
  Grid,
  GridItem,
  HStack,
  Heading,
  Hide,
  Icon,
  IconButton,
  Image2 as Image,
  Img,
  Input,
  InputAddon,
  InputGroup,
  InputLeftAddon,
  InputLeftElement,
  InputRightAddon,
  InputRightElement,
  Kbd,
  LightMode,
  Link,
  LinkBox,
  LinkOverlay,
  List,
  ListIcon,
  ListItem,
  Menu,
  MenuButton,
  MenuCommand,
  MenuDescendantsProvider,
  MenuDivider,
  MenuGroup,
  MenuIcon,
  MenuItem,
  MenuItemOption,
  MenuList,
  MenuOptionGroup,
  MenuProvider,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalContextProvider,
  ModalFocusScope,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  NumberDecrementStepper,
  NumberIncrementStepper,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  OrderedList,
  PinInput,
  PinInputDescendantsProvider,
  PinInputField,
  PinInputProvider,
  Popover,
  PopoverArrow,
  PopoverBody,
  PopoverCloseButton,
  PopoverContent,
  PopoverFooter,
  PopoverHeader,
  PopoverTrigger,
  Portal,
  PortalManager,
  Progress,
  ProgressLabel,
  Radio,
  RadioGroup,
  RequiredIndicator,
  ScaleFade,
  Select,
  SelectField,
  Show,
  SimpleGrid,
  Skeleton,
  SkeletonCircle,
  SkeletonText,
  Slide,
  SlideFade,
  Slider,
  SliderFilledTrack,
  SliderMark,
  SliderProvider,
  SliderThumb,
  SliderTrack,
  Spacer,
  Spinner,
  Square,
  Stack,
  StackDivider,
  StackItem,
  Stat,
  StatArrow,
  StatDownArrow,
  StatGroup,
  StatHelpText,
  StatLabel,
  StatNumber,
  StatUpArrow,
  StyledStepper,
  StylesProvider,
  Switch,
  Tab,
  TabIndicator,
  TabList,
  TabPanel,
  TabPanels,
  Table,
  TableCaption,
  TableContainer,
  Tabs,
  TabsDescendantsProvider,
  TabsProvider,
  Tag,
  TagCloseButton,
  TagLabel,
  TagLeftIcon,
  TagRightIcon,
  Tbody,
  Td,
  Text,
  Textarea,
  Tfoot,
  Th,
  Thead,
  ThemeProvider,
  Tooltip,
  Tr,
  UnorderedList,
  VStack,
  VisuallyHidden,
  VisuallyHiddenInput,
  Wrap,
  WrapItem,
  addPrefix,
  assignRef,
  background,
  baseStyle41 as baseStyle,
  border,
  calc,
  chakra,
  color,
  cookieStorageManager,
  createIcon,
  createStandaloneToast,
  css,
  cssVar,
  defaultStandaloneParam,
  extendTheme,
  fadeConfig,
  flexbox,
  forwardRef,
  getCss,
  grid,
  isChakraTheme,
  isStyleProp,
  keyframes,
  layout,
  layoutPropNames,
  list,
  localStorageManager,
  mergeThemeOverride,
  omitThemingProps,
  others,
  outline,
  cssVars as popperCSSVars,
  position,
  propNames,
  requiredChakraThemeKeys,
  scaleFadeConfig,
  shadow,
  shouldForwardProp,
  slideFadeConfig,
  space,
  storageKey,
  styled,
  systemProps,
  theme,
  toCSSObject,
  toCSSVar,
  toVarDefinition,
  toVarReference,
  toast,
  tokenToCSSVar,
  transform,
  transition,
  typography,
  useAccordion,
  useAccordionContext,
  useAccordionDescendant,
  useAccordionDescendants,
  useAccordionDescendantsContext,
  useAccordionItem,
  useAccordionItemState,
  useAriaHidden,
  useBoolean,
  useBreakpoint,
  useBreakpointValue,
  useButtonGroup,
  useCallbackRef,
  useChakra,
  useCheckbox,
  useCheckboxGroup,
  useCheckboxGroupContext,
  useClipboard,
  useColorMode,
  useColorModePreference,
  useColorModeValue,
  useConst,
  useControllableProp,
  useControllableState,
  useCounter,
  useDimensions,
  useDisclosure,
  useEditable,
  useEditableControls,
  useEditableState,
  useEventCallback,
  useEventListener,
  useEventListenerMap,
  useFocusEffect,
  useFocusOnHide,
  useFocusOnPointerDown,
  useFocusOnShow,
  useForceUpdate,
  useFormControl,
  useFormControlContext,
  useFormControlProps,
  useId,
  useIds,
  useImage,
  useInterval,
  useLatestRef,
  useMediaQuery,
  useMenu,
  useMenuButton,
  useMenuContext,
  useMenuDescendant,
  useMenuDescendants,
  useMenuDescendantsContext,
  useMenuItem,
  useMenuList,
  useMenuOption,
  useMenuOptionGroup,
  useMenuPositioner,
  useMenuState,
  useMergeRefs,
  useModal,
  useModalContext,
  useMouseDownRef,
  useMultiStyleConfig,
  useNumberInput,
  useOutsideClick,
  usePanGesture,
  usePinInput,
  usePinInputContext,
  usePinInputDescendant,
  usePinInputDescendants,
  usePinInputDescendantsContext,
  usePinInputField,
  usePointerEvent,
  usePopover,
  usePopoverContext,
  usePopper,
  usePortalManager,
  usePrefersReducedMotion,
  usePrevious,
  useProps,
  useQuery,
  useRadio,
  useRadioGroup,
  useRadioGroupContext,
  useSafeLayoutEffect,
  useShortcut,
  useSlider,
  useSliderContext,
  useStyleConfig,
  useStyles,
  useTab,
  useTabIndicator,
  useTabList,
  useTabPanel,
  useTabPanels,
  useTabs,
  useTabsContext,
  useTabsDescendant,
  useTabsDescendants,
  useTabsDescendantsContext,
  useTheme,
  useTimeout,
  useToast,
  useToken,
  useTooltip,
  useUnmountEffect,
  useUpdateEffect,
  useWhyDidYouUpdate,
  visuallyHiddenStyle,
  withDefaultColorScheme,
  withDefaultProps,
  withDefaultSize,
  withDefaultVariant
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=@chakra-ui_react.js.map
